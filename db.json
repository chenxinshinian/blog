{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery-master/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/alipay.jpg","path":"medias/wangbin/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/logo.png","path":"medias/wangbin/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/wechat.png","path":"medias/wangbin/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/wechat.JPG","path":"medias/wangbin/wechat.JPG","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/favicon.ico","path":"medias/wangbin/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/avatar.jpg","path":"medias/wangbin/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery-master/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1580225164891},{"_id":"themes/hexo-theme-matery-master/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1580225164907},{"_id":"themes/hexo-theme-matery-master/README_CN.md","hash":"e7565b179024ef8043d34c7b8468dc5f16ba366c","modified":1580225164938},{"_id":"themes/hexo-theme-matery-master/README.md","hash":"1c9c512aeafc29afef0a2ffab2aa53ea48b6bc72","modified":1580225164922},{"_id":"themes/hexo-theme-matery-master/_config.yml","hash":"5bfd683e59c299cf7643aea6eb7f4a329128e186","modified":1588743201588},{"_id":"themes/hexo-theme-matery-master/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1580225164969},{"_id":"themes/hexo-theme-matery-master/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1580225164985},{"_id":"themes/hexo-theme-matery-master/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1580225165016},{"_id":"themes/hexo-theme-matery-master/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1580225165063},{"_id":"themes/hexo-theme-matery-master/layout/archive.ejs","hash":"7fe7b9028b0da9c84715c3583b6b4172c2342ac8","modified":1580225165047},{"_id":"themes/hexo-theme-matery-master/layout/category.ejs","hash":"720d02e5fc37d154b60590bb7f64a2a4651c02db","modified":1580225165094},{"_id":"themes/hexo-theme-matery-master/layout/friends.ejs","hash":"4cb216b2a650ad5d2942047a65d0883a188c2abb","modified":1580225165141},{"_id":"themes/hexo-theme-matery-master/layout/contact.ejs","hash":"c3396cc5b1cbb102f500554f76946f5b45ee6d54","modified":1580225165110},{"_id":"themes/hexo-theme-matery-master/layout/index.ejs","hash":"92f053ac3e335129269036f862521326f10e80d8","modified":1580225165172},{"_id":"themes/hexo-theme-matery-master/layout/layout.ejs","hash":"ae8103ff07796e3bce5a6707a069c939c4f60d5e","modified":1580225165204},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1580224924637},{"_id":"themes/hexo-theme-matery-master/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1580225165235},{"_id":"themes/hexo-theme-matery-master/layout/tag.ejs","hash":"0c0194cf006fab2dccf4f788075e51cd06637df4","modified":1580225165266},{"_id":"themes/hexo-theme-matery-master/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1580225165282},{"_id":"themes/hexo-theme-matery-master/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1580225166141},{"_id":"themes/hexo-theme-matery-master/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1580225165282},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1580225165313},{"_id":"themes/hexo-theme-matery-master/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1580225165329},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover-content.ejs","hash":"b5a1371f8b3d2a90ad575f1b6d25230e97ec0e7c","modified":1580225165344},{"_id":"themes/hexo-theme-matery-master/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1580225165360},{"_id":"themes/hexo-theme-matery-master/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1580225165375},{"_id":"themes/hexo-theme-matery-master/layout/_partial/footer.ejs","hash":"862dda56666b4cb00b6bce9678383228fe2fd660","modified":1580226780550},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitalk.ejs","hash":"fe7c785f0536ad828d957a9565ca5c53a0cead43","modified":1580225165422},{"_id":"themes/hexo-theme-matery-master/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1580225165422},{"_id":"themes/hexo-theme-matery-master/layout/_partial/gitment.ejs","hash":"4f3a8f243ea07644fc599bdb44cc6be1a78fb0a1","modified":1580225165438},{"_id":"themes/hexo-theme-matery-master/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1580225165453},{"_id":"themes/hexo-theme-matery-master/layout/_partial/head.ejs","hash":"61e03d8106ee4615f5f2ebc6ef7e648f5a1f9c65","modified":1580225165469},{"_id":"themes/hexo-theme-matery-master/layout/_partial/header.ejs","hash":"f555d813f568a2dbf6f572559020c44d13975449","modified":1580225165485},{"_id":"themes/hexo-theme-matery-master/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1580225165547},{"_id":"themes/hexo-theme-matery-master/layout/_partial/index-cover.ejs","hash":"489e629d460ea8c732cd2c1b38d7871af84cac89","modified":1580225165532},{"_id":"themes/hexo-theme-matery-master/layout/_partial/mobile-nav.ejs","hash":"153b80047ac06a8d06a97002a98d38111d92b494","modified":1580225165578},{"_id":"themes/hexo-theme-matery-master/layout/_partial/navigation.ejs","hash":"5ff6fdfe973619120a9eda4505bbff4545e39ff0","modified":1580225165594},{"_id":"themes/hexo-theme-matery-master/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1580225165610},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-cover.ejs","hash":"68738493f40e22ff82891e3aecaa2746c8470cd0","modified":1580225165625},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail-toc.ejs","hash":"78a9ea7cb06f7eb7a39a854ca25864e5dc574800","modified":1580225165641},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-detail.ejs","hash":"2a000638814aafe4d812f09ce8f1b10bca314d8d","modified":1580225165688},{"_id":"themes/hexo-theme-matery-master/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1580225165703},{"_id":"themes/hexo-theme-matery-master/layout/_partial/prev-next.ejs","hash":"35b6b4a0200c10be6ae9d9558367718290476f84","modified":1580225165750},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reprint-statement.ejs","hash":"01f5eef82bbcb9d432631dbb78dd51d4d4b3b8b5","modified":1580225165797},{"_id":"themes/hexo-theme-matery-master/layout/_partial/reward.ejs","hash":"8a1176c4f33a0cd00db05561ce7b8ac6bceb322c","modified":1580225165813},{"_id":"themes/hexo-theme-matery-master/layout/_partial/search.ejs","hash":"84e1073b3bef478c352c271f8169d667db42f5eb","modified":1580225165828},{"_id":"themes/hexo-theme-matery-master/layout/_partial/share.ejs","hash":"5bf9dabd3ab2e298ead92256f5a732f27939ec66","modified":1580225165844},{"_id":"themes/hexo-theme-matery-master/layout/_partial/social-link.ejs","hash":"6dcb67a21b58d62299aa404214b5946a90c68b39","modified":1580230426079},{"_id":"themes/hexo-theme-matery-master/layout/_partial/valine.ejs","hash":"60bcc9b0a0983d631c0fb69f6d1672d895df5107","modified":1580225165875},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-cloud.ejs","hash":"424ef5db791264a79c1f3338e7c43a2f445cb2ab","modified":1580225165907},{"_id":"themes/hexo-theme-matery-master/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1580225165922},{"_id":"themes/hexo-theme-matery-master/layout/_widget/music.ejs","hash":"1b7e97c73a6c466a521a277691e19b5c057f0546","modified":1580225165953},{"_id":"themes/hexo-theme-matery-master/layout/_widget/dream.ejs","hash":"ba83115ce66f4328601e567aa30f50d1410b9bfa","modified":1580225165922},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-gallery.ejs","hash":"de2e0abc085b721318f35c0b5d4891230be36529","modified":1580225165969},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-projects.ejs","hash":"dbd8df5146bd6e873535e24f09dd7cf04e17a4e4","modified":1580225165985},{"_id":"themes/hexo-theme-matery-master/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1580225166000},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-calendar.ejs","hash":"06c5196b3115b2a30cc6001529b08f21b54ce31f","modified":1580225166031},{"_id":"themes/hexo-theme-matery-master/layout/_widget/post-charts.ejs","hash":"a3666971c96169aac38708675dbd2df2b44a4cdd","modified":1580225166047},{"_id":"themes/hexo-theme-matery-master/layout/_widget/recommend.ejs","hash":"a40f466dc96cedfcde66b89acdc0a2fa8a8dfefe","modified":1580225166078},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1580225166094},{"_id":"themes/hexo-theme-matery-master/layout/_widget/video.ejs","hash":"4162453e7e125013c8b1ad18ffc691a6ba124b88","modified":1580225166125},{"_id":"themes/hexo-theme-matery-master/layout/_widget/tag-wordcloud.ejs","hash":"e3f245c42d8a7c5810f689bd9a4ac48e77217260","modified":1580225166110},{"_id":"themes/hexo-theme-matery-master/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1580225166156},{"_id":"themes/hexo-theme-matery-master/source/css/matery.css","hash":"64d12d5921e67eb97beceb5583770f47b48e3a3e","modified":1580225166172},{"_id":"themes/hexo-theme-matery-master/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1580225166188},{"_id":"themes/hexo-theme-matery-master/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1580225166203},{"_id":"themes/hexo-theme-matery-master/source/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1580225166219},{"_id":"themes/hexo-theme-matery-master/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1580225166235},{"_id":"themes/hexo-theme-matery-master/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1580225168181},{"_id":"themes/hexo-theme-matery-master/source/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1580225168196},{"_id":"themes/hexo-theme-matery-master/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1580225168212},{"_id":"themes/hexo-theme-matery-master/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1580225168165},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1580225166266},{"_id":"themes/hexo-theme-matery-master/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1580225166297},{"_id":"themes/hexo-theme-matery-master/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1580225166250},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1580225166313},{"_id":"themes/hexo-theme-matery-master/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1580225166656},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1580225166688},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1580225166672},{"_id":"themes/hexo-theme-matery-master/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1580225166703},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1580225166719},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1580225166734},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1580225166859},{"_id":"themes/hexo-theme-matery-master/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1580225166875},{"_id":"themes/hexo-theme-matery-master/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1580225166906},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1580225166938},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1580225167275},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1580225167368},{"_id":"themes/hexo-theme-matery-master/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1580225167415},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1580225167446},{"_id":"themes/hexo-theme-matery-master/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1580225167462},{"_id":"themes/hexo-theme-matery-master/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1580225167712},{"_id":"themes/hexo-theme-matery-master/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1580225167821},{"_id":"themes/hexo-theme-matery-master/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1580225167837},{"_id":"themes/hexo-theme-matery-master/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1580225167853},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1580225168024},{"_id":"themes/hexo-theme-matery-master/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1580225168040},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1580225168415},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1580225168384},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1580225168399},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1580225168462},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1580225168477},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1580225168493},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1580225168509},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1580225168540},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1580225168571},{"_id":"themes/hexo-theme-matery-master/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580225168196},{"_id":"themes/hexo-theme-matery-master/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1580225166344},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1580225168618},{"_id":"themes/hexo-theme-matery-master/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1580225166984},{"_id":"themes/hexo-theme-matery-master/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1580225167400},{"_id":"themes/hexo-theme-matery-master/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1580225167525},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1580225168071},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1580225168227},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1580225168321},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1580225168337},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1580225168337},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1580225168352},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1580225168384},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1580225168446},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1580225168431},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1580225168431},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1580225168477},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1580225168509},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1580225168524},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1580225168571},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1580225168556},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1580225168587},{"_id":"themes/hexo-theme-matery-master/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1580225168602},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1580225166484},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1580225166516},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1580225166531},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1580225166531},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1580225167540},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1580225167571},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1580225167556},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1580225167587},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1580225167603},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1580225167681},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1580225167634},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1580225167649},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1580225167728},{"_id":"themes/hexo-theme-matery-master/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1580225167806},{"_id":"themes/hexo-theme-matery-master/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1580225167884},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1580225167618},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1580225167899},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1580225167915},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1580225167931},{"_id":"themes/hexo-theme-matery-master/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1580225167931},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1580225167962},{"_id":"themes/hexo-theme-matery-master/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1580225167993},{"_id":"themes/hexo-theme-matery-master/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1580225168149},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1580225168259},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1580225168243},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580225168259},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1580225168306},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1580225168290},{"_id":"themes/hexo-theme-matery-master/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1580225167618},{"_id":"themes/hexo-theme-matery-master/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1580225168368},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1580225166375},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1580225166469},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1580225166625},{"_id":"themes/hexo-theme-matery-master/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1580225167337},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1580225166453},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1580225166625},{"_id":"themes/hexo-theme-matery-master/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1580225168274},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1580225166391},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1580225166438},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"229afff648cbd17de80176e0feb969c7f514be7e","modified":1580225166500},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1580225166547},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1580225166609},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"25612c76ded31c497effe46454d8d2bb36fb99d6","modified":1580225166422},{"_id":"themes/hexo-theme-matery-master/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1580225167251},{"_id":"themes/hexo-theme-matery-master/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"2c026711e4dd6b6d805cc19c0e4a572e6239a05b","modified":1580225166578},{"_id":"source/categories/index.md","hash":"73c3ce41e924ffaf6b2688a48b5a30dbfc4372c3","modified":1580225661902},{"_id":"source/tags/index.md","hash":"bc8446586dfca8f1412a04ac19abd706ae6153d2","modified":1580225678559},{"_id":"source/about/index.md","hash":"c59fd8b837e3d971bc5f430a32b216ec98693eb6","modified":1580225654120},{"_id":"source/contact/index.md","hash":"ec2dbdec730356ac7beae3e97fc73147f31a890a","modified":1580225670973},{"_id":"source/_posts/搭建一个极简静态网站.md","hash":"7359e08dbd8574f352ddc0d9293227333dfa3efe","modified":1585923922088},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/Dog_256px_1096279_easyicon.net.png","hash":"8595b5125d8372f6e8535f6c86416fcf31018b22","modified":1580229467939},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/Dog_128px_1096279_easyicon.net.ico","hash":"f29288155a474a5eb606eb4e8879574cca7d58b6","modified":1580229445901},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/logo.png","hash":"6a0bb0b8d8b16ad27ee02b71732ee9cd59b24597","modified":1580232055005},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/alipay.jpg","hash":"a5660c1acafcc5271c300d185b9b1e550dec1ece","modified":1577366438000},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/wechat.png","hash":"fff6d1a69614808e6b88e232e282ed768417c32a","modified":1577366438000},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/favicon.ico","hash":"f29288155a474a5eb606eb4e8879574cca7d58b6","modified":1580229445901},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/wehcat.JPG","hash":"377784167f6267fb60e4e67c625b239e9c11a365","modified":1580227004103},{"_id":"public/atom.xml","hash":"95312b435235c245cfd59db28140210d86529357","modified":1589706736513},{"_id":"public/search.xml","hash":"c67eea4be25a6da24ce441e8f1a9dcd60429182e","modified":1589706736513},{"_id":"public/categories/index.html","hash":"4075a61496daf2e0bdd632c084b610be29dd1fe7","modified":1589706736513},{"_id":"public/tags/index.html","hash":"d8c2972b9bd34d7bd70a6eebc4dc438bead35331","modified":1589706736513},{"_id":"public/contact/index.html","hash":"cb9997936af6087996071c88b2756cc8b41d5fe7","modified":1589706736513},{"_id":"public/categories/分享/index.html","hash":"49a972fe00c9542e28f4bbc5c207d98e179d1465","modified":1589706736513},{"_id":"public/tags/vuepress/index.html","hash":"2ac3d66ef318c91a8cdcac2d10d958aea1374220","modified":1589706736513},{"_id":"public/about/index.html","hash":"4646cefcb98d55c6045adca698364a86b28f2d8a","modified":1589706736513},{"_id":"public/2020/01/27/da-jian-yi-ge-ji-jian-jing-tai-wang-zhan/index.html","hash":"30acb43f26dd66265516a5c14b006f2e328c64b8","modified":1589706736513},{"_id":"public/archives/index.html","hash":"3a8bdf5063eb14461231d9a7d6a958dd7f4c87fe","modified":1589706736513},{"_id":"public/archives/2020/index.html","hash":"e07afdf867dd6cda118c757acd3ca9db3fd3cb12","modified":1589706736513},{"_id":"public/archives/2020/01/index.html","hash":"949398d2fe4f65c3372659f3f855f29a9f56946b","modified":1589706736513},{"_id":"public/index.html","hash":"75afb786d35908eac6cd192ff0d422f8fd859b15","modified":1589706736513},{"_id":"public/medias/icp.png","hash":"5d1a1f3051c8a4ad70afa0a5488dfa7f0bb27bd5","modified":1580230011838},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1580230011838},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1580230011838},{"_id":"public/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1580230011838},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1580230011838},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1580230011838},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1580230011838},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1580230011838},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1580230011838},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1580230011838},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1580230011838},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1580230011838},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1580230011838},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1580230011838},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1580230011838},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1580230011838},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1580230011838},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1580230011838},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1580230011838},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1580230011838},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1580230011838},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1580230011838},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1580230011838},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1580230011838},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1580230011838},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1580230011838},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1580230011838},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1580230011838},{"_id":"public/medias/wangbin/logo.png","hash":"8595b5125d8372f6e8535f6c86416fcf31018b22","modified":1580230011838},{"_id":"public/medias/wangbin/alipay.jpg","hash":"a5660c1acafcc5271c300d185b9b1e550dec1ece","modified":1580230011838},{"_id":"public/medias/wangbin/wechat.png","hash":"fff6d1a69614808e6b88e232e282ed768417c32a","modified":1580230011838},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1580230011838},{"_id":"public/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1580230011838},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1580230011838},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1580230011838},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1580230011838},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1580230011838},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1580230011838},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1580230011838},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1580230011838},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1580230011838},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1580230011838},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1580230011838},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1580230011838},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1580230011838},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1580230011838},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1580230011838},{"_id":"public/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1580230011838},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1580230011838},{"_id":"public/medias/wangbin/favicon.ico","hash":"f29288155a474a5eb606eb4e8879574cca7d58b6","modified":1580230011838},{"_id":"public/js/matery.js","hash":"07ed4f743a497d7850b3fdda2a5d9beccc5a8fb5","modified":1580230011838},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1580230011838},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1580230011838},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1580230011838},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1580230011838},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1580230011838},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1580230011838},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1580230011838},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1580230011838},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1580230011838},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1580230011838},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1580230011838},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1580230011838},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1580230011838},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1580230011838},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1580230011838},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1580230011838},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1580230011838},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1580230011838},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1580230011838},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1580230011838},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1580230011838},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1580230011838},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1580230011838},{"_id":"public/css/matery.css","hash":"64d12d5921e67eb97beceb5583770f47b48e3a3e","modified":1580230011838},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1580230011838},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1580230011838},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1580230011838},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1580230011838},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1580230011838},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1580230011838},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1580230011838},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1580230011838},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1580230011838},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1580230011838},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1580230011838},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1580230011838},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1580230011838},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1580230011838},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1580230011838},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1580230011838},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1580230011838},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1580230011838},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1580230011838},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1580230011838},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1580230011838},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580230011838},{"_id":"public/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1580230011838},{"_id":"public/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1580230011838},{"_id":"public/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1580230011838},{"_id":"public/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"229afff648cbd17de80176e0feb969c7f514be7e","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1580230011838},{"_id":"public/medias/wangbin/wehcat.JPG","hash":"377784167f6267fb60e4e67c625b239e9c11a365","modified":1580230011838},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1580230011838},{"_id":"public/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"25612c76ded31c497effe46454d8d2bb36fb99d6","modified":1580230011838},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"2c026711e4dd6b6d805cc19c0e4a572e6239a05b","modified":1580230011838},{"_id":"source/_data/musics.json","hash":"22a2cf25b1fad49d0615c11e1a4895780544d574","modified":1588745166146},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/avatar.jpg","hash":"adeb4fe39f21e275310792692d0cff82b562e7a0","modified":1577366438000},{"_id":"public/medias/wangbin/avatar.jpg","hash":"adeb4fe39f21e275310792692d0cff82b562e7a0","modified":1580231433476},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/favicon1.ico","hash":"22960f6112c5598cd9b96ac6885dafe0962f050e","modified":1580232547316},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/logo1.png","hash":"6204c6b36ab993ecbc8a556d4c938a5c6fefdf6c","modified":1580232547989},{"_id":"themes/hexo-theme-matery-master/source/medias/wangbin/wechat.JPG","hash":"d27ce0a353a4fdfb52efbd76130af4794c47a420","modified":1580232549424},{"_id":"public/medias/wangbin/wechat.JPG","hash":"d27ce0a353a4fdfb52efbd76130af4794c47a420","modified":1580232881186},{"_id":"source/_posts/万维网是怎么工作的.md","hash":"87400bd1ece29b9446419f2da421353e9c94e0bb","modified":1583104566540},{"_id":"source/_posts/免费科学上网.md","hash":"3e472fb3129a68b8b7e07eca05d38504a7cbc9a7","modified":1589702439861},{"_id":"public/2020/03/02/mian-fei-ke-xue-shang-wang/index.html","hash":"506a1a68b699a6f7cf91957adcb13e2b547e6ef0","modified":1589706736513},{"_id":"public/archives/2020/03/index.html","hash":"f5fd1e548edc09005dac030bbc1eef1a13873a7d","modified":1589706736513},{"_id":"source/_posts/隐私政策.md","hash":"02e0eb98d62b4fd69c55e80e70457d3fab89c9ef","modified":1583761780158},{"_id":"public/2020/03/09/yin-si-zheng-ce/index.html","hash":"3d28ab3593202601dbac6e2701baa81f9c361ca7","modified":1583761836839},{"_id":"source/_posts/关于本博客.md","hash":"d7e6caddc86e5e4e432c49c21b1a15e8c9958c51","modified":1589702434345},{"_id":"public/2020/04/03/guan-yu-ben-bo-ke/index.html","hash":"b3c82b24227b515b2d4fc8532b76a7e36ab172f5","modified":1589706736513},{"_id":"public/archives/2020/04/index.html","hash":"a1f24dac58b6531243bd88d1624e3ad1ef435010","modified":1589706736513},{"_id":"source/_posts/为什么比较字符串要用equals.md","hash":"4a7ad52edd065e3b5ce6345611834fe60f08a852","modified":1587110085308},{"_id":"source/_posts/单例设计模式.md","hash":"efcf5fd4e0cadf1002b24cc6e76769ef42cf92a4","modified":1587309492682},{"_id":"public/2020/04/19/dan-li-she-ji-mo-shi/index.html","hash":"6bac838c7210f483cafa4d06e0f6afc33f5b64b8","modified":1589706736513},{"_id":"public/categories/技术总结/index.html","hash":"ff95c82c2c71b7c77cb96b06b660ebe4ea420ba4","modified":1589706736513},{"_id":"public/tags/Java/index.html","hash":"bffcdce1d994bf21f9d3d703f994372a2ca8bc68","modified":1589706736513},{"_id":"public/tags/设计模式/index.html","hash":"6c1a4b4858e5c5f53902e59197c34e1dfea87306","modified":1589706736513},{"_id":"source/_posts/关于http协议你需要掌握的知识点.md","hash":"32da48f69a509034de78eef276c1873d537aa60e","modified":1587473222879},{"_id":"source/_posts/面向对象-OOP.md","hash":"05abeb97e3e1a5c6e0b1da1a12c9917a6dff87c3","modified":1587741747511},{"_id":"source/_posts/数据库设计.md","hash":"6a852788867dc64658ca0d8672935b7455adaf1b","modified":1589707274568},{"_id":"source/_posts/数据库物理设计.md","hash":"01e7351f7c889b0802a65e82873f1893a5995e99","modified":1589700845308},{"_id":"public/2020/05/12/shu-ju-ku-she-ji/index.html","hash":"72a840ad4f661880d0b8f1992e6ede7fdb520fc9","modified":1589706736513},{"_id":"public/2020/05/11/shu-ju-ku-wu-li-she-ji/index.html","hash":"ea62c94dfc1e1c5d1906c90c6a16431ad92983f6","modified":1589706736513},{"_id":"public/archives/2020/05/index.html","hash":"e47bd43c72a8bc55ba1a19c78a46d6d9d66b4ad4","modified":1589706736513},{"_id":"public/categories/数据库/index.html","hash":"2d032b8164fafc488639ce3e94531bd45187cfc7","modified":1589706736513},{"_id":"public/tags/数据库设计/index.html","hash":"bad7351b497bd8159961b7037c82880c45e1ea07","modified":1589706736513},{"_id":"source/_posts/数据库逻辑设计.md","hash":"89f76289d4e355be23fe092ac056ccaa256387ee","modified":1589701491626},{"_id":"source/_posts/数据库维护和优化.md","hash":"3290c9b80fe905db4fec41b232f9a8432fb8df35","modified":1589702196439},{"_id":"public/2020/05/17/shu-ju-ku-wei-hu-he-you-hua/index.html","hash":"3f3ff913cdf80cb4423094c8863f73194aea2242","modified":1589701526547},{"_id":"public/2020/05/09/shu-ju-ku-luo-ji-she-ji/index.html","hash":"37ab5e7854f1c19ee191756db669b9018626cb8f","modified":1589706736513},{"_id":"source/_posts/解决博客访问此书不正确问题.md","hash":"aab63de95c2e845945d43f8d00c3e24a4281160c","modified":1589703085132},{"_id":"public/2020/05/14/jie-jue-bo-ke-fang-wen-ci-shu-bu-zheng-que-wen-ti/index.html","hash":"938bbf3735f2a6512c03cdaa372b4d9b1d1acae6","modified":1589706736513},{"_id":"public/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/index.html","hash":"0875ccfa489946d0e81886b49fdba5457c5b8949","modified":1589706736513},{"_id":"public/categories/记录/index.html","hash":"ea5c891781d649a28db2415cba6255c7de1a03cf","modified":1589706736513},{"_id":"public/tags/blog/index.html","hash":"04e74faa95a74784d56f34edfae25d105ff87f39","modified":1589706736513}],"Category":[{"name":"分享","_id":"ck5y1zgh40005kouz0bdr3a48"},{"name":"技术","_id":"ck93wdced0001tsuz1b09fgfn"},{"name":"技术总结","_id":"ck96yqarr0001acuz93dd56cg"},{"name":"数据库","_id":"ckaaqa3ug0003i4jx3hnu9il1"},{"name":"记录","_id":"ckaas6mum0001qajxe9ju8di8"}],"Data":[{"_id":"musics","data":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}],"Page":[{"title":"about","date":"2020-01-28T15:33:41.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-28 23:33:41\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-05-05T19:02:44.000Z","path":"about/index.html","comments":1,"_id":"ckaaqa3ud0001i4jxh1hh6pbk","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":""},{"title":"categories","date":"2020-01-28T15:33:25.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-28 23:33:25\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-05-05T19:02:44.000Z","path":"categories/index.html","comments":1,"_id":"ckaaqa3v8000ei4jxdmbeegqm","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-01-28T15:33:51.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-01-28 23:33:51\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2020-05-05T19:02:44.000Z","path":"contact/index.html","comments":1,"_id":"ckaaqa3vb000fi4jxdm3u7187","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-01-28T15:33:34.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-28 23:33:34\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-05-05T19:02:44.000Z","path":"tags/index.html","comments":1,"_id":"ckaaqa3vc000hi4jx0od33pm2","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":""}],"Post":[{"title":"数据库设计","date":"2020-05-12T07:12:22.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n#### 为什么要进行数据库设计\n谈到数据库设计首先要弄明白什么是“数据库设计”，我们可以打一个不太恰当的比喻:把数据库应用程序的设计看作是在建立一座大厦，那么建立大厦之前通常要对大厦的整体结构进行设计，并且汇聚成图纸然后应对图纸再对大厦进行施工，那么数据库设计的过程就相当于是我们建造大厦的过程。首先我们也要对数据库的整体结构进行图形化的设计，然后再根据图形来对数据库结构进行建立。那么简单来说：\n数据库设计就是根据业务系统的具体需求结合我们所选的DBMS(数据库管理系统),为这个业务系统构造出最优的数据库存储模型，并建立好数据库中的表结构及表与表之间的关联关系的过程。使之能**有效**的对应系统中的数据进行存储，并可以**高效的**的对已经存储的数据进行访问。\n\n常用的数据库管理系统有：MySQL、Oracle、SQLServer、Pgsql这些都是目前主流的关系性数据库系统\n已经现在流行的NoSQL系统：Mongo、Memcache、Redis\n\n注意，我们要达到的目的是**对数据有效的存储以及高效的访问**。那么应用系统中所产生的数据有多种的存储方式。首先我们可以把所有的数据都存储在同一张表中，虽然说这样达到了存储的目的但是却不一定能达到高效访问的目的。\n\n#### 好的数据库设计对比糟糕的数据库设计\n一个优良的数据库设计：\n1)可以减少数据冗余\n2)避免数据维护异常\n3)节约存储空间\n4)高效的访问\n反之一个糟糕的数据库设计：\n1)会存在大量数据冗余\n2)存在数据插入，更新，删除的异常\n3）浪费大量存储空间\n4）访问数据低效\n\n数据库系统是应用系统存储数据的关键组成部分，是系统稳定运行的基础，决定着系统是否可以高效稳定的运行，还以刚才大厦的例子来说，我们的数据库就相当于是这个大厦的地基，如果大厦的地基可以稳固，那么大厦就可以建的很高，如果地基没有建好那么大厦就很容易倒塌，同样如果数据库没有设计好的话那么系统就不会太稳定。这种情况可能在最终我们系统访问量很小数据也不多的情况下不明显，但是随着我们数据库的数据越来越多访问量的越来越大，那么这种数据库设计的缺陷就会显现出来。\n例如一家初创企业，在初创期开发人员并不多并且也没有在专业的DBA，这样他们所设计的数据库仅仅是以存储数据为目的，达到数据存储后就没有进一步进行调优，这就会使得这家企业业务发展起来的时候，数量非常大的时候就会在一些比较重要的促销时经常会出现系统死机的情况，这不但影响的公司业务的正常运行，并且对今后的开发也在造成的非常大的影响。所以说我们很有必要在系统设计的开始就对数据库进行一个良好的设计，这样不但对系统稳定带来好处，并且对今后的维护开发已经业务运行都有非常大的好处。\n\n#### 数据库设计步骤\n如果你在工作中要对一些慢查询进行调优工作，但是慢查询是由于数据库结构设计的不合理产生的。那么我们进行慢查询调整的时候就必然要对数据库的结构进行调整，而当我们的数据库已经在生产环境运行了一段时间的话，我们要再想对数据库结构进行调整就必然会影响业务的正常运行，这是谁都不希望看到的，所以我们很有必要在数据库设计的最终就把数据库设计成一个简洁高效的数据库结构。\n\n数据库设计的步骤：\n**需求分析->逻辑设计->物理设计->维护优化**\n\n和应用程序设计一样，数据库设计最初也要进行需求分析，只不过数据库的需求分析和应用程序的需求分析侧重点不太一样。数据库设计的需求分析的侧重点主要是：\n应用主要在数据库中存储的数据是什么？而这些数据又有哪些属性？这些数据和属性各自的特点又有那些？\n\n我们只要了解这些东西，那么就对我们后边的数据库设计有非常大的帮助\n\n需求分析之后是逻辑设计，在逻辑中我们主要是通过ER图这种工具对数据库进行逻辑建模。这个逻辑建模之所以叫逻辑建模就是因为他跟我们所选的具体的具体数据库管理系统是没有关系的，我们进行逻辑建模之后是可以在大多数数据库管理系统中在进行表结构的设计的。\n\n逻辑设计后就是物理设计了，在物理设计中我们就要区考虑我们使用的数据库管理系统是什么。因为就目前来说我们常用的数据库管理系统如,MySQL、Oracle、SQLServer、Pgsql这几种数据库系统他们\n每一种都有自身的特点，而我们为了把数据库管理系统的效率发挥到最高，那么我们在进行物理设计的时候就要充分的考虑到每一种数据库管理系统具体的特点是什么，这个时候在把逻辑设计中所建立的逻辑模型转换为我们需要的物理模型，这样我们就可以达到数据库效率的最优化。\n\n物理设计之后就是维护和优化，在维护和优化过程中我们要对新的需求进行表结构的建立或者索引的优化在或者是数据量大到一定程度的时候我们可能要考虑表的拆分。但是在维护和优化中有一个非常重要的地方需要在注意，就是说在最初我们应用上线的在最开始我们的数据库设计是非常完美的，非常简洁也非常高效，但是当需求不断的累加，在时候在后面的开发过程中我们就不注意数据库的设计问题，这样随着应用程序上线的时间越来久需求累加越来越多，我们应用数据库结构也会越来越复杂，这些都属于维护优化工作没有做好的原因。所以在维护优化过程中也要注意，当接到新的需求的时候也要通过以上需求分析、逻辑分析、物理设计这几步，完成之后在进行具体的建表工作，在这样可以就可以保证数据库结构永远是最优的。\n\n#### 为什么要进行需求分析\n实际工作中一些开发人员都是拿到一个需求之后并不会进行需求分析而是直接进行表结构设计。往往这样设计出的数据库并不会在最优化的。所以有必要在数据库之前进行需求分析。\n\n在需求分析中我们要先搞清楚：\n\n在这个系统中我们所存储的数据有哪些?\n这些数据又有什么样的特点？\n比如说，有些数据是具有时效性的而有些数据是不具有时效性的。对于一些时效性的数据可以采取过期清理或者归档的方式来进行存储。\n了解数据的生命周期\n还有一些数据增长很快数据量也很大，但是这些数据并不是核心数据，对于这些数据我们也可以进行分库分表的方式进行存储。在实际工作中一些开发人员希望把一些日志类的数据存到数据库中，以DBA的角度来看这种数据是非常不是和存储在数据库中的，首先是因为这种数据增长量非常大，并且并不属于核心数据，所以对于这种数据如果一定要存储到数据库中，可以在进行数据库存储之前可以先定义好这种数据的归档或者清理规则，这样可以随着数据库上线就可以进行数据的归档和清理，如果当这个表増长的非常大的时候在进行归档和清理的时候一定工作量非常大，并且很有可能影响线上的正常使用。\n\n#### 在需求分析中要搞清楚的一些问题\n在需求分析中首先要搞清楚要在数据库中存储的对象都有什么?\n这些对象也可以称之为实体。实体及实体之间的关系？\n实体和数据库表之间的关系是并不是一一对应的而是可以1对1，1对多，多对多，实体之间的关系也是如此\n实体所包含的属性有什么?\n这些属性也有各自的特点，比如说那些属性是可以标识出这些实体的，\n哪些属性或组合可以唯一标识一个实体？\n那个标识出实体的属性可能是一个也可能是多个或者是多种组合来标识这个实体。具体选用哪一种是需要我们在逻辑设计中考虑的问题，但是在需求分析的时候我们就要把这些属性和属性组合搞清楚。\n清楚实体所包含的属性之后还要了解出实体的一些特性，比如在存储上有什么样的特性，增长量会是什么样?就比如对一些日志类的实体\n可能增长比较快，对于这些实体我们就要考虑分库分表的操作或者是按时进行归档，这些内容是我们要在物理设计中考虑的，但是如果在需求分析中没有把这些搞清楚的话，在在物理设计和逻辑设计中就很难对数据库进行分库分表的设计或者归档的设计\n\n#### 实例演示\n以一个小型的电子商务网站为例，在这个电子商务网站的系统中包括了几个核心模块：用户模块，商品模块，订单模块，购物车模块，供应商模块。\n\n用户模块主要用于用户登录和保存用户注册信息\n包括属性：用户名 、密码、电话、邮箱、身份证号、地址、姓名、昵称……\n可选唯一标识属性：用户名、身份证、电话\n存储特点：随着系统上线时间逐渐增加，需要永久存储，这就要求在物理设计中考虑对用户模块是否要分库分表的问题\n\n商品模块用于记录网站中所销售的商品信息\n包括属性：商品编码、商品名称、商品描述、商品品类、供应商名称、重量、有效期、价格……\n可选唯一标识属性：（商品名称、供应商名称）、（商品编码）\n因为一个供应商可能对我们提供多个商品，同时也有可能一个商品由多个供应商提供,所以商品名称和供应商名称的组合才能唯一标识出哪一个供应商提供的哪一个商品\n存储特点：随着网站经营时间的增长,商品也会越来越多，但是对于某一个供应商的商品来说，如果这个供应商已经不再对我们提供供应的话，对于这些商品我们实际上可以进行一些归档的存储。但是，切记这些商品是不能删除的，因为有可能还会和订单模块相关,所以这些商品是需要永久存储，但是可以对一些不再销售的商品进行一些迁移工作（先迁移到其他表中）这样对我们商品表可以保持一个比较小的数量级，能对搜索查询的效率带来好处\n\n订单模块用于存储用户订购商品的信息\n因为订单是属于用户的所以要包括：订单号、用户姓名、用户电话、收货地址、商品编号、商品名称、数量、价格、订单状态、支付状态、订单类型……\n可选唯一标识属性：（订单号）（用户命名、商品、下单日期）\n存储特点：随着经营的增长订单表数据会越来越多，订单表需要永久存储，并且很多用户需要查询历史订单记录，所以订单表的查询频率会非常大，所以要考虑分表或者分库的操作\n\n购物车模块用于存储用户选购的商品信息\n包括属性：用户名、商品编号、商品名称、商品价格、商品描述、商品分类、加入时间、商品数量……\n可选唯一标识：（用户名、商品编号、加入时间）、（购物车编号）\n存储特点：不用永久存储（设置归档、清理规则），购物车的数据有一定的实效性，比如半年内没有被购买的数据进行一些清理操作\n\n供应商模块用于保存所销售商品的供应商信息\n包括属性：供应商编号、供应商名称、联系人、电话、营业执照号、地质、法人……\n可选唯一标识：（供应商编号）（营业执照号）\n存储特点：永久存储,供应商的数量不会特别多，所以不需要什么策略\"\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509065747.png\"></img>\n\n","source":"_posts/数据库设计.md","raw":"---\ntitle: 数据库设计\ndate: 2020-05-12 15:12:22\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg\ncategories: 数据库\ntags:\n    - 数据库设计\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n#### 为什么要进行数据库设计\n谈到数据库设计首先要弄明白什么是“数据库设计”，我们可以打一个不太恰当的比喻:把数据库应用程序的设计看作是在建立一座大厦，那么建立大厦之前通常要对大厦的整体结构进行设计，并且汇聚成图纸然后应对图纸再对大厦进行施工，那么数据库设计的过程就相当于是我们建造大厦的过程。首先我们也要对数据库的整体结构进行图形化的设计，然后再根据图形来对数据库结构进行建立。那么简单来说：\n数据库设计就是根据业务系统的具体需求结合我们所选的DBMS(数据库管理系统),为这个业务系统构造出最优的数据库存储模型，并建立好数据库中的表结构及表与表之间的关联关系的过程。使之能**有效**的对应系统中的数据进行存储，并可以**高效的**的对已经存储的数据进行访问。\n\n常用的数据库管理系统有：MySQL、Oracle、SQLServer、Pgsql这些都是目前主流的关系性数据库系统\n已经现在流行的NoSQL系统：Mongo、Memcache、Redis\n\n注意，我们要达到的目的是**对数据有效的存储以及高效的访问**。那么应用系统中所产生的数据有多种的存储方式。首先我们可以把所有的数据都存储在同一张表中，虽然说这样达到了存储的目的但是却不一定能达到高效访问的目的。\n\n#### 好的数据库设计对比糟糕的数据库设计\n一个优良的数据库设计：\n1)可以减少数据冗余\n2)避免数据维护异常\n3)节约存储空间\n4)高效的访问\n反之一个糟糕的数据库设计：\n1)会存在大量数据冗余\n2)存在数据插入，更新，删除的异常\n3）浪费大量存储空间\n4）访问数据低效\n\n数据库系统是应用系统存储数据的关键组成部分，是系统稳定运行的基础，决定着系统是否可以高效稳定的运行，还以刚才大厦的例子来说，我们的数据库就相当于是这个大厦的地基，如果大厦的地基可以稳固，那么大厦就可以建的很高，如果地基没有建好那么大厦就很容易倒塌，同样如果数据库没有设计好的话那么系统就不会太稳定。这种情况可能在最终我们系统访问量很小数据也不多的情况下不明显，但是随着我们数据库的数据越来越多访问量的越来越大，那么这种数据库设计的缺陷就会显现出来。\n例如一家初创企业，在初创期开发人员并不多并且也没有在专业的DBA，这样他们所设计的数据库仅仅是以存储数据为目的，达到数据存储后就没有进一步进行调优，这就会使得这家企业业务发展起来的时候，数量非常大的时候就会在一些比较重要的促销时经常会出现系统死机的情况，这不但影响的公司业务的正常运行，并且对今后的开发也在造成的非常大的影响。所以说我们很有必要在系统设计的开始就对数据库进行一个良好的设计，这样不但对系统稳定带来好处，并且对今后的维护开发已经业务运行都有非常大的好处。\n\n#### 数据库设计步骤\n如果你在工作中要对一些慢查询进行调优工作，但是慢查询是由于数据库结构设计的不合理产生的。那么我们进行慢查询调整的时候就必然要对数据库的结构进行调整，而当我们的数据库已经在生产环境运行了一段时间的话，我们要再想对数据库结构进行调整就必然会影响业务的正常运行，这是谁都不希望看到的，所以我们很有必要在数据库设计的最终就把数据库设计成一个简洁高效的数据库结构。\n\n数据库设计的步骤：\n**需求分析->逻辑设计->物理设计->维护优化**\n\n和应用程序设计一样，数据库设计最初也要进行需求分析，只不过数据库的需求分析和应用程序的需求分析侧重点不太一样。数据库设计的需求分析的侧重点主要是：\n应用主要在数据库中存储的数据是什么？而这些数据又有哪些属性？这些数据和属性各自的特点又有那些？\n\n我们只要了解这些东西，那么就对我们后边的数据库设计有非常大的帮助\n\n需求分析之后是逻辑设计，在逻辑中我们主要是通过ER图这种工具对数据库进行逻辑建模。这个逻辑建模之所以叫逻辑建模就是因为他跟我们所选的具体的具体数据库管理系统是没有关系的，我们进行逻辑建模之后是可以在大多数数据库管理系统中在进行表结构的设计的。\n\n逻辑设计后就是物理设计了，在物理设计中我们就要区考虑我们使用的数据库管理系统是什么。因为就目前来说我们常用的数据库管理系统如,MySQL、Oracle、SQLServer、Pgsql这几种数据库系统他们\n每一种都有自身的特点，而我们为了把数据库管理系统的效率发挥到最高，那么我们在进行物理设计的时候就要充分的考虑到每一种数据库管理系统具体的特点是什么，这个时候在把逻辑设计中所建立的逻辑模型转换为我们需要的物理模型，这样我们就可以达到数据库效率的最优化。\n\n物理设计之后就是维护和优化，在维护和优化过程中我们要对新的需求进行表结构的建立或者索引的优化在或者是数据量大到一定程度的时候我们可能要考虑表的拆分。但是在维护和优化中有一个非常重要的地方需要在注意，就是说在最初我们应用上线的在最开始我们的数据库设计是非常完美的，非常简洁也非常高效，但是当需求不断的累加，在时候在后面的开发过程中我们就不注意数据库的设计问题，这样随着应用程序上线的时间越来久需求累加越来越多，我们应用数据库结构也会越来越复杂，这些都属于维护优化工作没有做好的原因。所以在维护优化过程中也要注意，当接到新的需求的时候也要通过以上需求分析、逻辑分析、物理设计这几步，完成之后在进行具体的建表工作，在这样可以就可以保证数据库结构永远是最优的。\n\n#### 为什么要进行需求分析\n实际工作中一些开发人员都是拿到一个需求之后并不会进行需求分析而是直接进行表结构设计。往往这样设计出的数据库并不会在最优化的。所以有必要在数据库之前进行需求分析。\n\n在需求分析中我们要先搞清楚：\n\n在这个系统中我们所存储的数据有哪些?\n这些数据又有什么样的特点？\n比如说，有些数据是具有时效性的而有些数据是不具有时效性的。对于一些时效性的数据可以采取过期清理或者归档的方式来进行存储。\n了解数据的生命周期\n还有一些数据增长很快数据量也很大，但是这些数据并不是核心数据，对于这些数据我们也可以进行分库分表的方式进行存储。在实际工作中一些开发人员希望把一些日志类的数据存到数据库中，以DBA的角度来看这种数据是非常不是和存储在数据库中的，首先是因为这种数据增长量非常大，并且并不属于核心数据，所以对于这种数据如果一定要存储到数据库中，可以在进行数据库存储之前可以先定义好这种数据的归档或者清理规则，这样可以随着数据库上线就可以进行数据的归档和清理，如果当这个表増长的非常大的时候在进行归档和清理的时候一定工作量非常大，并且很有可能影响线上的正常使用。\n\n#### 在需求分析中要搞清楚的一些问题\n在需求分析中首先要搞清楚要在数据库中存储的对象都有什么?\n这些对象也可以称之为实体。实体及实体之间的关系？\n实体和数据库表之间的关系是并不是一一对应的而是可以1对1，1对多，多对多，实体之间的关系也是如此\n实体所包含的属性有什么?\n这些属性也有各自的特点，比如说那些属性是可以标识出这些实体的，\n哪些属性或组合可以唯一标识一个实体？\n那个标识出实体的属性可能是一个也可能是多个或者是多种组合来标识这个实体。具体选用哪一种是需要我们在逻辑设计中考虑的问题，但是在需求分析的时候我们就要把这些属性和属性组合搞清楚。\n清楚实体所包含的属性之后还要了解出实体的一些特性，比如在存储上有什么样的特性，增长量会是什么样?就比如对一些日志类的实体\n可能增长比较快，对于这些实体我们就要考虑分库分表的操作或者是按时进行归档，这些内容是我们要在物理设计中考虑的，但是如果在需求分析中没有把这些搞清楚的话，在在物理设计和逻辑设计中就很难对数据库进行分库分表的设计或者归档的设计\n\n#### 实例演示\n以一个小型的电子商务网站为例，在这个电子商务网站的系统中包括了几个核心模块：用户模块，商品模块，订单模块，购物车模块，供应商模块。\n\n用户模块主要用于用户登录和保存用户注册信息\n包括属性：用户名 、密码、电话、邮箱、身份证号、地址、姓名、昵称……\n可选唯一标识属性：用户名、身份证、电话\n存储特点：随着系统上线时间逐渐增加，需要永久存储，这就要求在物理设计中考虑对用户模块是否要分库分表的问题\n\n商品模块用于记录网站中所销售的商品信息\n包括属性：商品编码、商品名称、商品描述、商品品类、供应商名称、重量、有效期、价格……\n可选唯一标识属性：（商品名称、供应商名称）、（商品编码）\n因为一个供应商可能对我们提供多个商品，同时也有可能一个商品由多个供应商提供,所以商品名称和供应商名称的组合才能唯一标识出哪一个供应商提供的哪一个商品\n存储特点：随着网站经营时间的增长,商品也会越来越多，但是对于某一个供应商的商品来说，如果这个供应商已经不再对我们提供供应的话，对于这些商品我们实际上可以进行一些归档的存储。但是，切记这些商品是不能删除的，因为有可能还会和订单模块相关,所以这些商品是需要永久存储，但是可以对一些不再销售的商品进行一些迁移工作（先迁移到其他表中）这样对我们商品表可以保持一个比较小的数量级，能对搜索查询的效率带来好处\n\n订单模块用于存储用户订购商品的信息\n因为订单是属于用户的所以要包括：订单号、用户姓名、用户电话、收货地址、商品编号、商品名称、数量、价格、订单状态、支付状态、订单类型……\n可选唯一标识属性：（订单号）（用户命名、商品、下单日期）\n存储特点：随着经营的增长订单表数据会越来越多，订单表需要永久存储，并且很多用户需要查询历史订单记录，所以订单表的查询频率会非常大，所以要考虑分表或者分库的操作\n\n购物车模块用于存储用户选购的商品信息\n包括属性：用户名、商品编号、商品名称、商品价格、商品描述、商品分类、加入时间、商品数量……\n可选唯一标识：（用户名、商品编号、加入时间）、（购物车编号）\n存储特点：不用永久存储（设置归档、清理规则），购物车的数据有一定的实效性，比如半年内没有被购买的数据进行一些清理操作\n\n供应商模块用于保存所销售商品的供应商信息\n包括属性：供应商编号、供应商名称、联系人、电话、营业执照号、地质、法人……\n可选唯一标识：（供应商编号）（营业执照号）\n存储特点：永久存储,供应商的数量不会特别多，所以不需要什么策略\"\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509065747.png\"></img>\n\n","slug":"数据库设计","published":1,"updated":"2020-05-17T09:21:14.568Z","_id":"ckaaqa3u80000i4jx6td6ao3z","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg\"></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"为什么要进行数据库设计\"><a href=\"#为什么要进行数据库设计\" class=\"headerlink\" title=\"为什么要进行数据库设计\"></a>为什么要进行数据库设计</h4><p>谈到数据库设计首先要弄明白什么是“数据库设计”，我们可以打一个不太恰当的比喻:把数据库应用程序的设计看作是在建立一座大厦，那么建立大厦之前通常要对大厦的整体结构进行设计，并且汇聚成图纸然后应对图纸再对大厦进行施工，那么数据库设计的过程就相当于是我们建造大厦的过程。首先我们也要对数据库的整体结构进行图形化的设计，然后再根据图形来对数据库结构进行建立。那么简单来说：<br>数据库设计就是根据业务系统的具体需求结合我们所选的DBMS(数据库管理系统),为这个业务系统构造出最优的数据库存储模型，并建立好数据库中的表结构及表与表之间的关联关系的过程。使之能<strong>有效</strong>的对应系统中的数据进行存储，并可以<strong>高效的</strong>的对已经存储的数据进行访问。</p>\n<p>常用的数据库管理系统有：MySQL、Oracle、SQLServer、Pgsql这些都是目前主流的关系性数据库系统<br>已经现在流行的NoSQL系统：Mongo、Memcache、Redis</p>\n<p>注意，我们要达到的目的是<strong>对数据有效的存储以及高效的访问</strong>。那么应用系统中所产生的数据有多种的存储方式。首先我们可以把所有的数据都存储在同一张表中，虽然说这样达到了存储的目的但是却不一定能达到高效访问的目的。</p>\n<h4 id=\"好的数据库设计对比糟糕的数据库设计\"><a href=\"#好的数据库设计对比糟糕的数据库设计\" class=\"headerlink\" title=\"好的数据库设计对比糟糕的数据库设计\"></a>好的数据库设计对比糟糕的数据库设计</h4><p>一个优良的数据库设计：<br>1)可以减少数据冗余<br>2)避免数据维护异常<br>3)节约存储空间<br>4)高效的访问<br>反之一个糟糕的数据库设计：<br>1)会存在大量数据冗余<br>2)存在数据插入，更新，删除的异常<br>3）浪费大量存储空间<br>4）访问数据低效</p>\n<p>数据库系统是应用系统存储数据的关键组成部分，是系统稳定运行的基础，决定着系统是否可以高效稳定的运行，还以刚才大厦的例子来说，我们的数据库就相当于是这个大厦的地基，如果大厦的地基可以稳固，那么大厦就可以建的很高，如果地基没有建好那么大厦就很容易倒塌，同样如果数据库没有设计好的话那么系统就不会太稳定。这种情况可能在最终我们系统访问量很小数据也不多的情况下不明显，但是随着我们数据库的数据越来越多访问量的越来越大，那么这种数据库设计的缺陷就会显现出来。<br>例如一家初创企业，在初创期开发人员并不多并且也没有在专业的DBA，这样他们所设计的数据库仅仅是以存储数据为目的，达到数据存储后就没有进一步进行调优，这就会使得这家企业业务发展起来的时候，数量非常大的时候就会在一些比较重要的促销时经常会出现系统死机的情况，这不但影响的公司业务的正常运行，并且对今后的开发也在造成的非常大的影响。所以说我们很有必要在系统设计的开始就对数据库进行一个良好的设计，这样不但对系统稳定带来好处，并且对今后的维护开发已经业务运行都有非常大的好处。</p>\n<h4 id=\"数据库设计步骤\"><a href=\"#数据库设计步骤\" class=\"headerlink\" title=\"数据库设计步骤\"></a>数据库设计步骤</h4><p>如果你在工作中要对一些慢查询进行调优工作，但是慢查询是由于数据库结构设计的不合理产生的。那么我们进行慢查询调整的时候就必然要对数据库的结构进行调整，而当我们的数据库已经在生产环境运行了一段时间的话，我们要再想对数据库结构进行调整就必然会影响业务的正常运行，这是谁都不希望看到的，所以我们很有必要在数据库设计的最终就把数据库设计成一个简洁高效的数据库结构。</p>\n<p>数据库设计的步骤：<br><strong>需求分析-&gt;逻辑设计-&gt;物理设计-&gt;维护优化</strong></p>\n<p>和应用程序设计一样，数据库设计最初也要进行需求分析，只不过数据库的需求分析和应用程序的需求分析侧重点不太一样。数据库设计的需求分析的侧重点主要是：<br>应用主要在数据库中存储的数据是什么？而这些数据又有哪些属性？这些数据和属性各自的特点又有那些？</p>\n<p>我们只要了解这些东西，那么就对我们后边的数据库设计有非常大的帮助</p>\n<p>需求分析之后是逻辑设计，在逻辑中我们主要是通过ER图这种工具对数据库进行逻辑建模。这个逻辑建模之所以叫逻辑建模就是因为他跟我们所选的具体的具体数据库管理系统是没有关系的，我们进行逻辑建模之后是可以在大多数数据库管理系统中在进行表结构的设计的。</p>\n<p>逻辑设计后就是物理设计了，在物理设计中我们就要区考虑我们使用的数据库管理系统是什么。因为就目前来说我们常用的数据库管理系统如,MySQL、Oracle、SQLServer、Pgsql这几种数据库系统他们<br>每一种都有自身的特点，而我们为了把数据库管理系统的效率发挥到最高，那么我们在进行物理设计的时候就要充分的考虑到每一种数据库管理系统具体的特点是什么，这个时候在把逻辑设计中所建立的逻辑模型转换为我们需要的物理模型，这样我们就可以达到数据库效率的最优化。</p>\n<p>物理设计之后就是维护和优化，在维护和优化过程中我们要对新的需求进行表结构的建立或者索引的优化在或者是数据量大到一定程度的时候我们可能要考虑表的拆分。但是在维护和优化中有一个非常重要的地方需要在注意，就是说在最初我们应用上线的在最开始我们的数据库设计是非常完美的，非常简洁也非常高效，但是当需求不断的累加，在时候在后面的开发过程中我们就不注意数据库的设计问题，这样随着应用程序上线的时间越来久需求累加越来越多，我们应用数据库结构也会越来越复杂，这些都属于维护优化工作没有做好的原因。所以在维护优化过程中也要注意，当接到新的需求的时候也要通过以上需求分析、逻辑分析、物理设计这几步，完成之后在进行具体的建表工作，在这样可以就可以保证数据库结构永远是最优的。</p>\n<h4 id=\"为什么要进行需求分析\"><a href=\"#为什么要进行需求分析\" class=\"headerlink\" title=\"为什么要进行需求分析\"></a>为什么要进行需求分析</h4><p>实际工作中一些开发人员都是拿到一个需求之后并不会进行需求分析而是直接进行表结构设计。往往这样设计出的数据库并不会在最优化的。所以有必要在数据库之前进行需求分析。</p>\n<p>在需求分析中我们要先搞清楚：</p>\n<p>在这个系统中我们所存储的数据有哪些?<br>这些数据又有什么样的特点？<br>比如说，有些数据是具有时效性的而有些数据是不具有时效性的。对于一些时效性的数据可以采取过期清理或者归档的方式来进行存储。<br>了解数据的生命周期<br>还有一些数据增长很快数据量也很大，但是这些数据并不是核心数据，对于这些数据我们也可以进行分库分表的方式进行存储。在实际工作中一些开发人员希望把一些日志类的数据存到数据库中，以DBA的角度来看这种数据是非常不是和存储在数据库中的，首先是因为这种数据增长量非常大，并且并不属于核心数据，所以对于这种数据如果一定要存储到数据库中，可以在进行数据库存储之前可以先定义好这种数据的归档或者清理规则，这样可以随着数据库上线就可以进行数据的归档和清理，如果当这个表増长的非常大的时候在进行归档和清理的时候一定工作量非常大，并且很有可能影响线上的正常使用。</p>\n<h4 id=\"在需求分析中要搞清楚的一些问题\"><a href=\"#在需求分析中要搞清楚的一些问题\" class=\"headerlink\" title=\"在需求分析中要搞清楚的一些问题\"></a>在需求分析中要搞清楚的一些问题</h4><p>在需求分析中首先要搞清楚要在数据库中存储的对象都有什么?<br>这些对象也可以称之为实体。实体及实体之间的关系？<br>实体和数据库表之间的关系是并不是一一对应的而是可以1对1，1对多，多对多，实体之间的关系也是如此<br>实体所包含的属性有什么?<br>这些属性也有各自的特点，比如说那些属性是可以标识出这些实体的，<br>哪些属性或组合可以唯一标识一个实体？<br>那个标识出实体的属性可能是一个也可能是多个或者是多种组合来标识这个实体。具体选用哪一种是需要我们在逻辑设计中考虑的问题，但是在需求分析的时候我们就要把这些属性和属性组合搞清楚。<br>清楚实体所包含的属性之后还要了解出实体的一些特性，比如在存储上有什么样的特性，增长量会是什么样?就比如对一些日志类的实体<br>可能增长比较快，对于这些实体我们就要考虑分库分表的操作或者是按时进行归档，这些内容是我们要在物理设计中考虑的，但是如果在需求分析中没有把这些搞清楚的话，在在物理设计和逻辑设计中就很难对数据库进行分库分表的设计或者归档的设计</p>\n<h4 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h4><p>以一个小型的电子商务网站为例，在这个电子商务网站的系统中包括了几个核心模块：用户模块，商品模块，订单模块，购物车模块，供应商模块。</p>\n<p>用户模块主要用于用户登录和保存用户注册信息<br>包括属性：用户名 、密码、电话、邮箱、身份证号、地址、姓名、昵称……<br>可选唯一标识属性：用户名、身份证、电话<br>存储特点：随着系统上线时间逐渐增加，需要永久存储，这就要求在物理设计中考虑对用户模块是否要分库分表的问题</p>\n<p>商品模块用于记录网站中所销售的商品信息<br>包括属性：商品编码、商品名称、商品描述、商品品类、供应商名称、重量、有效期、价格……<br>可选唯一标识属性：（商品名称、供应商名称）、（商品编码）<br>因为一个供应商可能对我们提供多个商品，同时也有可能一个商品由多个供应商提供,所以商品名称和供应商名称的组合才能唯一标识出哪一个供应商提供的哪一个商品<br>存储特点：随着网站经营时间的增长,商品也会越来越多，但是对于某一个供应商的商品来说，如果这个供应商已经不再对我们提供供应的话，对于这些商品我们实际上可以进行一些归档的存储。但是，切记这些商品是不能删除的，因为有可能还会和订单模块相关,所以这些商品是需要永久存储，但是可以对一些不再销售的商品进行一些迁移工作（先迁移到其他表中）这样对我们商品表可以保持一个比较小的数量级，能对搜索查询的效率带来好处</p>\n<p>订单模块用于存储用户订购商品的信息<br>因为订单是属于用户的所以要包括：订单号、用户姓名、用户电话、收货地址、商品编号、商品名称、数量、价格、订单状态、支付状态、订单类型……<br>可选唯一标识属性：（订单号）（用户命名、商品、下单日期）<br>存储特点：随着经营的增长订单表数据会越来越多，订单表需要永久存储，并且很多用户需要查询历史订单记录，所以订单表的查询频率会非常大，所以要考虑分表或者分库的操作</p>\n<p>购物车模块用于存储用户选购的商品信息<br>包括属性：用户名、商品编号、商品名称、商品价格、商品描述、商品分类、加入时间、商品数量……<br>可选唯一标识：（用户名、商品编号、加入时间）、（购物车编号）<br>存储特点：不用永久存储（设置归档、清理规则），购物车的数据有一定的实效性，比如半年内没有被购买的数据进行一些清理操作</p>\n<p>供应商模块用于保存所销售商品的供应商信息<br>包括属性：供应商编号、供应商名称、联系人、电话、营业执照号、地质、法人……<br>可选唯一标识：（供应商编号）（营业执照号）<br>存储特点：永久存储,供应商的数量不会特别多，所以不需要什么策略”</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509065747.png\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/d22bbcc815668a3244e4237c1731b98d8ee370a3.jpg\"></img></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"为什么要进行数据库设计\"><a href=\"#为什么要进行数据库设计\" class=\"headerlink\" title=\"为什么要进行数据库设计\"></a>为什么要进行数据库设计</h4><p>谈到数据库设计首先要弄明白什么是“数据库设计”，我们可以打一个不太恰当的比喻:把数据库应用程序的设计看作是在建立一座大厦，那么建立大厦之前通常要对大厦的整体结构进行设计，并且汇聚成图纸然后应对图纸再对大厦进行施工，那么数据库设计的过程就相当于是我们建造大厦的过程。首先我们也要对数据库的整体结构进行图形化的设计，然后再根据图形来对数据库结构进行建立。那么简单来说：<br>数据库设计就是根据业务系统的具体需求结合我们所选的DBMS(数据库管理系统),为这个业务系统构造出最优的数据库存储模型，并建立好数据库中的表结构及表与表之间的关联关系的过程。使之能<strong>有效</strong>的对应系统中的数据进行存储，并可以<strong>高效的</strong>的对已经存储的数据进行访问。</p>\n<p>常用的数据库管理系统有：MySQL、Oracle、SQLServer、Pgsql这些都是目前主流的关系性数据库系统<br>已经现在流行的NoSQL系统：Mongo、Memcache、Redis</p>\n<p>注意，我们要达到的目的是<strong>对数据有效的存储以及高效的访问</strong>。那么应用系统中所产生的数据有多种的存储方式。首先我们可以把所有的数据都存储在同一张表中，虽然说这样达到了存储的目的但是却不一定能达到高效访问的目的。</p>\n<h4 id=\"好的数据库设计对比糟糕的数据库设计\"><a href=\"#好的数据库设计对比糟糕的数据库设计\" class=\"headerlink\" title=\"好的数据库设计对比糟糕的数据库设计\"></a>好的数据库设计对比糟糕的数据库设计</h4><p>一个优良的数据库设计：<br>1)可以减少数据冗余<br>2)避免数据维护异常<br>3)节约存储空间<br>4)高效的访问<br>反之一个糟糕的数据库设计：<br>1)会存在大量数据冗余<br>2)存在数据插入，更新，删除的异常<br>3）浪费大量存储空间<br>4）访问数据低效</p>\n<p>数据库系统是应用系统存储数据的关键组成部分，是系统稳定运行的基础，决定着系统是否可以高效稳定的运行，还以刚才大厦的例子来说，我们的数据库就相当于是这个大厦的地基，如果大厦的地基可以稳固，那么大厦就可以建的很高，如果地基没有建好那么大厦就很容易倒塌，同样如果数据库没有设计好的话那么系统就不会太稳定。这种情况可能在最终我们系统访问量很小数据也不多的情况下不明显，但是随着我们数据库的数据越来越多访问量的越来越大，那么这种数据库设计的缺陷就会显现出来。<br>例如一家初创企业，在初创期开发人员并不多并且也没有在专业的DBA，这样他们所设计的数据库仅仅是以存储数据为目的，达到数据存储后就没有进一步进行调优，这就会使得这家企业业务发展起来的时候，数量非常大的时候就会在一些比较重要的促销时经常会出现系统死机的情况，这不但影响的公司业务的正常运行，并且对今后的开发也在造成的非常大的影响。所以说我们很有必要在系统设计的开始就对数据库进行一个良好的设计，这样不但对系统稳定带来好处，并且对今后的维护开发已经业务运行都有非常大的好处。</p>\n<h4 id=\"数据库设计步骤\"><a href=\"#数据库设计步骤\" class=\"headerlink\" title=\"数据库设计步骤\"></a>数据库设计步骤</h4><p>如果你在工作中要对一些慢查询进行调优工作，但是慢查询是由于数据库结构设计的不合理产生的。那么我们进行慢查询调整的时候就必然要对数据库的结构进行调整，而当我们的数据库已经在生产环境运行了一段时间的话，我们要再想对数据库结构进行调整就必然会影响业务的正常运行，这是谁都不希望看到的，所以我们很有必要在数据库设计的最终就把数据库设计成一个简洁高效的数据库结构。</p>\n<p>数据库设计的步骤：<br><strong>需求分析-&gt;逻辑设计-&gt;物理设计-&gt;维护优化</strong></p>\n<p>和应用程序设计一样，数据库设计最初也要进行需求分析，只不过数据库的需求分析和应用程序的需求分析侧重点不太一样。数据库设计的需求分析的侧重点主要是：<br>应用主要在数据库中存储的数据是什么？而这些数据又有哪些属性？这些数据和属性各自的特点又有那些？</p>\n<p>我们只要了解这些东西，那么就对我们后边的数据库设计有非常大的帮助</p>\n<p>需求分析之后是逻辑设计，在逻辑中我们主要是通过ER图这种工具对数据库进行逻辑建模。这个逻辑建模之所以叫逻辑建模就是因为他跟我们所选的具体的具体数据库管理系统是没有关系的，我们进行逻辑建模之后是可以在大多数数据库管理系统中在进行表结构的设计的。</p>\n<p>逻辑设计后就是物理设计了，在物理设计中我们就要区考虑我们使用的数据库管理系统是什么。因为就目前来说我们常用的数据库管理系统如,MySQL、Oracle、SQLServer、Pgsql这几种数据库系统他们<br>每一种都有自身的特点，而我们为了把数据库管理系统的效率发挥到最高，那么我们在进行物理设计的时候就要充分的考虑到每一种数据库管理系统具体的特点是什么，这个时候在把逻辑设计中所建立的逻辑模型转换为我们需要的物理模型，这样我们就可以达到数据库效率的最优化。</p>\n<p>物理设计之后就是维护和优化，在维护和优化过程中我们要对新的需求进行表结构的建立或者索引的优化在或者是数据量大到一定程度的时候我们可能要考虑表的拆分。但是在维护和优化中有一个非常重要的地方需要在注意，就是说在最初我们应用上线的在最开始我们的数据库设计是非常完美的，非常简洁也非常高效，但是当需求不断的累加，在时候在后面的开发过程中我们就不注意数据库的设计问题，这样随着应用程序上线的时间越来久需求累加越来越多，我们应用数据库结构也会越来越复杂，这些都属于维护优化工作没有做好的原因。所以在维护优化过程中也要注意，当接到新的需求的时候也要通过以上需求分析、逻辑分析、物理设计这几步，完成之后在进行具体的建表工作，在这样可以就可以保证数据库结构永远是最优的。</p>\n<h4 id=\"为什么要进行需求分析\"><a href=\"#为什么要进行需求分析\" class=\"headerlink\" title=\"为什么要进行需求分析\"></a>为什么要进行需求分析</h4><p>实际工作中一些开发人员都是拿到一个需求之后并不会进行需求分析而是直接进行表结构设计。往往这样设计出的数据库并不会在最优化的。所以有必要在数据库之前进行需求分析。</p>\n<p>在需求分析中我们要先搞清楚：</p>\n<p>在这个系统中我们所存储的数据有哪些?<br>这些数据又有什么样的特点？<br>比如说，有些数据是具有时效性的而有些数据是不具有时效性的。对于一些时效性的数据可以采取过期清理或者归档的方式来进行存储。<br>了解数据的生命周期<br>还有一些数据增长很快数据量也很大，但是这些数据并不是核心数据，对于这些数据我们也可以进行分库分表的方式进行存储。在实际工作中一些开发人员希望把一些日志类的数据存到数据库中，以DBA的角度来看这种数据是非常不是和存储在数据库中的，首先是因为这种数据增长量非常大，并且并不属于核心数据，所以对于这种数据如果一定要存储到数据库中，可以在进行数据库存储之前可以先定义好这种数据的归档或者清理规则，这样可以随着数据库上线就可以进行数据的归档和清理，如果当这个表増长的非常大的时候在进行归档和清理的时候一定工作量非常大，并且很有可能影响线上的正常使用。</p>\n<h4 id=\"在需求分析中要搞清楚的一些问题\"><a href=\"#在需求分析中要搞清楚的一些问题\" class=\"headerlink\" title=\"在需求分析中要搞清楚的一些问题\"></a>在需求分析中要搞清楚的一些问题</h4><p>在需求分析中首先要搞清楚要在数据库中存储的对象都有什么?<br>这些对象也可以称之为实体。实体及实体之间的关系？<br>实体和数据库表之间的关系是并不是一一对应的而是可以1对1，1对多，多对多，实体之间的关系也是如此<br>实体所包含的属性有什么?<br>这些属性也有各自的特点，比如说那些属性是可以标识出这些实体的，<br>哪些属性或组合可以唯一标识一个实体？<br>那个标识出实体的属性可能是一个也可能是多个或者是多种组合来标识这个实体。具体选用哪一种是需要我们在逻辑设计中考虑的问题，但是在需求分析的时候我们就要把这些属性和属性组合搞清楚。<br>清楚实体所包含的属性之后还要了解出实体的一些特性，比如在存储上有什么样的特性，增长量会是什么样?就比如对一些日志类的实体<br>可能增长比较快，对于这些实体我们就要考虑分库分表的操作或者是按时进行归档，这些内容是我们要在物理设计中考虑的，但是如果在需求分析中没有把这些搞清楚的话，在在物理设计和逻辑设计中就很难对数据库进行分库分表的设计或者归档的设计</p>\n<h4 id=\"实例演示\"><a href=\"#实例演示\" class=\"headerlink\" title=\"实例演示\"></a>实例演示</h4><p>以一个小型的电子商务网站为例，在这个电子商务网站的系统中包括了几个核心模块：用户模块，商品模块，订单模块，购物车模块，供应商模块。</p>\n<p>用户模块主要用于用户登录和保存用户注册信息<br>包括属性：用户名 、密码、电话、邮箱、身份证号、地址、姓名、昵称……<br>可选唯一标识属性：用户名、身份证、电话<br>存储特点：随着系统上线时间逐渐增加，需要永久存储，这就要求在物理设计中考虑对用户模块是否要分库分表的问题</p>\n<p>商品模块用于记录网站中所销售的商品信息<br>包括属性：商品编码、商品名称、商品描述、商品品类、供应商名称、重量、有效期、价格……<br>可选唯一标识属性：（商品名称、供应商名称）、（商品编码）<br>因为一个供应商可能对我们提供多个商品，同时也有可能一个商品由多个供应商提供,所以商品名称和供应商名称的组合才能唯一标识出哪一个供应商提供的哪一个商品<br>存储特点：随着网站经营时间的增长,商品也会越来越多，但是对于某一个供应商的商品来说，如果这个供应商已经不再对我们提供供应的话，对于这些商品我们实际上可以进行一些归档的存储。但是，切记这些商品是不能删除的，因为有可能还会和订单模块相关,所以这些商品是需要永久存储，但是可以对一些不再销售的商品进行一些迁移工作（先迁移到其他表中）这样对我们商品表可以保持一个比较小的数量级，能对搜索查询的效率带来好处</p>\n<p>订单模块用于存储用户订购商品的信息<br>因为订单是属于用户的所以要包括：订单号、用户姓名、用户电话、收货地址、商品编号、商品名称、数量、价格、订单状态、支付状态、订单类型……<br>可选唯一标识属性：（订单号）（用户命名、商品、下单日期）<br>存储特点：随着经营的增长订单表数据会越来越多，订单表需要永久存储，并且很多用户需要查询历史订单记录，所以订单表的查询频率会非常大，所以要考虑分表或者分库的操作</p>\n<p>购物车模块用于存储用户选购的商品信息<br>包括属性：用户名、商品编号、商品名称、商品价格、商品描述、商品分类、加入时间、商品数量……<br>可选唯一标识：（用户名、商品编号、加入时间）、（购物车编号）<br>存储特点：不用永久存储（设置归档、清理规则），购物车的数据有一定的实效性，比如半年内没有被购买的数据进行一些清理操作</p>\n<p>供应商模块用于保存所销售商品的供应商信息<br>包括属性：供应商编号、供应商名称、联系人、电话、营业执照号、地质、法人……<br>可选唯一标识：（供应商编号）（营业执照号）<br>存储特点：永久存储,供应商的数量不会特别多，所以不需要什么策略”</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509065747.png\"></img></p>\n"},{"title":"免费科学上网","date":"2020-03-01T23:14:26.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png\"/>\n\n\n\n\n----(编辑于2020/4/7)开始----\n\n**这三款目前我是用的是第三款, 剩下两款是备用的. 不上外网的时候记得关掉插件, 不然访问内网也会变慢**\n\n\n这三款插件我不敢保证能长期使用并且一直稳定, 不过你能上第一次外网, 那么就可以一直上外网(你可以去油管之类的网站找更好更稳定的科学上网方法, 这些正在内网大多都是被屏蔽的)\n\n我是觉得作为一个程序员还上不了外网多少有点说不过去, 好的信息资源都是在国外的, 那里是信息的源头, 在国内看到的大多资料都是也都是那些人从信息源头收集在消化后的\"残渣\", 所以到信息的源头去, 看第一手资料\n\n----(编辑于2020/4/7)结束----\n\n**1clickVPN**\n\n在chrome网上应用店直接搜索`1clickVPN` 点击添加至chrome就可安装完成\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308120421.png\"/>\n\n\n\n上不了谷歌商店也没关系,下面网盘下载链接:\n\n链接：https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg \n提取码：dj2w\n\n下载后解压后:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121345.png\"/>\n一个crx包,一个已解压的扩展程序\n\n打开你的谷歌浏览器\n点击设置--->更多工具--->扩展程序\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121908.png\"/>\n\n<font color=\"red\">注意:一定要勾选开发者模式</font>\n\n然后点击加载已解压的扩展程序\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122045.png\"/>\n选中这一级目录点击选择文件夹\n\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122150.png\"/>\n\nOK 安装完成\n\n如果是360浏览器或QQ浏览器安装就更方便了,直接把crx包拖拽的浏览器就行了\n\n点击右上角小图标,选择你想要的节点\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122225.png\"/>\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122304.png\"/>\n我这里选择了US节点\n\n\n打开youtube访问一下 \n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122926.png\"/>\n\n访问成功\n\n<font color=\"red\">\n提示:因为是免费的插件,网速方面不是特别的快,但是上谷歌商店下载一些插件,在外网浏览浏览文章还是没问题的.至于看视频嘛.那就要看脸了...\n</font>\n\n\n\n#### 更新于 2020/4/7 \n\n之前推荐了一款科学上网的谷歌插件,但是速度较慢,无法流畅的观看外网视频\n\n这次再推荐两款,我个人觉得准备三个插件够用了\n\n**AdGuard VPN**  \n需要邮箱注册,但是无需验证\n\n链接：https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg \n提取码：thqw\n\n\n安装方式同上\n\n**Astar VPN**\n\n不需要注册,直接使用,有多个节点可供选择\n\n链接：https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ \n提取码：w73m \n\n安装方式同上\n\n\n我个人使用第三个插件比较多,一般在油管看看视频没问题\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200407150551.png\"/>","source":"_posts/免费科学上网.md","raw":"---\ntitle: 免费科学上网\ndate: 2020-03-02 07:14:26\ncategories: 分享\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png\"/>\n\n\n\n\n----(编辑于2020/4/7)开始----\n\n**这三款目前我是用的是第三款, 剩下两款是备用的. 不上外网的时候记得关掉插件, 不然访问内网也会变慢**\n\n\n这三款插件我不敢保证能长期使用并且一直稳定, 不过你能上第一次外网, 那么就可以一直上外网(你可以去油管之类的网站找更好更稳定的科学上网方法, 这些正在内网大多都是被屏蔽的)\n\n我是觉得作为一个程序员还上不了外网多少有点说不过去, 好的信息资源都是在国外的, 那里是信息的源头, 在国内看到的大多资料都是也都是那些人从信息源头收集在消化后的\"残渣\", 所以到信息的源头去, 看第一手资料\n\n----(编辑于2020/4/7)结束----\n\n**1clickVPN**\n\n在chrome网上应用店直接搜索`1clickVPN` 点击添加至chrome就可安装完成\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308120421.png\"/>\n\n\n\n上不了谷歌商店也没关系,下面网盘下载链接:\n\n链接：https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg \n提取码：dj2w\n\n下载后解压后:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121345.png\"/>\n一个crx包,一个已解压的扩展程序\n\n打开你的谷歌浏览器\n点击设置--->更多工具--->扩展程序\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121908.png\"/>\n\n<font color=\"red\">注意:一定要勾选开发者模式</font>\n\n然后点击加载已解压的扩展程序\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122045.png\"/>\n选中这一级目录点击选择文件夹\n\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122150.png\"/>\n\nOK 安装完成\n\n如果是360浏览器或QQ浏览器安装就更方便了,直接把crx包拖拽的浏览器就行了\n\n点击右上角小图标,选择你想要的节点\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122225.png\"/>\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122304.png\"/>\n我这里选择了US节点\n\n\n打开youtube访问一下 \n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122926.png\"/>\n\n访问成功\n\n<font color=\"red\">\n提示:因为是免费的插件,网速方面不是特别的快,但是上谷歌商店下载一些插件,在外网浏览浏览文章还是没问题的.至于看视频嘛.那就要看脸了...\n</font>\n\n\n\n#### 更新于 2020/4/7 \n\n之前推荐了一款科学上网的谷歌插件,但是速度较慢,无法流畅的观看外网视频\n\n这次再推荐两款,我个人觉得准备三个插件够用了\n\n**AdGuard VPN**  \n需要邮箱注册,但是无需验证\n\n链接：https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg \n提取码：thqw\n\n\n安装方式同上\n\n**Astar VPN**\n\n不需要注册,直接使用,有多个节点可供选择\n\n链接：https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ \n提取码：w73m \n\n安装方式同上\n\n\n我个人使用第三个插件比较多,一般在油管看看视频没问题\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200407150551.png\"/>","slug":"免费科学上网","published":1,"updated":"2020-05-17T08:00:39.861Z","_id":"ckaaqa3ue0002i4jxbsksfewn","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png\">\n\n\n\n\n<p>—-(编辑于2020/4/7)开始—-</p>\n<p><strong>这三款目前我是用的是第三款, 剩下两款是备用的. 不上外网的时候记得关掉插件, 不然访问内网也会变慢</strong></p>\n<p>这三款插件我不敢保证能长期使用并且一直稳定, 不过你能上第一次外网, 那么就可以一直上外网(你可以去油管之类的网站找更好更稳定的科学上网方法, 这些正在内网大多都是被屏蔽的)</p>\n<p>我是觉得作为一个程序员还上不了外网多少有点说不过去, 好的信息资源都是在国外的, 那里是信息的源头, 在国内看到的大多资料都是也都是那些人从信息源头收集在消化后的”残渣”, 所以到信息的源头去, 看第一手资料</p>\n<p>—-(编辑于2020/4/7)结束—-</p>\n<p><strong>1clickVPN</strong></p>\n<p>在chrome网上应用店直接搜索<code>1clickVPN</code> 点击添加至chrome就可安装完成</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308120421.png\">\n\n\n\n<p>上不了谷歌商店也没关系,下面网盘下载链接:</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg</a><br>提取码：dj2w</p>\n<p>下载后解压后:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121345.png\"><br>一个crx包,一个已解压的扩展程序</p>\n<p>打开你的谷歌浏览器<br>点击设置—&gt;更多工具—&gt;扩展程序<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121908.png\"></p>\n<p><font color=\"red\">注意:一定要勾选开发者模式</font></p>\n<p>然后点击加载已解压的扩展程序<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122045.png\"><br>选中这一级目录点击选择文件夹</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122150.png\">\n\n<p>OK 安装完成</p>\n<p>如果是360浏览器或QQ浏览器安装就更方便了,直接把crx包拖拽的浏览器就行了</p>\n<p>点击右上角小图标,选择你想要的节点<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122225.png\"></p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122304.png\">\n我这里选择了US节点\n\n\n<p>打开youtube访问一下<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122926.png\"></p>\n<p>访问成功</p>\n<font color=\"red\">\n提示:因为是免费的插件,网速方面不是特别的快,但是上谷歌商店下载一些插件,在外网浏览浏览文章还是没问题的.至于看视频嘛.那就要看脸了...\n</font>\n\n\n\n<h4 id=\"更新于-2020-4-7\"><a href=\"#更新于-2020-4-7\" class=\"headerlink\" title=\"更新于 2020/4/7\"></a>更新于 2020/4/7</h4><p>之前推荐了一款科学上网的谷歌插件,但是速度较慢,无法流畅的观看外网视频</p>\n<p>这次再推荐两款,我个人觉得准备三个插件够用了</p>\n<p><strong>AdGuard VPN</strong><br>需要邮箱注册,但是无需验证</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg</a><br>提取码：thqw</p>\n<p>安装方式同上</p>\n<p><strong>Astar VPN</strong></p>\n<p>不需要注册,直接使用,有多个节点可供选择</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ</a><br>提取码：w73m </p>\n<p>安装方式同上</p>\n<p>我个人使用第三个插件比较多,一般在油管看看视频没问题</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200407150551.png\"><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200302071541.png\"/>\n\n\n\n\n<p>—-(编辑于2020/4/7)开始—-</p>\n<p><strong>这三款目前我是用的是第三款, 剩下两款是备用的. 不上外网的时候记得关掉插件, 不然访问内网也会变慢</strong></p>\n<p>这三款插件我不敢保证能长期使用并且一直稳定, 不过你能上第一次外网, 那么就可以一直上外网(你可以去油管之类的网站找更好更稳定的科学上网方法, 这些正在内网大多都是被屏蔽的)</p>\n<p>我是觉得作为一个程序员还上不了外网多少有点说不过去, 好的信息资源都是在国外的, 那里是信息的源头, 在国内看到的大多资料都是也都是那些人从信息源头收集在消化后的”残渣”, 所以到信息的源头去, 看第一手资料</p>\n<p>—-(编辑于2020/4/7)结束—-</p>\n<p><strong>1clickVPN</strong></p>\n<p>在chrome网上应用店直接搜索<code>1clickVPN</code> 点击添加至chrome就可安装完成</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308120421.png\"/>\n\n\n\n<p>上不了谷歌商店也没关系,下面网盘下载链接:</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/18dB5QrdsFNIp38FyWWkUWg</a><br>提取码：dj2w</p>\n<p>下载后解压后:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121345.png\"/><br>一个crx包,一个已解压的扩展程序</p>\n<p>打开你的谷歌浏览器<br>点击设置—&gt;更多工具—&gt;扩展程序<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308121908.png\"/></p>\n<p><font color=\"red\">注意:一定要勾选开发者模式</font></p>\n<p>然后点击加载已解压的扩展程序<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122045.png\"/><br>选中这一级目录点击选择文件夹</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122150.png\"/>\n\n<p>OK 安装完成</p>\n<p>如果是360浏览器或QQ浏览器安装就更方便了,直接把crx包拖拽的浏览器就行了</p>\n<p>点击右上角小图标,选择你想要的节点<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122225.png\"/></p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122304.png\"/>\n我这里选择了US节点\n\n\n<p>打开youtube访问一下<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200308122926.png\"/></p>\n<p>访问成功</p>\n<font color=\"red\">\n提示:因为是免费的插件,网速方面不是特别的快,但是上谷歌商店下载一些插件,在外网浏览浏览文章还是没问题的.至于看视频嘛.那就要看脸了...\n</font>\n\n\n\n<h4 id=\"更新于-2020-4-7\"><a href=\"#更新于-2020-4-7\" class=\"headerlink\" title=\"更新于 2020/4/7\"></a>更新于 2020/4/7</h4><p>之前推荐了一款科学上网的谷歌插件,但是速度较慢,无法流畅的观看外网视频</p>\n<p>这次再推荐两款,我个人觉得准备三个插件够用了</p>\n<p><strong>AdGuard VPN</strong><br>需要邮箱注册,但是无需验证</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/11t8JrFBEX5gq1KvRjvDNxg</a><br>提取码：thqw</p>\n<p>安装方式同上</p>\n<p><strong>Astar VPN</strong></p>\n<p>不需要注册,直接使用,有多个节点可供选择</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1UrtwhJWkBBWaGZsRpt-2FQ</a><br>提取码：w73m </p>\n<p>安装方式同上</p>\n<p>我个人使用第三个插件比较多,一般在油管看看视频没问题</p>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200407150551.png\"/>"},{"title":"关于本博客","date":"2020-04-03T14:24:53.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg\"/>\n\n\n\n本博客是基于<a href=\"https://hexo.io/zh-cn/\">hexo</a>搭建的纯静态博客,采用<a href=\"https://github.com/blinkfox/hexo-theme-matery\">matery</a>主题,也可以选择其他的主题,如其他优秀的主题有<a href=\"https://github.com/theme-next/hexo-theme-next\">next</a>,使用markdown编写文章,再通过hexo博客框架编译成静态文件,我这里租用的是阿里云的服务器和域名,写完文章直接编译成静态文件再通过文件传输工具上传到阿里云服务器使用nginx做请求和响应.域名绑定服务器后需要备案才能正常访问,不同地区备案需要的时间有些许差异,我在北京地区备案花的时间是十四天,当然你如果觉得麻烦也可以选择托管在GitHub上,github提供了一个叫做github pages的功能.\n\n快速搭建一个个人网站的方法有很多,你也可以使用<a href=\"https://zh-cn.wordpress.com/\">wordpress</a>来搭建自己的网站(在阿里云购买应用服务器就可以预装此软件),这种方法搭建的网站不能部署到github上\n\n或者你可以使用<a href=\"https://vuepress.vuejs.org/zh/\">vuepress</a>来做一个自己的个人博客,详细细节点<a href=\"https://chenxinshinian.com/2020/01/27/da-jian-yi-ge-ji-jian-jing-tai-wang-zhan/\">这里</a>,这种方法可以部署到github上\n\n如果自己有时间也可以自己开发一套,样式 类型 风格全凭自己喜好\n\n搭建自己的博客很简单,根据上面的一些关键字你就可以搜到很多教程,本文就不写具体细节了.\n\n\n\n\n","source":"_posts/关于本博客.md","raw":"---\ntitle: 关于本博客\ndate: 2020-04-03 22:24:53\ncategories: 记录\ntags:\n    - blog\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg\"/>\n\n\n\n本博客是基于<a href=\"https://hexo.io/zh-cn/\">hexo</a>搭建的纯静态博客,采用<a href=\"https://github.com/blinkfox/hexo-theme-matery\">matery</a>主题,也可以选择其他的主题,如其他优秀的主题有<a href=\"https://github.com/theme-next/hexo-theme-next\">next</a>,使用markdown编写文章,再通过hexo博客框架编译成静态文件,我这里租用的是阿里云的服务器和域名,写完文章直接编译成静态文件再通过文件传输工具上传到阿里云服务器使用nginx做请求和响应.域名绑定服务器后需要备案才能正常访问,不同地区备案需要的时间有些许差异,我在北京地区备案花的时间是十四天,当然你如果觉得麻烦也可以选择托管在GitHub上,github提供了一个叫做github pages的功能.\n\n快速搭建一个个人网站的方法有很多,你也可以使用<a href=\"https://zh-cn.wordpress.com/\">wordpress</a>来搭建自己的网站(在阿里云购买应用服务器就可以预装此软件),这种方法搭建的网站不能部署到github上\n\n或者你可以使用<a href=\"https://vuepress.vuejs.org/zh/\">vuepress</a>来做一个自己的个人博客,详细细节点<a href=\"https://chenxinshinian.com/2020/01/27/da-jian-yi-ge-ji-jian-jing-tai-wang-zhan/\">这里</a>,这种方法可以部署到github上\n\n如果自己有时间也可以自己开发一套,样式 类型 风格全凭自己喜好\n\n搭建自己的博客很简单,根据上面的一些关键字你就可以搜到很多教程,本文就不写具体细节了.\n\n\n\n\n","slug":"关于本博客","published":1,"updated":"2020-05-17T08:00:34.345Z","_id":"ckaaqa3uh0005i4jxaoxs046c","comments":1,"layout":"post","photos":[],"link":"","content":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg\">\n\n\n\n<p>本博客是基于<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>搭建的纯静态博客,采用<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">matery</a>主题,也可以选择其他的主题,如其他优秀的主题有<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">next</a>,使用markdown编写文章,再通过hexo博客框架编译成静态文件,我这里租用的是阿里云的服务器和域名,写完文章直接编译成静态文件再通过文件传输工具上传到阿里云服务器使用nginx做请求和响应.域名绑定服务器后需要备案才能正常访问,不同地区备案需要的时间有些许差异,我在北京地区备案花的时间是十四天,当然你如果觉得麻烦也可以选择托管在GitHub上,github提供了一个叫做github pages的功能.</p>\n<p>快速搭建一个个人网站的方法有很多,你也可以使用<a href=\"https://zh-cn.wordpress.com/\" target=\"_blank\" rel=\"noopener\">wordpress</a>来搭建自己的网站(在阿里云购买应用服务器就可以预装此软件),这种方法搭建的网站不能部署到github上</p>\n<p>或者你可以使用<a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuepress</a>来做一个自己的个人博客,详细细节点<a href=\"https://chenxinshinian.com/2020/01/27/da-jian-yi-ge-ji-jian-jing-tai-wang-zhan/\">这里</a>,这种方法可以部署到github上</p>\n<p>如果自己有时间也可以自己开发一套,样式 类型 风格全凭自己喜好</p>\n<p>搭建自己的博客很简单,根据上面的一些关键字你就可以搜到很多教程,本文就不写具体细节了.</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/v2-73b8307b2db44c617f4e8515ce67dd39_hd.jpg\"/>\n\n\n\n<p>本博客是基于<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">hexo</a>搭建的纯静态博客,采用<a href=\"https://github.com/blinkfox/hexo-theme-matery\" target=\"_blank\" rel=\"noopener\">matery</a>主题,也可以选择其他的主题,如其他优秀的主题有<a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">next</a>,使用markdown编写文章,再通过hexo博客框架编译成静态文件,我这里租用的是阿里云的服务器和域名,写完文章直接编译成静态文件再通过文件传输工具上传到阿里云服务器使用nginx做请求和响应.域名绑定服务器后需要备案才能正常访问,不同地区备案需要的时间有些许差异,我在北京地区备案花的时间是十四天,当然你如果觉得麻烦也可以选择托管在GitHub上,github提供了一个叫做github pages的功能.</p>\n<p>快速搭建一个个人网站的方法有很多,你也可以使用<a href=\"https://zh-cn.wordpress.com/\" target=\"_blank\" rel=\"noopener\">wordpress</a>来搭建自己的网站(在阿里云购买应用服务器就可以预装此软件),这种方法搭建的网站不能部署到github上</p>\n<p>或者你可以使用<a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuepress</a>来做一个自己的个人博客,详细细节点<a href=\"https://chenxinshinian.com/2020/01/27/da-jian-yi-ge-ji-jian-jing-tai-wang-zhan/\">这里</a>,这种方法可以部署到github上</p>\n<p>如果自己有时间也可以自己开发一套,样式 类型 风格全凭自己喜好</p>\n<p>搭建自己的博客很简单,根据上面的一些关键字你就可以搜到很多教程,本文就不写具体细节了.</p>\n"},{"title":"单例设计模式","date":"2020-04-19T11:21:10.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png\"/>\n\n**单例模式定义**\n保证一个类只有一个实例, 并且提供一个全局访问点\n\n**什么样的场景下需要使用单例?**\n重量级的对象, 不需要多个实例.\n如线程池, 或者数据库的连接池. 我们希望我们直接从连接池里面拿连接就可以了, 而不是每次请求都去创建一个对应的连接池\n\n\n### 单例模式的具体实现\n#### 懒汉模式\n\n**特点:** 延迟加载, 只有在真正使用的时候才开始实例化.\n\n**代码:**\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n        LazySingletion instance = LazySingletion.getInstance();\n        LazySingletion instance1 = LazySingletion.getInstance();\n        System.out.println(instance == instance1); // true\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}\n```\n\n单例模式在单线程的环境下这样是OK的, 下面试一下两个线程:\n\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n\n        new Thread( ()->{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n\n\n        new Thread( ()->{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            try {\n                /**\n                 * 避免一个线程提前完成, 让线程sleep 2000毫秒\n                 */\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}\n```\n**输出:**\n```\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@3354d998\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@7245297c\n```\n\n这个情况说明在多线程的情况下访问这个代码是会出现多线程问题的\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200000.png\"/>\n两个线程同时都走到了这个代码块, 两个线程都会进行对应实例的创建, 这样就产生了两个对应的实例, 违背了单例模式的定义\n\n**解决方法:**\n给访问点加上synchronized\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200355.png\"/>\n\n**输出:**\n```\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\n```\n通过给getInstance加锁的方式确保了单例, 这样会有一定的性能损耗\n\n优化方案\n```java\n/**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            synchronized (LazySingletion.class){\n                if(instance == null){\n                    instance = new LazySingletion();\n                }\n            }\n        }\n        return instance;\n    }\n```\n这样就能给锁进行一个很大的性能提升, 如果第一个线程就完成它的实例化的话, 那其他线程就不会在对他进行加锁了\n\n\n#### 饿汉模式\n类加载的初始化阶段就完成了势力的初始化. 本质上就是借助于JVM类加载及政治, 保证实例的唯一性. \n\n类加载过程:\n1. 加载二进制数到内存中, 生成对应的Class数据结构.\n2. 连接: a.验证 b.准备(给类的静态成员变量赋<font color=\"red\">默认值</font>), c.解析\n3. <font color=\"red\">初始化</font>:给类的静态变量赋<font color=\"red\">初始值</font>\n\n只有在真正使用对应的类时, 才会触发初始化 如(当前类时启动类即main函数所在类, 直接进行new操作, 访问静态属性 访问静态方法 用反射访问类, 初始化一个类的子类等.)\n\n代码:\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 22:44\n */\npublic class HungrySingletonTest {\n    public static void main(String[] args) {\n        HungryStingleton instancel = HungryStingleton.getInstance();\n        HungryStingleton instancel1 = HungryStingleton.getInstance();\n\n        System.out.println(instancel == instancel1); // true\n\n\n\n    }\n}\n\n/**\n * 单例模式-饿汉模式\n */\nclass HungryStingleton{\n    private static HungryStingleton instance = new HungryStingleton();\n    private HungryStingleton(){};\n\n    public static HungryStingleton getInstance(){\n        return instance;\n    }\n\n}\n```\n\n#### 静态内部类\n\n代码:\n```java\nimport com.sun.org.apache.bcel.internal.classfile.InnerClass;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 23:04\n */\npublic class InnerClassSingletonTest {\n    public static void main(String[] args) {\n        InnerClassSingleton instance = InnerClassSingleton.getInstance();\n        InnerClassSingleton instance1 = InnerClassSingleton.getInstance();\n        System.out.println(instance == instance1); // true\n\n    }\n}\n\n/**\n * 静态内部类 本质上也是基于JVM的类加载机制来实现的 而且是一种懒加载的方式\n */\nclass InnerClassSingleton{\n    private static class InnerClassHolder{\n        private static InnerClassSingleton instance = new InnerClassSingleton();\n    }\n\n    private InnerClassSingleton(){\n\n    }\n\n    public static InnerClassSingleton getInstance(){\n        return InnerClassHolder.instance;\n    }\n}\n```\n\n1. 静态内部类本质上是利用类的加载机制来保证线程安全\n2. 只有在实际使用的时候, 才会触发类的初始化, 所以也是懒加载的一种形式\n\n\n","source":"_posts/单例设计模式.md","raw":"---\ntitle: 单例设计模式\ndate: 2020-04-19 19:21:10\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png\ncategories: 技术总结\ntags:\n    - 设计模式\n    - Java\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png\"/>\n\n**单例模式定义**\n保证一个类只有一个实例, 并且提供一个全局访问点\n\n**什么样的场景下需要使用单例?**\n重量级的对象, 不需要多个实例.\n如线程池, 或者数据库的连接池. 我们希望我们直接从连接池里面拿连接就可以了, 而不是每次请求都去创建一个对应的连接池\n\n\n### 单例模式的具体实现\n#### 懒汉模式\n\n**特点:** 延迟加载, 只有在真正使用的时候才开始实例化.\n\n**代码:**\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n        LazySingletion instance = LazySingletion.getInstance();\n        LazySingletion instance1 = LazySingletion.getInstance();\n        System.out.println(instance == instance1); // true\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}\n```\n\n单例模式在单线程的环境下这样是OK的, 下面试一下两个线程:\n\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n\n        new Thread( ()->{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n\n\n        new Thread( ()->{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            try {\n                /**\n                 * 避免一个线程提前完成, 让线程sleep 2000毫秒\n                 */\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}\n```\n**输出:**\n```\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@3354d998\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@7245297c\n```\n\n这个情况说明在多线程的情况下访问这个代码是会出现多线程问题的\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200000.png\"/>\n两个线程同时都走到了这个代码块, 两个线程都会进行对应实例的创建, 这样就产生了两个对应的实例, 违背了单例模式的定义\n\n**解决方法:**\n给访问点加上synchronized\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200355.png\"/>\n\n**输出:**\n```\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\n```\n通过给getInstance加锁的方式确保了单例, 这样会有一定的性能损耗\n\n优化方案\n```java\n/**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            synchronized (LazySingletion.class){\n                if(instance == null){\n                    instance = new LazySingletion();\n                }\n            }\n        }\n        return instance;\n    }\n```\n这样就能给锁进行一个很大的性能提升, 如果第一个线程就完成它的实例化的话, 那其他线程就不会在对他进行加锁了\n\n\n#### 饿汉模式\n类加载的初始化阶段就完成了势力的初始化. 本质上就是借助于JVM类加载及政治, 保证实例的唯一性. \n\n类加载过程:\n1. 加载二进制数到内存中, 生成对应的Class数据结构.\n2. 连接: a.验证 b.准备(给类的静态成员变量赋<font color=\"red\">默认值</font>), c.解析\n3. <font color=\"red\">初始化</font>:给类的静态变量赋<font color=\"red\">初始值</font>\n\n只有在真正使用对应的类时, 才会触发初始化 如(当前类时启动类即main函数所在类, 直接进行new操作, 访问静态属性 访问静态方法 用反射访问类, 初始化一个类的子类等.)\n\n代码:\n```java\npackage com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 22:44\n */\npublic class HungrySingletonTest {\n    public static void main(String[] args) {\n        HungryStingleton instancel = HungryStingleton.getInstance();\n        HungryStingleton instancel1 = HungryStingleton.getInstance();\n\n        System.out.println(instancel == instancel1); // true\n\n\n\n    }\n}\n\n/**\n * 单例模式-饿汉模式\n */\nclass HungryStingleton{\n    private static HungryStingleton instance = new HungryStingleton();\n    private HungryStingleton(){};\n\n    public static HungryStingleton getInstance(){\n        return instance;\n    }\n\n}\n```\n\n#### 静态内部类\n\n代码:\n```java\nimport com.sun.org.apache.bcel.internal.classfile.InnerClass;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 23:04\n */\npublic class InnerClassSingletonTest {\n    public static void main(String[] args) {\n        InnerClassSingleton instance = InnerClassSingleton.getInstance();\n        InnerClassSingleton instance1 = InnerClassSingleton.getInstance();\n        System.out.println(instance == instance1); // true\n\n    }\n}\n\n/**\n * 静态内部类 本质上也是基于JVM的类加载机制来实现的 而且是一种懒加载的方式\n */\nclass InnerClassSingleton{\n    private static class InnerClassHolder{\n        private static InnerClassSingleton instance = new InnerClassSingleton();\n    }\n\n    private InnerClassSingleton(){\n\n    }\n\n    public static InnerClassSingleton getInstance(){\n        return InnerClassHolder.instance;\n    }\n}\n```\n\n1. 静态内部类本质上是利用类的加载机制来保证线程安全\n2. 只有在实际使用的时候, 才会触发类的初始化, 所以也是懒加载的一种形式\n\n\n","slug":"单例设计模式","published":1,"updated":"2020-05-05T19:02:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaaqa3ui0006i4jx1rxud86j","content":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png\">\n\n<p><strong>单例模式定义</strong><br>保证一个类只有一个实例, 并且提供一个全局访问点</p>\n<p><strong>什么样的场景下需要使用单例?</strong><br>重量级的对象, 不需要多个实例.<br>如线程池, 或者数据库的连接池. 我们希望我们直接从连接池里面拿连接就可以了, 而不是每次请求都去创建一个对应的连接池</p>\n<h3 id=\"单例模式的具体实现\"><a href=\"#单例模式的具体实现\" class=\"headerlink\" title=\"单例模式的具体实现\"></a>单例模式的具体实现</h3><h4 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h4><p><strong>特点:</strong> 延迟加载, 只有在真正使用的时候才开始实例化.</p>\n<p><strong>代码:</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">.</span>shejimoshi<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingletonTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LazySingletion instance <span class=\"token operator\">=</span> LazySingletion<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        LazySingletion instance1 <span class=\"token operator\">=</span> LazySingletion<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> instance1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingletion</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 首先提供一个静态的私有属性\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> LazySingletion instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">LazySingletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 提供一个全局的访问点\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LazySingletion <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 在调用getInstance的时候在对他进行实例化\n         */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>单例模式在单线程的环境下这样是OK的, 下面试一下两个线程:</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">.</span>shejimoshi<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingletonTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n            LazySingletion instance <span class=\"token operator\">=</span> LazySingletion<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n            LazySingletion instance <span class=\"token operator\">=</span> LazySingletion<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazySingletion</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 首先提供一个静态的私有属性\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> LazySingletion instance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">LazySingletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 提供一个全局的访问点\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LazySingletion <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 在调用getInstance的时候在对他进行实例化\n         */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">/**\n                 * 避免一个线程提前完成, 让线程sleep 2000毫秒\n                 */</span>\n                Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>输出:</strong></p>\n<pre><code>com.company.shejimoshi.LazySingletonTest$LazySingletion@3354d998\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@7245297c</code></pre><p>这个情况说明在多线程的情况下访问这个代码是会出现多线程问题的<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200000.png\"><br>两个线程同时都走到了这个代码块, 两个线程都会进行对应实例的创建, 这样就产生了两个对应的实例, 违背了单例模式的定义</p>\n<p><strong>解决方法:</strong><br>给访问点加上synchronized<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200355.png\"></p>\n<p><strong>输出:</strong></p>\n<pre><code>com.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea</code></pre><p>通过给getInstance加锁的方式确保了单例, 这样会有一定的性能损耗</p>\n<p>优化方案</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 提供一个全局的访问点\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LazySingletion <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">/**\n         * 在调用getInstance的时候在对他进行实例化\n         */</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>LazySingletion<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LazySingletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>这样就能给锁进行一个很大的性能提升, 如果第一个线程就完成它的实例化的话, 那其他线程就不会在对他进行加锁了</p>\n<h4 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h4><p>类加载的初始化阶段就完成了势力的初始化. 本质上就是借助于JVM类加载及政治, 保证实例的唯一性. </p>\n<p>类加载过程:</p>\n<ol>\n<li>加载二进制数到内存中, 生成对应的Class数据结构.</li>\n<li>连接: a.验证 b.准备(给类的静态成员变量赋<font color=\"red\">默认值</font>), c.解析</li>\n<li><font color=\"red\">初始化</font>:给类的静态变量赋<font color=\"red\">初始值</font></li>\n</ol>\n<p>只有在真正使用对应的类时, 才会触发初始化 如(当前类时启动类即main函数所在类, 直接进行new操作, 访问静态属性 访问静态方法 用反射访问类, 初始化一个类的子类等.)</p>\n<p>代码:</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">.</span>shejimoshi<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @author chenxinshinian.com\n * @date 2020/4/19 22:44\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungrySingletonTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        HungryStingleton instancel <span class=\"token operator\">=</span> HungryStingleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        HungryStingleton instancel1 <span class=\"token operator\">=</span> HungryStingleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instancel <span class=\"token operator\">==</span> instancel1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n\n\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 单例模式-饿汉模式\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HungryStingleton</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> HungryStingleton instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HungryStingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">HungryStingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> HungryStingleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><p>代码:</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>sun<span class=\"token punctuation\">.</span>org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>bcel<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>classfile<span class=\"token punctuation\">.</span>InnerClass<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * @author chenxinshinian.com\n * @date 2020/4/19 23:04\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassSingletonTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        InnerClassSingleton instance <span class=\"token operator\">=</span> InnerClassSingleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InnerClassSingleton instance1 <span class=\"token operator\">=</span> InnerClassSingleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> instance1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 静态内部类 本质上也是基于JVM的类加载机制来实现的 而且是一种懒加载的方式\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassSingleton</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassHolder</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> InnerClassSingleton instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">InnerClassSingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> InnerClassSingleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> InnerClassHolder<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol>\n<li>静态内部类本质上是利用类的加载机制来保证线程安全</li>\n<li>只有在实际使用的时候, 才会触发类的初始化, 所以也是懒加载的一种形式</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419192343.png\"/>\n\n<p><strong>单例模式定义</strong><br>保证一个类只有一个实例, 并且提供一个全局访问点</p>\n<p><strong>什么样的场景下需要使用单例?</strong><br>重量级的对象, 不需要多个实例.<br>如线程池, 或者数据库的连接池. 我们希望我们直接从连接池里面拿连接就可以了, 而不是每次请求都去创建一个对应的连接池</p>\n<h3 id=\"单例模式的具体实现\"><a href=\"#单例模式的具体实现\" class=\"headerlink\" title=\"单例模式的具体实现\"></a>单例模式的具体实现</h3><h4 id=\"懒汉模式\"><a href=\"#懒汉模式\" class=\"headerlink\" title=\"懒汉模式\"></a>懒汉模式</h4><p><strong>特点:</strong> 延迟加载, 只有在真正使用的时候才开始实例化.</p>\n<p><strong>代码:</strong></p>\n<pre><code class=\"java\">package com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n        LazySingletion instance = LazySingletion.getInstance();\n        LazySingletion instance1 = LazySingletion.getInstance();\n        System.out.println(instance == instance1); // true\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}</code></pre>\n<p>单例模式在单线程的环境下这样是OK的, 下面试一下两个线程:</p>\n<pre><code class=\"java\">package com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 19:38\n */\npublic class LazySingletonTest {\n    public static void main(String[] args) {\n\n        new Thread( ()-&gt;{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n\n\n        new Thread( ()-&gt;{\n            LazySingletion instance = LazySingletion.getInstance();\n            System.out.println(instance);\n        }).start();\n    }\n\nstatic class LazySingletion{\n    /**\n     * 首先提供一个静态的私有属性\n     */\n    private static LazySingletion instance;\n\n    /**\n     * 提供一个私有的构造函数, 避免直接从外部对对应实例的创建\n     */\n    private LazySingletion(){\n\n    }\n\n    /**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            try {\n                /**\n                 * 避免一个线程提前完成, 让线程sleep 2000毫秒\n                 */\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            instance = new LazySingletion();\n        }\n        return instance;\n    }\n    }\n}</code></pre>\n<p><strong>输出:</strong></p>\n<pre><code>com.company.shejimoshi.LazySingletonTest$LazySingletion@3354d998\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@7245297c</code></pre><p>这个情况说明在多线程的情况下访问这个代码是会出现多线程问题的<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200000.png\"/><br>两个线程同时都走到了这个代码块, 两个线程都会进行对应实例的创建, 这样就产生了两个对应的实例, 违背了单例模式的定义</p>\n<p><strong>解决方法:</strong><br>给访问点加上synchronized<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200419200355.png\"/></p>\n<p><strong>输出:</strong></p>\n<pre><code>com.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea\ncom.company.shejimoshi.LazySingletonTest$LazySingletion@632a10ea</code></pre><p>通过给getInstance加锁的方式确保了单例, 这样会有一定的性能损耗</p>\n<p>优化方案</p>\n<pre><code class=\"java\">/**\n     * 提供一个全局的访问点\n     * @return\n     */\n    public static LazySingletion getInstance(){\n        /**\n         * 在调用getInstance的时候在对他进行实例化\n         */\n        if(instance == null){\n            synchronized (LazySingletion.class){\n                if(instance == null){\n                    instance = new LazySingletion();\n                }\n            }\n        }\n        return instance;\n    }</code></pre>\n<p>这样就能给锁进行一个很大的性能提升, 如果第一个线程就完成它的实例化的话, 那其他线程就不会在对他进行加锁了</p>\n<h4 id=\"饿汉模式\"><a href=\"#饿汉模式\" class=\"headerlink\" title=\"饿汉模式\"></a>饿汉模式</h4><p>类加载的初始化阶段就完成了势力的初始化. 本质上就是借助于JVM类加载及政治, 保证实例的唯一性. </p>\n<p>类加载过程:</p>\n<ol>\n<li>加载二进制数到内存中, 生成对应的Class数据结构.</li>\n<li>连接: a.验证 b.准备(给类的静态成员变量赋<font color=\"red\">默认值</font>), c.解析</li>\n<li><font color=\"red\">初始化</font>:给类的静态变量赋<font color=\"red\">初始值</font></li>\n</ol>\n<p>只有在真正使用对应的类时, 才会触发初始化 如(当前类时启动类即main函数所在类, 直接进行new操作, 访问静态属性 访问静态方法 用反射访问类, 初始化一个类的子类等.)</p>\n<p>代码:</p>\n<pre><code class=\"java\">package com.company.shejimoshi;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 22:44\n */\npublic class HungrySingletonTest {\n    public static void main(String[] args) {\n        HungryStingleton instancel = HungryStingleton.getInstance();\n        HungryStingleton instancel1 = HungryStingleton.getInstance();\n\n        System.out.println(instancel == instancel1); // true\n\n\n\n    }\n}\n\n/**\n * 单例模式-饿汉模式\n */\nclass HungryStingleton{\n    private static HungryStingleton instance = new HungryStingleton();\n    private HungryStingleton(){};\n\n    public static HungryStingleton getInstance(){\n        return instance;\n    }\n\n}</code></pre>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><p>代码:</p>\n<pre><code class=\"java\">import com.sun.org.apache.bcel.internal.classfile.InnerClass;\n\n/**\n * @author chenxinshinian.com\n * @date 2020/4/19 23:04\n */\npublic class InnerClassSingletonTest {\n    public static void main(String[] args) {\n        InnerClassSingleton instance = InnerClassSingleton.getInstance();\n        InnerClassSingleton instance1 = InnerClassSingleton.getInstance();\n        System.out.println(instance == instance1); // true\n\n    }\n}\n\n/**\n * 静态内部类 本质上也是基于JVM的类加载机制来实现的 而且是一种懒加载的方式\n */\nclass InnerClassSingleton{\n    private static class InnerClassHolder{\n        private static InnerClassSingleton instance = new InnerClassSingleton();\n    }\n\n    private InnerClassSingleton(){\n\n    }\n\n    public static InnerClassSingleton getInstance(){\n        return InnerClassHolder.instance;\n    }\n}</code></pre>\n<ol>\n<li>静态内部类本质上是利用类的加载机制来保证线程安全</li>\n<li>只有在实际使用的时候, 才会触发类的初始化, 所以也是懒加载的一种形式</li>\n</ol>\n"},{"title":"搭建一个极简静态网站","date":"2020-01-27T11:03:57.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png","_content":"\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png)\n\n基于vuepress搭建一个属于自己的极简静态网站，可以作为自己的博客、线上笔记文档等\n[成品展示](https://chenxinshinian.github.io/)\n\n[vuepress官网](https://vuepress.vuejs.org/zh/)\n\n### 需要的软件\n开始前你需要确保自己的电脑上已经安装了[Git](https://git-scm.com/)和[Node.js](https://nodejs.org/zh-cn/)\n\n<font color=\"red\">注意：请确保你的 Node.js 版本 >= 8.6。</font>\n\n### 正式开始\n#### 安装vuepress\n在你的磁盘<font color=\"red\">根目录</font>创建一个文件夹用来存放你的静态网站\n如：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127193541.png)\n\n进入你创建的文件夹，鼠标右键选择git的命令窗口\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194228.png)\n\n输入全局安装命令\n```bash\nnpm install -g vuepress\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194600.png)\n输入后回车等待安装完成\n\n#### 验证vuepress\n在git命令窗口输入\n```bash\nvuepress\n```\n如果出现以下内容说明你安装成功了O(∩_∩)O\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194810.png)\n\n### 创建网站首页\n在根目录打开git命令窗口\n执行\n```bash\n# 新建一个docs文件夹\nmkdir docs\n# 进入docs文件夹目录\ncd docs/\n# 新建一个 markdown 文件\necho '# Hello VuePress!' > README.md\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127200935.png)\n\n打开README.md文件夹（我这里用的是VSCode），可以看到Hello VuePress!\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201206.png)\n\n#### 运行vuepress\n<font color=\"red\">git命令行切换到docs目录</font>执行\n```bash\nvuepress dev\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201802.png)\n\n可以看到vuepress开启的端口（默认是8080端口，如果8080端口被占用vuepress就会自动切换到未被占用端口）\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201834.png)\n浏览器输入地址可以看到\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127202050.png)\n\n### vuepress配置文件\n在docs文件夹下执行\n```bash\n# 在docs文档目录下创建一个 .vuepress 目录，所有 VuePress 相关的文件都将会被放在这里\nmkdir .vuepress\n# 进入 .vuepress 文件夹\ncd .vuepress/\n# 创建 VuePress 网站配置文件 \ntouch config.js\n# 切换到blog根目录执行\ncd ../..\n# 执行初始化目录\nnpm init -y\n```\n此时项目结构应该是:\n```\n.\n├─ docs\n│  ├─ README.md\n│  └─ .vuepress\n│     └─ config.js\n└─ package.json\n```\n\n打开config.js文件夹\n将下面代码粘贴进去\n```js\nmodule.exports = {\n  title: 'Hello VuePress', // 标题\n  description: 'Just playing around' // 描述\n}\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127204810.png)\n\n#### 运行vuepress看看效果\n切换到docs目录下\n执行\n```bash\nvuepress dev\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205044.png)\n\n### 配置首页\n打开docs目录下的README.md文件\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205731.png)\n将以下内容粘贴进去\n```yaml\n---\nhome: true\nheroImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /zh/guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n在运行vuepress将看到以下效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127210245.png)\n\n#### 了解markdown\n这里你需要了解以下[markdown扩展](https://vuepress.vuejs.org/zh/guide/markdown.html#header-anchors)\n\n### 首页图片和favicon.png图片\n进入 .vuepress目录下新建public文件夹\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127211950.png)\n将准备好的两个图标放到public文件夹下面（你可以到[easyicon](https://www.easyicon.net/)找自己喜欢的图标）\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212315.png)\n\n修改docs下面REDEME.md文件\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212442.png)\n\n修改config.js文件\n```js\nhead: [\n    ['link', { rel: 'icon', href: '/logo.png' }]\n  ]\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212839.png)\n\n重新运行vuepress查看效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127213033.png)\n\n### 导航配置\n\n在config.js 中增加以下代码\n```js\nthemeConfig: {\n    sidebarDepth: 2, //最大嵌套深度\n    lastUpdated: 'Last Updated', //显示最后更新时间\n    nav: [\n      //单个导航\n      { text: '首页', link: '/' }, //内部跳转\n      { text: '关于', link: '/about/' }, //关于页面\n      { text: 'GitHub', link: 'https://github.com/chenxinshinian' }, //外部跳转\n      {\n       //下拉列表\n        text: '语言',\n        items: [\n          { text: 'chinese', link: '/language/chinese/' },\n          { text: 'japanese', link: '/language/japanese/' }\n        ]\n      },\n      // 下拉列表显示分组\n      {\n        text: '分享',\n        items: [\n        { \n            text: '索引', \n            items: [\n            { text: 'Java', link: '/Java/' },\n            { text: 'JavaScript', link: '/JavaScript/' }\n            ] \n        }\n        ]  \n    }\n    ],   \n    sidebar: {\n      '/Java/': [   \n          '', // 代表/Java/\n          'java1', \n          'java2'\n      ],\n      '/JavaScript/': [   \n        '', // 代表 /JavaScript/\n        'js1' \n    ]\n  }\n  }\n```\n\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127224625.png)\n\n运行vuepress后应该出现效果:\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128182950.png)\n这时点击导航栏应该是显示404，这是英文虽然配置了导航但是但是响应的目录还没有创建\n\n导航配置对应的目录结构:\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128184319.png)\n<font color=\"red\">注意：每个导航下面都要有一个README.md文件作为导航的首页</font>\n\n其他页面内容\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185345.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185435.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185452.png)\n\n页面效果：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185602.png)\n\n\n[更多详细配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html)\n\n\n### 部署\n教程部署在github pages上面\n登录[github](https://github.com/)创建一个仓库\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193725.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193949.png)\n\n格式为`<username>.github.io`\n最后点击最小面的绿色按钮创建\n\ngithub的操作就结束了\n接下来正在你的网站根目录创建\ndeploy.sh文件,将下面的内容粘贴进去\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201345.png)\n```yaml\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果是发布到自定义域名\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# 如果发布到 https://<USERNAME>.github.io\n git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n\n# 如果发布到 https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194623.png)\n\n\n保存后双击运行deploy.sh文件\n然后 浏览器输入\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194746.png)\n你就部署成功了\n\n### 扩展\n\n#### 增加返回顶部效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194852.png)\n步骤过于简单根据[官方提示](https://vuepress.vuejs.org/zh/plugin/official/plugin-back-to-top.html)安装插件就可以了\n\n\n#### 添加评论功能\n##### 安装valine\n在blog目录下打开git命令窗口，依次执行下面两条命令\n```bash\n# Install leancloud's js-sdk\nnpm install leancloud-storage --save\n# Install valine\nnpm install valine --save\n```\n\n接下来在.vuepress文件夹下创建components文件夹，再到components文件夹下面创建Valine.vue文件\n\n打开Valine.vue文件将下面内容粘贴进去\n```js\n<template>\n  <div id=\"vcomments\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'Valine',\n  mounted: function(){\n    // require window \n    const Valine = require('valine');\n    if (typeof window !== 'undefined') {\n      this.window = window\n      window.AV = require('leancloud-storage')\n      \n    }\n     \n    new Valine({\n      el: '#vcomments' ,\n      appId: '',// 这里填你的appId\n      appKey: '', // 这里填你的appKey\n      notify:false, \n      verify:false, \n      avatar:'mm', \n      placeholder: '说点什么...' \n    });\n  },\n}\n</script>\n```\n\n\n接下来登录或者在注册[leancloud](https://www.leancloud.cn/)\n之后进入控制台，点击左下角创建应用\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200204.png)\n应用创建好以后，进入刚刚创建的应用，选择左下角的设置>应用Key，然后就能看到你的APP ID和APP Key了：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200338.png)\n\n添加你的域名\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200722.png)\n\n将你的app id 和app key粘贴到Valine.vue文件里的对应位置\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200456.png)\n\n然后在你想加入评论的页面加上\n\n\n`<Valine></Valine>`\n\n如我在首页README.md文件中添加\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200633.png)\n\n然后双击deploy.sh文件，将他部署到github\n\n效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201034.png)\n\n<font color=\"red\">如果没有效果请清楚浏览器缓存或者更换浏览器访问</font>\n\n\n","source":"_posts/搭建一个极简静态网站.md","raw":"---\ntitle: 搭建一个极简静态网站\ndate: 2020-01-27 19:03:57\ncategories: 分享\ntags:\n    - vuepress\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png\n---\n\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png)\n\n基于vuepress搭建一个属于自己的极简静态网站，可以作为自己的博客、线上笔记文档等\n[成品展示](https://chenxinshinian.github.io/)\n\n[vuepress官网](https://vuepress.vuejs.org/zh/)\n\n### 需要的软件\n开始前你需要确保自己的电脑上已经安装了[Git](https://git-scm.com/)和[Node.js](https://nodejs.org/zh-cn/)\n\n<font color=\"red\">注意：请确保你的 Node.js 版本 >= 8.6。</font>\n\n### 正式开始\n#### 安装vuepress\n在你的磁盘<font color=\"red\">根目录</font>创建一个文件夹用来存放你的静态网站\n如：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127193541.png)\n\n进入你创建的文件夹，鼠标右键选择git的命令窗口\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194228.png)\n\n输入全局安装命令\n```bash\nnpm install -g vuepress\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194600.png)\n输入后回车等待安装完成\n\n#### 验证vuepress\n在git命令窗口输入\n```bash\nvuepress\n```\n如果出现以下内容说明你安装成功了O(∩_∩)O\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194810.png)\n\n### 创建网站首页\n在根目录打开git命令窗口\n执行\n```bash\n# 新建一个docs文件夹\nmkdir docs\n# 进入docs文件夹目录\ncd docs/\n# 新建一个 markdown 文件\necho '# Hello VuePress!' > README.md\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127200935.png)\n\n打开README.md文件夹（我这里用的是VSCode），可以看到Hello VuePress!\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201206.png)\n\n#### 运行vuepress\n<font color=\"red\">git命令行切换到docs目录</font>执行\n```bash\nvuepress dev\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201802.png)\n\n可以看到vuepress开启的端口（默认是8080端口，如果8080端口被占用vuepress就会自动切换到未被占用端口）\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201834.png)\n浏览器输入地址可以看到\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127202050.png)\n\n### vuepress配置文件\n在docs文件夹下执行\n```bash\n# 在docs文档目录下创建一个 .vuepress 目录，所有 VuePress 相关的文件都将会被放在这里\nmkdir .vuepress\n# 进入 .vuepress 文件夹\ncd .vuepress/\n# 创建 VuePress 网站配置文件 \ntouch config.js\n# 切换到blog根目录执行\ncd ../..\n# 执行初始化目录\nnpm init -y\n```\n此时项目结构应该是:\n```\n.\n├─ docs\n│  ├─ README.md\n│  └─ .vuepress\n│     └─ config.js\n└─ package.json\n```\n\n打开config.js文件夹\n将下面代码粘贴进去\n```js\nmodule.exports = {\n  title: 'Hello VuePress', // 标题\n  description: 'Just playing around' // 描述\n}\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127204810.png)\n\n#### 运行vuepress看看效果\n切换到docs目录下\n执行\n```bash\nvuepress dev\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205044.png)\n\n### 配置首页\n打开docs目录下的README.md文件\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205731.png)\n将以下内容粘贴进去\n```yaml\n---\nhome: true\nheroImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /zh/guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---\n```\n在运行vuepress将看到以下效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127210245.png)\n\n#### 了解markdown\n这里你需要了解以下[markdown扩展](https://vuepress.vuejs.org/zh/guide/markdown.html#header-anchors)\n\n### 首页图片和favicon.png图片\n进入 .vuepress目录下新建public文件夹\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127211950.png)\n将准备好的两个图标放到public文件夹下面（你可以到[easyicon](https://www.easyicon.net/)找自己喜欢的图标）\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212315.png)\n\n修改docs下面REDEME.md文件\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212442.png)\n\n修改config.js文件\n```js\nhead: [\n    ['link', { rel: 'icon', href: '/logo.png' }]\n  ]\n```\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212839.png)\n\n重新运行vuepress查看效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127213033.png)\n\n### 导航配置\n\n在config.js 中增加以下代码\n```js\nthemeConfig: {\n    sidebarDepth: 2, //最大嵌套深度\n    lastUpdated: 'Last Updated', //显示最后更新时间\n    nav: [\n      //单个导航\n      { text: '首页', link: '/' }, //内部跳转\n      { text: '关于', link: '/about/' }, //关于页面\n      { text: 'GitHub', link: 'https://github.com/chenxinshinian' }, //外部跳转\n      {\n       //下拉列表\n        text: '语言',\n        items: [\n          { text: 'chinese', link: '/language/chinese/' },\n          { text: 'japanese', link: '/language/japanese/' }\n        ]\n      },\n      // 下拉列表显示分组\n      {\n        text: '分享',\n        items: [\n        { \n            text: '索引', \n            items: [\n            { text: 'Java', link: '/Java/' },\n            { text: 'JavaScript', link: '/JavaScript/' }\n            ] \n        }\n        ]  \n    }\n    ],   \n    sidebar: {\n      '/Java/': [   \n          '', // 代表/Java/\n          'java1', \n          'java2'\n      ],\n      '/JavaScript/': [   \n        '', // 代表 /JavaScript/\n        'js1' \n    ]\n  }\n  }\n```\n\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127224625.png)\n\n运行vuepress后应该出现效果:\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128182950.png)\n这时点击导航栏应该是显示404，这是英文虽然配置了导航但是但是响应的目录还没有创建\n\n导航配置对应的目录结构:\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128184319.png)\n<font color=\"red\">注意：每个导航下面都要有一个README.md文件作为导航的首页</font>\n\n其他页面内容\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185345.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185435.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185452.png)\n\n页面效果：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185602.png)\n\n\n[更多详细配置](https://vuepress.vuejs.org/zh/theme/default-theme-config.html)\n\n\n### 部署\n教程部署在github pages上面\n登录[github](https://github.com/)创建一个仓库\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193725.png)\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193949.png)\n\n格式为`<username>.github.io`\n最后点击最小面的绿色按钮创建\n\ngithub的操作就结束了\n接下来正在你的网站根目录创建\ndeploy.sh文件,将下面的内容粘贴进去\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201345.png)\n```yaml\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果是发布到自定义域名\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# 如果发布到 https://<USERNAME>.github.io\n git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n\n# 如果发布到 https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n```\n\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194623.png)\n\n\n保存后双击运行deploy.sh文件\n然后 浏览器输入\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194746.png)\n你就部署成功了\n\n### 扩展\n\n#### 增加返回顶部效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194852.png)\n步骤过于简单根据[官方提示](https://vuepress.vuejs.org/zh/plugin/official/plugin-back-to-top.html)安装插件就可以了\n\n\n#### 添加评论功能\n##### 安装valine\n在blog目录下打开git命令窗口，依次执行下面两条命令\n```bash\n# Install leancloud's js-sdk\nnpm install leancloud-storage --save\n# Install valine\nnpm install valine --save\n```\n\n接下来在.vuepress文件夹下创建components文件夹，再到components文件夹下面创建Valine.vue文件\n\n打开Valine.vue文件将下面内容粘贴进去\n```js\n<template>\n  <div id=\"vcomments\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'Valine',\n  mounted: function(){\n    // require window \n    const Valine = require('valine');\n    if (typeof window !== 'undefined') {\n      this.window = window\n      window.AV = require('leancloud-storage')\n      \n    }\n     \n    new Valine({\n      el: '#vcomments' ,\n      appId: '',// 这里填你的appId\n      appKey: '', // 这里填你的appKey\n      notify:false, \n      verify:false, \n      avatar:'mm', \n      placeholder: '说点什么...' \n    });\n  },\n}\n</script>\n```\n\n\n接下来登录或者在注册[leancloud](https://www.leancloud.cn/)\n之后进入控制台，点击左下角创建应用\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200204.png)\n应用创建好以后，进入刚刚创建的应用，选择左下角的设置>应用Key，然后就能看到你的APP ID和APP Key了：\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200338.png)\n\n添加你的域名\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200722.png)\n\n将你的app id 和app key粘贴到Valine.vue文件里的对应位置\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200456.png)\n\n然后在你想加入评论的页面加上\n\n\n`<Valine></Valine>`\n\n如我在首页README.md文件中添加\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200633.png)\n\n然后双击deploy.sh文件，将他部署到github\n\n效果\n![](https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201034.png)\n\n<font color=\"red\">如果没有效果请清楚浏览器缓存或者更换浏览器访问</font>\n\n\n","slug":"搭建一个极简静态网站","published":1,"updated":"2020-05-05T19:02:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaaqa3v8000di4jxhp0se3bm","content":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png\" alt=\"\"></p>\n<p>基于vuepress搭建一个属于自己的极简静态网站，可以作为自己的博客、线上笔记文档等<br><a href=\"https://chenxinshinian.github.io/\" target=\"_blank\" rel=\"noopener\">成品展示</a></p>\n<p><a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuepress官网</a></p>\n<h3 id=\"需要的软件\"><a href=\"#需要的软件\" class=\"headerlink\" title=\"需要的软件\"></a>需要的软件</h3><p>开始前你需要确保自己的电脑上已经安装了<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>和<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<p><font color=\"red\">注意：请确保你的 Node.js 版本 &gt;= 8.6。</font></p>\n<h3 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h3><h4 id=\"安装vuepress\"><a href=\"#安装vuepress\" class=\"headerlink\" title=\"安装vuepress\"></a>安装vuepress</h4><p>在你的磁盘<font color=\"red\">根目录</font>创建一个文件夹用来存放你的静态网站<br>如：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127193541.png\" alt=\"\"></p>\n<p>进入你创建的文件夹，鼠标右键选择git的命令窗口<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194228.png\" alt=\"\"></p>\n<p>输入全局安装命令</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g vuepress</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194600.png\" alt=\"\"><br>输入后回车等待安装完成</p>\n<h4 id=\"验证vuepress\"><a href=\"#验证vuepress\" class=\"headerlink\" title=\"验证vuepress\"></a>验证vuepress</h4><p>在git命令窗口输入</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">vuepress</code></pre>\n<p>如果出现以下内容说明你安装成功了O(∩_∩)O<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194810.png\" alt=\"\"></p>\n<h3 id=\"创建网站首页\"><a href=\"#创建网站首页\" class=\"headerlink\" title=\"创建网站首页\"></a>创建网站首页</h3><p>在根目录打开git命令窗口<br>执行</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 新建一个docs文件夹</span>\n<span class=\"token function\">mkdir</span> docs\n<span class=\"token comment\" spellcheck=\"true\"># 进入docs文件夹目录</span>\n<span class=\"token function\">cd</span> docs/\n<span class=\"token comment\" spellcheck=\"true\"># 新建一个 markdown 文件</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">'# Hello VuePress!'</span> <span class=\"token operator\">></span> README.md</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127200935.png\" alt=\"\"></p>\n<p>打开README.md文件夹（我这里用的是VSCode），可以看到Hello VuePress!<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201206.png\" alt=\"\"></p>\n<h4 id=\"运行vuepress\"><a href=\"#运行vuepress\" class=\"headerlink\" title=\"运行vuepress\"></a>运行vuepress</h4><p><font color=\"red\">git命令行切换到docs目录</font>执行</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">vuepress dev</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201802.png\" alt=\"\"></p>\n<p>可以看到vuepress开启的端口（默认是8080端口，如果8080端口被占用vuepress就会自动切换到未被占用端口）<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201834.png\" alt=\"\"><br>浏览器输入地址可以看到<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127202050.png\" alt=\"\"></p>\n<h3 id=\"vuepress配置文件\"><a href=\"#vuepress配置文件\" class=\"headerlink\" title=\"vuepress配置文件\"></a>vuepress配置文件</h3><p>在docs文件夹下执行</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># 在docs文档目录下创建一个 .vuepress 目录，所有 VuePress 相关的文件都将会被放在这里</span>\n<span class=\"token function\">mkdir</span> .vuepress\n<span class=\"token comment\" spellcheck=\"true\"># 进入 .vuepress 文件夹</span>\n<span class=\"token function\">cd</span> .vuepress/\n<span class=\"token comment\" spellcheck=\"true\"># 创建 VuePress 网站配置文件 </span>\n<span class=\"token function\">touch</span> config.js\n<span class=\"token comment\" spellcheck=\"true\"># 切换到blog根目录执行</span>\n<span class=\"token function\">cd</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token comment\" spellcheck=\"true\"># 执行初始化目录</span>\n<span class=\"token function\">npm</span> init -y</code></pre>\n<p>此时项目结构应该是:</p>\n<pre><code>.\n├─ docs\n│  ├─ README.md\n│  └─ .vuepress\n│     └─ config.js\n└─ package.json</code></pre><p>打开config.js文件夹<br>将下面代码粘贴进去</p>\n<pre class=\" language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello VuePress'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 标题</span>\n  description<span class=\"token punctuation\">:</span> <span class=\"token string\">'Just playing around'</span> <span class=\"token comment\" spellcheck=\"true\">// 描述</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127204810.png\" alt=\"\"></p>\n<h4 id=\"运行vuepress看看效果\"><a href=\"#运行vuepress看看效果\" class=\"headerlink\" title=\"运行vuepress看看效果\"></a>运行vuepress看看效果</h4><p>切换到docs目录下<br>执行</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">vuepress dev</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205044.png\" alt=\"\"></p>\n<h3 id=\"配置首页\"><a href=\"#配置首页\" class=\"headerlink\" title=\"配置首页\"></a>配置首页</h3><p>打开docs目录下的README.md文件<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205731.png\" alt=\"\"><br>将以下内容粘贴进去</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">heroImage</span><span class=\"token punctuation\">:</span> /hero.png\n<span class=\"token key atrule\">heroText</span><span class=\"token punctuation\">:</span> Hero 标题\n<span class=\"token key atrule\">tagline</span><span class=\"token punctuation\">:</span> Hero 副标题\n<span class=\"token key atrule\">actionText</span><span class=\"token punctuation\">:</span> 快速上手 →\n<span class=\"token key atrule\">actionLink</span><span class=\"token punctuation\">:</span> /zh/guide/\n<span class=\"token key atrule\">features</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 简洁至上\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> Vue驱动\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 高性能\n  <span class=\"token key atrule\">details</span><span class=\"token punctuation\">:</span> VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\n<span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span> MIT Licensed <span class=\"token punctuation\">|</span> Copyright © 2018<span class=\"token punctuation\">-</span>present Evan You\n<span class=\"token punctuation\">---</span></code></pre>\n<p>在运行vuepress将看到以下效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127210245.png\" alt=\"\"></p>\n<h4 id=\"了解markdown\"><a href=\"#了解markdown\" class=\"headerlink\" title=\"了解markdown\"></a>了解markdown</h4><p>这里你需要了解以下<a href=\"https://vuepress.vuejs.org/zh/guide/markdown.html#header-anchors\" target=\"_blank\" rel=\"noopener\">markdown扩展</a></p>\n<h3 id=\"首页图片和favicon-png图片\"><a href=\"#首页图片和favicon-png图片\" class=\"headerlink\" title=\"首页图片和favicon.png图片\"></a>首页图片和favicon.png图片</h3><p>进入 .vuepress目录下新建public文件夹<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127211950.png\" alt=\"\"><br>将准备好的两个图标放到public文件夹下面（你可以到<a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon</a>找自己喜欢的图标）<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212315.png\" alt=\"\"></p>\n<p>修改docs下面REDEME.md文件<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212442.png\" alt=\"\"></p>\n<p>修改config.js文件</p>\n<pre class=\" language-js\"><code class=\"language-js\">head<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> rel<span class=\"token punctuation\">:</span> <span class=\"token string\">'icon'</span><span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">:</span> <span class=\"token string\">'/logo.png'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span></code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212839.png\" alt=\"\"></p>\n<p>重新运行vuepress查看效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127213033.png\" alt=\"\"></p>\n<h3 id=\"导航配置\"><a href=\"#导航配置\" class=\"headerlink\" title=\"导航配置\"></a>导航配置</h3><p>在config.js 中增加以下代码</p>\n<pre class=\" language-js\"><code class=\"language-js\">themeConfig<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    sidebarDepth<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//最大嵌套深度</span>\n    lastUpdated<span class=\"token punctuation\">:</span> <span class=\"token string\">'Last Updated'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//显示最后更新时间</span>\n    nav<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\" spellcheck=\"true\">//单个导航</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'首页'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//内部跳转</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'关于'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/about/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//关于页面</span>\n      <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'GitHub'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://github.com/chenxinshinian'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//外部跳转</span>\n      <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\" spellcheck=\"true\">//下拉列表</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'语言'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'chinese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/chinese/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'japanese'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/language/japanese/'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 下拉列表显示分组</span>\n      <span class=\"token punctuation\">{</span>\n        text<span class=\"token punctuation\">:</span> <span class=\"token string\">'分享'</span><span class=\"token punctuation\">,</span>\n        items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> \n            text<span class=\"token punctuation\">:</span> <span class=\"token string\">'索引'</span><span class=\"token punctuation\">,</span> \n            items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Java'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/Java/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">:</span> <span class=\"token string\">'/JavaScript/'</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>  \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   \n    sidebar<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'/Java/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>   \n          <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 代表/Java/</span>\n          <span class=\"token string\">'java1'</span><span class=\"token punctuation\">,</span> \n          <span class=\"token string\">'java2'</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'/JavaScript/'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>   \n        <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 代表 /JavaScript/</span>\n        <span class=\"token string\">'js1'</span> \n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127224625.png\" alt=\"\"></p>\n<p>运行vuepress后应该出现效果:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128182950.png\" alt=\"\"><br>这时点击导航栏应该是显示404，这是英文虽然配置了导航但是但是响应的目录还没有创建</p>\n<p>导航配置对应的目录结构:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128184319.png\" alt=\"\"><br><font color=\"red\">注意：每个导航下面都要有一个README.md文件作为导航的首页</font></p>\n<p>其他页面内容<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185345.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185435.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185452.png\" alt=\"\"></p>\n<p>页面效果：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185602.png\" alt=\"\"></p>\n<p><a href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html\" target=\"_blank\" rel=\"noopener\">更多详细配置</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>教程部署在github pages上面<br>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>创建一个仓库<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193725.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193949.png\" alt=\"\"></p>\n<p>格式为<code>&lt;username&gt;.github.io</code><br>最后点击最小面的绿色按钮创建</p>\n<p>github的操作就结束了<br>接下来正在你的网站根目录创建<br>deploy.sh文件,将下面的内容粘贴进去<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201345.png\" alt=\"\"></p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/env sh</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 确保脚本抛出遇到的错误</span>\nset <span class=\"token punctuation\">-</span>e\n\n<span class=\"token comment\" spellcheck=\"true\"># 生成静态文件</span>\nnpm run docs<span class=\"token punctuation\">:</span>build\n\n<span class=\"token comment\" spellcheck=\"true\"># 进入生成的文件夹</span>\ncd docs/.vuepress/dist\n\n<span class=\"token comment\" spellcheck=\"true\"># 如果是发布到自定义域名</span>\n<span class=\"token comment\" spellcheck=\"true\"># echo 'www.example.com' > CNAME</span>\n\ngit init\ngit add <span class=\"token punctuation\">-</span>A\ngit commit <span class=\"token punctuation\">-</span>m 'deploy'\n\n<span class=\"token comment\" spellcheck=\"true\"># 如果发布到 https://&lt;USERNAME>.github.io</span>\n git push <span class=\"token punctuation\">-</span>f git@github.com<span class=\"token punctuation\">:</span>&lt;USERNAME<span class=\"token punctuation\">></span>/&lt;USERNAME<span class=\"token punctuation\">></span>.github.io.git master\n\n\n<span class=\"token comment\" spellcheck=\"true\"># 如果发布到 https://&lt;USERNAME>.github.io/&lt;REPO></span>\n<span class=\"token comment\" spellcheck=\"true\"># git push -f git@github.com:&lt;USERNAME>/&lt;REPO>.git master:gh-pages</span>\n\ncd <span class=\"token punctuation\">-</span></code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194623.png\" alt=\"\"></p>\n<p>保存后双击运行deploy.sh文件<br>然后 浏览器输入<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194746.png\" alt=\"\"><br>你就部署成功了</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"增加返回顶部效果\"><a href=\"#增加返回顶部效果\" class=\"headerlink\" title=\"增加返回顶部效果\"></a>增加返回顶部效果</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194852.png\" alt=\"\"><br>步骤过于简单根据<a href=\"https://vuepress.vuejs.org/zh/plugin/official/plugin-back-to-top.html\" target=\"_blank\" rel=\"noopener\">官方提示</a>安装插件就可以了</p>\n<h4 id=\"添加评论功能\"><a href=\"#添加评论功能\" class=\"headerlink\" title=\"添加评论功能\"></a>添加评论功能</h4><h5 id=\"安装valine\"><a href=\"#安装valine\" class=\"headerlink\" title=\"安装valine\"></a>安装valine</h5><p>在blog目录下打开git命令窗口，依次执行下面两条命令</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># Install leancloud's js-sdk</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> leancloud-storage --save\n<span class=\"token comment\" spellcheck=\"true\"># Install valine</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> valine --save</code></pre>\n<p>接下来在.vuepress文件夹下创建components文件夹，再到components文件夹下面创建Valine.vue文件</p>\n<p>打开Valine.vue文件将下面内容粘贴进去</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"vcomments\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Valine'</span><span class=\"token punctuation\">,</span>\n  mounted<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// require window </span>\n    <span class=\"token keyword\">const</span> Valine <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'valine'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>window <span class=\"token operator\">=</span> window\n      window<span class=\"token punctuation\">.</span>AV <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'leancloud-storage'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Valine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#vcomments'</span> <span class=\"token punctuation\">,</span>\n      appId<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">// 这里填你的appId</span>\n      appKey<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 这里填你的appKey</span>\n      notify<span class=\"token punctuation\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \n      verify<span class=\"token punctuation\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \n      avatar<span class=\"token punctuation\">:</span><span class=\"token string\">'mm'</span><span class=\"token punctuation\">,</span> \n      placeholder<span class=\"token punctuation\">:</span> <span class=\"token string\">'说点什么...'</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre>\n<p>接下来登录或者在注册<a href=\"https://www.leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a><br>之后进入控制台，点击左下角创建应用<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200204.png\" alt=\"\"><br>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200338.png\" alt=\"\"></p>\n<p>添加你的域名<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200722.png\" alt=\"\"></p>\n<p>将你的app id 和app key粘贴到Valine.vue文件里的对应位置<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200456.png\" alt=\"\"></p>\n<p>然后在你想加入评论的页面加上</p>\n<p><code>&lt;Valine&gt;&lt;/Valine&gt;</code></p>\n<p>如我在首页README.md文件中添加<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200633.png\" alt=\"\"></p>\n<p>然后双击deploy.sh文件，将他部署到github</p>\n<p>效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201034.png\" alt=\"\"></p>\n<p><font color=\"red\">如果没有效果请清楚浏览器缓存或者更换浏览器访问</font></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127190020.png\" alt=\"\"></p>\n<p>基于vuepress搭建一个属于自己的极简静态网站，可以作为自己的博客、线上笔记文档等<br><a href=\"https://chenxinshinian.github.io/\" target=\"_blank\" rel=\"noopener\">成品展示</a></p>\n<p><a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">vuepress官网</a></p>\n<h3 id=\"需要的软件\"><a href=\"#需要的软件\" class=\"headerlink\" title=\"需要的软件\"></a>需要的软件</h3><p>开始前你需要确保自己的电脑上已经安装了<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">Git</a>和<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node.js</a></p>\n<p><font color=\"red\">注意：请确保你的 Node.js 版本 &gt;= 8.6。</font></p>\n<h3 id=\"正式开始\"><a href=\"#正式开始\" class=\"headerlink\" title=\"正式开始\"></a>正式开始</h3><h4 id=\"安装vuepress\"><a href=\"#安装vuepress\" class=\"headerlink\" title=\"安装vuepress\"></a>安装vuepress</h4><p>在你的磁盘<font color=\"red\">根目录</font>创建一个文件夹用来存放你的静态网站<br>如：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127193541.png\" alt=\"\"></p>\n<p>进入你创建的文件夹，鼠标右键选择git的命令窗口<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194228.png\" alt=\"\"></p>\n<p>输入全局安装命令</p>\n<pre><code class=\"bash\">npm install -g vuepress</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194600.png\" alt=\"\"><br>输入后回车等待安装完成</p>\n<h4 id=\"验证vuepress\"><a href=\"#验证vuepress\" class=\"headerlink\" title=\"验证vuepress\"></a>验证vuepress</h4><p>在git命令窗口输入</p>\n<pre><code class=\"bash\">vuepress</code></pre>\n<p>如果出现以下内容说明你安装成功了O(∩_∩)O<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127194810.png\" alt=\"\"></p>\n<h3 id=\"创建网站首页\"><a href=\"#创建网站首页\" class=\"headerlink\" title=\"创建网站首页\"></a>创建网站首页</h3><p>在根目录打开git命令窗口<br>执行</p>\n<pre><code class=\"bash\"># 新建一个docs文件夹\nmkdir docs\n# 进入docs文件夹目录\ncd docs/\n# 新建一个 markdown 文件\necho &#39;# Hello VuePress!&#39; &gt; README.md</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127200935.png\" alt=\"\"></p>\n<p>打开README.md文件夹（我这里用的是VSCode），可以看到Hello VuePress!<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201206.png\" alt=\"\"></p>\n<h4 id=\"运行vuepress\"><a href=\"#运行vuepress\" class=\"headerlink\" title=\"运行vuepress\"></a>运行vuepress</h4><p><font color=\"red\">git命令行切换到docs目录</font>执行</p>\n<pre><code class=\"bash\">vuepress dev</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201802.png\" alt=\"\"></p>\n<p>可以看到vuepress开启的端口（默认是8080端口，如果8080端口被占用vuepress就会自动切换到未被占用端口）<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127201834.png\" alt=\"\"><br>浏览器输入地址可以看到<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127202050.png\" alt=\"\"></p>\n<h3 id=\"vuepress配置文件\"><a href=\"#vuepress配置文件\" class=\"headerlink\" title=\"vuepress配置文件\"></a>vuepress配置文件</h3><p>在docs文件夹下执行</p>\n<pre><code class=\"bash\"># 在docs文档目录下创建一个 .vuepress 目录，所有 VuePress 相关的文件都将会被放在这里\nmkdir .vuepress\n# 进入 .vuepress 文件夹\ncd .vuepress/\n# 创建 VuePress 网站配置文件 \ntouch config.js\n# 切换到blog根目录执行\ncd ../..\n# 执行初始化目录\nnpm init -y</code></pre>\n<p>此时项目结构应该是:</p>\n<pre><code>.\n├─ docs\n│  ├─ README.md\n│  └─ .vuepress\n│     └─ config.js\n└─ package.json</code></pre><p>打开config.js文件夹<br>将下面代码粘贴进去</p>\n<pre><code class=\"js\">module.exports = {\n  title: &#39;Hello VuePress&#39;, // 标题\n  description: &#39;Just playing around&#39; // 描述\n}</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127204810.png\" alt=\"\"></p>\n<h4 id=\"运行vuepress看看效果\"><a href=\"#运行vuepress看看效果\" class=\"headerlink\" title=\"运行vuepress看看效果\"></a>运行vuepress看看效果</h4><p>切换到docs目录下<br>执行</p>\n<pre><code class=\"bash\">vuepress dev</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205044.png\" alt=\"\"></p>\n<h3 id=\"配置首页\"><a href=\"#配置首页\" class=\"headerlink\" title=\"配置首页\"></a>配置首页</h3><p>打开docs目录下的README.md文件<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127205731.png\" alt=\"\"><br>将以下内容粘贴进去</p>\n<pre><code class=\"yaml\">---\nhome: true\nheroImage: /hero.png\nheroText: Hero 标题\ntagline: Hero 副标题\nactionText: 快速上手 →\nactionLink: /zh/guide/\nfeatures:\n- title: 简洁至上\n  details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。\n- title: Vue驱动\n  details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。\n- title: 高性能\n  details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。\nfooter: MIT Licensed | Copyright © 2018-present Evan You\n---</code></pre>\n<p>在运行vuepress将看到以下效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127210245.png\" alt=\"\"></p>\n<h4 id=\"了解markdown\"><a href=\"#了解markdown\" class=\"headerlink\" title=\"了解markdown\"></a>了解markdown</h4><p>这里你需要了解以下<a href=\"https://vuepress.vuejs.org/zh/guide/markdown.html#header-anchors\" target=\"_blank\" rel=\"noopener\">markdown扩展</a></p>\n<h3 id=\"首页图片和favicon-png图片\"><a href=\"#首页图片和favicon-png图片\" class=\"headerlink\" title=\"首页图片和favicon.png图片\"></a>首页图片和favicon.png图片</h3><p>进入 .vuepress目录下新建public文件夹<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127211950.png\" alt=\"\"><br>将准备好的两个图标放到public文件夹下面（你可以到<a href=\"https://www.easyicon.net/\" target=\"_blank\" rel=\"noopener\">easyicon</a>找自己喜欢的图标）<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212315.png\" alt=\"\"></p>\n<p>修改docs下面REDEME.md文件<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212442.png\" alt=\"\"></p>\n<p>修改config.js文件</p>\n<pre><code class=\"js\">head: [\n    [&#39;link&#39;, { rel: &#39;icon&#39;, href: &#39;/logo.png&#39; }]\n  ]</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127212839.png\" alt=\"\"></p>\n<p>重新运行vuepress查看效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127213033.png\" alt=\"\"></p>\n<h3 id=\"导航配置\"><a href=\"#导航配置\" class=\"headerlink\" title=\"导航配置\"></a>导航配置</h3><p>在config.js 中增加以下代码</p>\n<pre><code class=\"js\">themeConfig: {\n    sidebarDepth: 2, //最大嵌套深度\n    lastUpdated: &#39;Last Updated&#39;, //显示最后更新时间\n    nav: [\n      //单个导航\n      { text: &#39;首页&#39;, link: &#39;/&#39; }, //内部跳转\n      { text: &#39;关于&#39;, link: &#39;/about/&#39; }, //关于页面\n      { text: &#39;GitHub&#39;, link: &#39;https://github.com/chenxinshinian&#39; }, //外部跳转\n      {\n       //下拉列表\n        text: &#39;语言&#39;,\n        items: [\n          { text: &#39;chinese&#39;, link: &#39;/language/chinese/&#39; },\n          { text: &#39;japanese&#39;, link: &#39;/language/japanese/&#39; }\n        ]\n      },\n      // 下拉列表显示分组\n      {\n        text: &#39;分享&#39;,\n        items: [\n        { \n            text: &#39;索引&#39;, \n            items: [\n            { text: &#39;Java&#39;, link: &#39;/Java/&#39; },\n            { text: &#39;JavaScript&#39;, link: &#39;/JavaScript/&#39; }\n            ] \n        }\n        ]  \n    }\n    ],   \n    sidebar: {\n      &#39;/Java/&#39;: [   \n          &#39;&#39;, // 代表/Java/\n          &#39;java1&#39;, \n          &#39;java2&#39;\n      ],\n      &#39;/JavaScript/&#39;: [   \n        &#39;&#39;, // 代表 /JavaScript/\n        &#39;js1&#39; \n    ]\n  }\n  }</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200127224625.png\" alt=\"\"></p>\n<p>运行vuepress后应该出现效果:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128182950.png\" alt=\"\"><br>这时点击导航栏应该是显示404，这是英文虽然配置了导航但是但是响应的目录还没有创建</p>\n<p>导航配置对应的目录结构:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128184319.png\" alt=\"\"><br><font color=\"red\">注意：每个导航下面都要有一个README.md文件作为导航的首页</font></p>\n<p>其他页面内容<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185345.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185435.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185452.png\" alt=\"\"></p>\n<p>页面效果：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128185602.png\" alt=\"\"></p>\n<p><a href=\"https://vuepress.vuejs.org/zh/theme/default-theme-config.html\" target=\"_blank\" rel=\"noopener\">更多详细配置</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>教程部署在github pages上面<br>登录<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>创建一个仓库<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193725.png\" alt=\"\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128193949.png\" alt=\"\"></p>\n<p>格式为<code>&lt;username&gt;.github.io</code><br>最后点击最小面的绿色按钮创建</p>\n<p>github的操作就结束了<br>接下来正在你的网站根目录创建<br>deploy.sh文件,将下面的内容粘贴进去<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201345.png\" alt=\"\"></p>\n<pre><code class=\"yaml\">#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run docs:build\n\n# 进入生成的文件夹\ncd docs/.vuepress/dist\n\n# 如果是发布到自定义域名\n# echo &#39;www.example.com&#39; &gt; CNAME\n\ngit init\ngit add -A\ngit commit -m &#39;deploy&#39;\n\n# 如果发布到 https://&lt;USERNAME&gt;.github.io\n git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master\n\n\n# 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;\n# git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages\n\ncd -</code></pre>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194623.png\" alt=\"\"></p>\n<p>保存后双击运行deploy.sh文件<br>然后 浏览器输入<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194746.png\" alt=\"\"><br>你就部署成功了</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"增加返回顶部效果\"><a href=\"#增加返回顶部效果\" class=\"headerlink\" title=\"增加返回顶部效果\"></a>增加返回顶部效果</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128194852.png\" alt=\"\"><br>步骤过于简单根据<a href=\"https://vuepress.vuejs.org/zh/plugin/official/plugin-back-to-top.html\" target=\"_blank\" rel=\"noopener\">官方提示</a>安装插件就可以了</p>\n<h4 id=\"添加评论功能\"><a href=\"#添加评论功能\" class=\"headerlink\" title=\"添加评论功能\"></a>添加评论功能</h4><h5 id=\"安装valine\"><a href=\"#安装valine\" class=\"headerlink\" title=\"安装valine\"></a>安装valine</h5><p>在blog目录下打开git命令窗口，依次执行下面两条命令</p>\n<pre><code class=\"bash\"># Install leancloud&#39;s js-sdk\nnpm install leancloud-storage --save\n# Install valine\nnpm install valine --save</code></pre>\n<p>接下来在.vuepress文件夹下创建components文件夹，再到components文件夹下面创建Valine.vue文件</p>\n<p>打开Valine.vue文件将下面内容粘贴进去</p>\n<pre><code class=\"js\">&lt;template&gt;\n  &lt;div id=&quot;vcomments&quot;&gt;&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &#39;Valine&#39;,\n  mounted: function(){\n    // require window \n    const Valine = require(&#39;valine&#39;);\n    if (typeof window !== &#39;undefined&#39;) {\n      this.window = window\n      window.AV = require(&#39;leancloud-storage&#39;)\n\n    }\n\n    new Valine({\n      el: &#39;#vcomments&#39; ,\n      appId: &#39;&#39;,// 这里填你的appId\n      appKey: &#39;&#39;, // 这里填你的appKey\n      notify:false, \n      verify:false, \n      avatar:&#39;mm&#39;, \n      placeholder: &#39;说点什么...&#39; \n    });\n  },\n}\n&lt;/script&gt;</code></pre>\n<p>接下来登录或者在注册<a href=\"https://www.leancloud.cn/\" target=\"_blank\" rel=\"noopener\">leancloud</a><br>之后进入控制台，点击左下角创建应用<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200204.png\" alt=\"\"><br>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200338.png\" alt=\"\"></p>\n<p>添加你的域名<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200722.png\" alt=\"\"></p>\n<p>将你的app id 和app key粘贴到Valine.vue文件里的对应位置<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200456.png\" alt=\"\"></p>\n<p>然后在你想加入评论的页面加上</p>\n<p><code>&lt;Valine&gt;&lt;/Valine&gt;</code></p>\n<p>如我在首页README.md文件中添加<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128200633.png\" alt=\"\"></p>\n<p>然后双击deploy.sh文件，将他部署到github</p>\n<p>效果<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/tupian20200123/20200128201034.png\" alt=\"\"></p>\n<p><font color=\"red\">如果没有效果请清楚浏览器缓存或者更换浏览器访问</font></p>\n"},{"title":"数据库物理设计","date":"2020-05-11T07:22:37.000Z","_content":"\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n#### 物理设计要做什么\n1. 选择合适的数据库管理系统\n2. 定义数据库、表及字段的命名规范。\n3. 根据所选的DBMS系统选择合适的字段类型。\n4. 反范式化\n指的是在逻辑设计中已经确立好的非常规范的数据库结构模型，模型没有任何数据冗余，那么在物理设计中可能会为了读效率的考虑会在表中增加一些冗余来达到效率的提升，换句话说就是用空间换时间\n选择合适的DBMS系统\n\n#### 选择合适的DBMS系统\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509140730.png\"></img>\n首先来说要考虑成本问题，对于Oracle和SQLServer来说它是属于商业数据库，这就不得不考虑版权的问题，从SQLServer2012之后就使用了和Oracle相同的基于服务器的核数来进行收费的策略，由于我们目前服务器的核数都比较多，在这种情况下我们使用商业数据库我们的成本是不得不去考虑的一个问题。\n而MYSQL和PGSQL是常见的开源数据库，而对于开源数据库来说，只要我们在使用的时候是符合开源协议的，那么就不需要支付版权费用。\n除了版权之外，我们还要对功能进行考虑，对于Oracle来说是属于业界口碑比较好的数据库系统，性能是非常高的，比较适合比较大的事物操作，因为在Oracle中它的事务成本是非常低的。\n除了功能上我们使用的操作系统上也可以进行选择，像SQRServer数据库因为是微软的产品，所以它是只支持windows上面运行的。而Oracle、MYsql和Pgsql呢是可以同时运行在windows下和linux下的。\n除了这些我们还要考虑开发使用的语言，如果在开发中使用的是.net这种语言，那么SQLServer对.net配合是更好的选择。\n之后和还要考虑应用场景，对于目前来说mysql和pgsql这种开源数据库是比较常用于互联网项目，而Oracle和SQLServer更适用于企业级项目，比如说一些金融类的公司可能会更喜欢Oracle，因为它相对来说扩展比较容易，也相对也更加安全。SQLServer更倾向于一些中小企业的企业级数据库，比如说一些ERP系统。\n\n#### Mysql常用的存储引擎\n由于MySQL是一种开源型的数据库，所以它的存储也非常开放，只要符合mysql的存储协议，那么任何场上都可以实现自己的存储引擎。\n\nmysql的常用存储引擎：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509143259.png\"></img>\n\nMyISAM是MySQL5.5以前默认使用的存储引擎，这种存储引擎的特点是不支持事务，但是他的读写效率相对来说更高，由于它不支持事务，所以它对一些事务处理上的开销也就更少，这些是它读写比较高效的原因，但是由于它不支持事务，这也面临着它在写的时候要对全表进行加锁，也就是说写并发非常大就有可能造成锁阻塞，所以它的使用场景是如果写很少读很多的时候可以使用这种引擎\n\nMRG_MyISAMD这种存储引擎是和MyISAM存储引擎有一定的关系的，它是可以把多个结构相同的MyISAM表合并成一个表进行处理，这比较像视图或者分区的一种功能，但是由于是基于MyISAM的所以同样不支持事务，并且不再支持行级锁存储引擎。主要应用于分段归档和数据仓库这种需要把多个表变成一个表进行逻辑处理的可以使用这种存储引擎，因为它的写相对来说是非常少的，可能是基于某一时间去写，但大多数场景都是在读。并且这种存储引擎也不适用于那种全局查找过多的场景，和分区表一样如果全局查找太多就涉及到要在在多个分区中或者表中浸信会个扫描，这样效率会更低，如果全局查找太多也不适用于这种存储引擎\n\ninnodb是mysql5.5之后mysql默认使用的存储引擎，也是目前在大多数互联网应用中建立大家使用的引擎，首先这种引擎支持事务，并且支持多版本并法的行级锁，也就是说比较类似与Oracle这种事务特点，主要应用场景就是需要用到事务处理的场景，并且禁用场景目前没有，也就是大多数场景都可以用innodb引擎，由于是行级锁所以读写也是非常高效的，和MyISAM不同点是它不会有表级锁的存在，基本上都是对于行级锁进行处理，因此阻塞会更少\n\nArchive的特点是也是行级锁，但是它支持insert和select操作，不支持update操作，这种存储引擎更倾向于日志的这种场景,因为日志只需要添加而并不需要更新，这种时候就可以使用在这种存储引擎，这种存储引擎的特点是它的存储需要的容量相对来说更小，也就是说innodb来进行存储新需要100m，而Archive可能只需要几十m或者十几m空间就能完成相同数量级的存储\n\nNdb cluster这种存储引擎是mysql集群所使用的存储引擎，这种存储引擎的特点是，首先支持事务，并且也是行级锁，主要应用场景是要使用mysql集群的情况下使用NDB存储引擎，由于mysql集群是内存型的一种集群，大部分数据要放到内存中，所以在大多数情况下如果我们数据量比较大超过内存的大小，这种情况下就不太适用于NDB集群，也就不可能再使用NDB集群的存储引擎\n\n#### 数据库表及字段的命名规范\n所有对象命名应该遵循下述规则：\n1）可读性原则\n使用大写和小写来格式化的库对象名字以获得良好的可读性。\n例如：使用CustAddress而不是custaddress来提高可读性。（这里要注意有些DBMS系统对表名的大小写是敏感的）\n\n2)表意性原则\n对象的名字应该能够描述它所标识的对象。\n例如，对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程，存储过程名称应该能够体现存储过程的功能。\n\n3)长名原则\n尽可能少使用或者不使用缩写，适用于数据库(DATABASE)名之外的任一对象。\n\n#### 字段类型的选择原则\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510190125.png\"></img>\n比如生日这个字段至少可以使用四种类型进行存储\n第一种char类型，1978-03-01大概需要十个字节就够了\n第二种使用varchar变长字段来进行存储，就varchar存储的好处是可以存1978-03-01 或者 19780301 都是可以的，因为字符串长度不一样所使用的存储空间也是不一样的\n第三种最常见的是使用日期时间类型来进行存储\n最后一种是使用unix时间辍来进行存储，unix时间辍是一个整型，数字代表的意思也是978-03-01，它是自1971-01-01 00:00:00 到现在的秒数\n\n列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，最后是字符串类型。对于相同级别的数据类型，应该优先选择则占用空间小的数据类型。\n\n比如上面例子就应该优先选择int类型其次是datetime在其次是char和varchar\n\n以mysql为例，各数据类型占用的存储空间大小：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510191946.png\"></img>\n以上选择原则在主要是从下面两个角度考虑：\n1） 在对数据进行比较（查询条件、JSON条件及排序）操作时：同样的数据，字符处理往往比数字处理慢。\n这是因为字符串类型的处理是与我们选择的排序规则有关的，也就是说它要去查询我们当前所使用排序规则的字典顺序来确定字符串的比较和排序顺序，而数字的二进制类型不需要参考这种数据字典，因此在进行数据的排序和比较过程中使用二进制或者int类型的效率要高于字符串类型。\n\n2）在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。\n因为不同的关系型数据库页的大小是不一样的，如SQLServer是8k一页，而mysql在innodb中默认是16k字节一页，而列的长度越小，我们在一个页中所能存储的数据量就越多，这样再加载相同的数据的时候如果我们的列越小我们加载的页数越小，这样IO的性能就会提高，现在数据库最大瓶颈并不是CPU，而是磁盘IO瓶颈，也就是说如果我们优化了IO瓶颈就是优化了我们数据库的性能\n\n#### char与varchar如何选择\n原则：\n1)如果列中要存储的数据长度差不多是一致的，则应该考虑用char;否则应该考虑用varchar。\n\n2）如果列中的最大数据长度小于50Byte，则一般也考虑用char。\n（当然，如果这个列很少用，则基于节省空间和减少IO的考虑，还是可以选择用varchar）\n\n3）一般不宜定义大于50Byte的char类型列。\n\n例如身份证号或者说电话这种字符串，它的长度基本上都是一致的，那么这个时候就可以选择char来进行存储，而不是varchar。如果内容最大的数据长度小于50个字节也一般可以使用char来存储，因为每一个varchar的列除了存储数据所需要的数据长度之外还需要额外的在字节来存储变长数据的字典，而在检索数据的时候也要确定数据存取的起始位置，所以长度太小就不适合用varchar来进行存储。\n如果我们所存储的这个数据是大于50个字节的那么就最好使用varchar，在mysql中不同的字符编码占用的字节是不一样的，比如UTF-8每个字符占用三个字节，也就是说50/3，也就是字符串大于15个字符就要考虑使用varchar而不是char\n\n#### decimal和float如何选择\n原则：\n\n1) decimal用于存储精确数据，而float只能用于存储非精准数据。故精确数据只能选择decimal类型。\n\n2) 由于float的存储空间开销一般比decimal小（精确到7位小数只需要4个字节，而精确到15位小数只需要8字节）故非精确数据优先选择float类型\n\n#### 时间类型如何存储\n1）使用int类存储时间字段的优缺点\n优点：字段长度比datetime小\n缺点：使用不方便，要进行函数转换。\n限制：只能存储2038-1-19 11：14：07及2^32为2147483648\n\n如果存储订单的日期那么最好使用datetime，因为要时常要进行时间范围判断查询来判断订单是否到期\n\n2）需要存储的时间粒度\n年 月 日 小时 分 秒 周\n\n比如之存储到年那么可以用year，year之战用一个字节\n\n如何选择主键\n1）区分业务主键和数据库主键\n业务主键用于标识业务数据，进行表与表之间的关联；\n数据库主键为了优化数据库存储（innodb会生成6个字节的隐含主键）\n\n一些情况下业务主键和数据库主键是相同的，但是在一些情况下业务主键和数据库主键又是不同的，为什么要定义主键呢？因为在一些数据库的表中，比如innodb是要求每个表中必须要有一个主键的，因为它是按照主键的顺序进行逻辑存储的，如果没有主键的话innodb会优先选择具有所有非空列的唯一索引来进行主键，因为没有定义主键唯一索引的话innodb会生成6个字节的隐含列来作为主键，所以使用innodb的话最好人为的去定义一些主键，而不要使用隐含的主键\n\n2）根据数据库的类型，考虑主键是否要顺序增长\n有些数据库是按主键的顺序逻辑存储的\n\n因为innodb是按照主键的逻辑来进行存储，那么最好是需要主键是可以顺序增长的，这样的话它就不会进行数据的逻辑迁移，对我们的IO很有好处，\n\n3）主键的字段类型所占空间要尽可能的小\n对于使用聚集索引方式存储的表，每个索引后都会附加主键信息。\n\n另外因为数据库都是按页来存储数据的，那么主键也要尽可能的小，因为主键越小页中所存储的主键的数量就越多，这样在查询的时候就会装载更少的数据，这样也能对IO性能带来一些好处\n\n#### 避免使用外键约束\n1）降低数据导入的效率\n\n2）增加维护的成本\n\n3）虽然不建议使用外键约束，但是相关联的列上一定要建立索引\n\n有时经常会听到说外键是用来保持数据完整性的一种方式，但是在这种高并法的互联网网站中如果使用外键会给我们带来一些负面的影响。首先对于数据的写入操作的时候，如果我们使用了外键，那么每写入一条数据都会去查询是否符合外键约束，如果符合才能插入进数据如果不符合就会被拒绝掉，那么检查这个外键约束是否符合的过程是十分的耗时的，可能一般情况下感觉不到，但是在高并法的情况下我们就能深有体会。所以一般建议上在高并法的互联网企业最好不要使用外键约束来进行数据库一致性的保证。但是不使用外键并不意味着我们并不会在外键上建立索引，因为所谓的外键约束它是一种约束，而索引是为了提高查询效率而存在的，就是如果我们进行表关联，这样虽然我们没有建立外键约束，但是我们同样要在关联键上建立索引。\n\n#### 避免使用触发器\n1）降低数据导入的效率。\n\n2）可能会出现意想不到的数据异样。\n\n3）使用业务逻辑变得复杂。\n\n#### 关于预留字段\n1） 无法准确的知道预留字段的类型。\n\n2） 无法准确的知道预留字段中所存储的内容。\n\n3） 后期维护预留字段所要的成本，同增加一个字段所需要的成本是相同的。\n\n4） 严禁使用预留字段。\n\n预留字段时你不可能具体字段的类型，并且字段名不会见名思意特别准确，另外后期给列重命名，对于数据库来说就是等于新建了一个列\n\n#### 什么是反范式化\n反范式化是针对范式化而言的，在在前面介绍了数据库设计的第三范式，所谓的反范式化就是为了性能和读取效率的考虑而适当的对第三范式的要求进行违反，而允许存在少量的数据冗余，换句话说反范式化就是使用空间来换取时间。\n\n例子：\n\n符合范式化的设计：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214209.png\"></img>\n如果要查询订单信息：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214332.png\"></img>\n这条sql关联了三张表并且还进行了sum操作才汇总出各项订单信息。\n可以看出表关联还是非常多的，并且进行了汇总操作所以效率也不会太高\n\n如果要查出订单详情:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124001.png\"></img>\n反范式化操作：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124059.png\"></img>\n这样虽然增加了一部分冗余数据但是查询变得更加简单明了并且查询效率更高,只需要订单表和商品表就能查出原来需要四张表的订单详情\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124239.png\"></img>\n如果要查询订单信息就更简单了：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124536.png\"></img>\n在写入的时候多占用了一些空间，但是在读取的时候可以提效率。在互联网项目中读写比例一般是三比一或者四比一的关系，所以读远远高于写，所以如果写的时候增加了一些数据冗余但是能大大提高读的效率的话还是比较化算的\n\n#### 为什么反范式化\n1）减少表的关联数量\n2）增加数据的读取效率\n3）反范式化一定要适度","source":"_posts/数据库物理设计.md","raw":"---\ntitle: 数据库物理设计\ndate: 2020-05-11 15:22:37\ncategories: 数据库\ntags:\n    - 数据库设计\n---\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n#### 物理设计要做什么\n1. 选择合适的数据库管理系统\n2. 定义数据库、表及字段的命名规范。\n3. 根据所选的DBMS系统选择合适的字段类型。\n4. 反范式化\n指的是在逻辑设计中已经确立好的非常规范的数据库结构模型，模型没有任何数据冗余，那么在物理设计中可能会为了读效率的考虑会在表中增加一些冗余来达到效率的提升，换句话说就是用空间换时间\n选择合适的DBMS系统\n\n#### 选择合适的DBMS系统\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509140730.png\"></img>\n首先来说要考虑成本问题，对于Oracle和SQLServer来说它是属于商业数据库，这就不得不考虑版权的问题，从SQLServer2012之后就使用了和Oracle相同的基于服务器的核数来进行收费的策略，由于我们目前服务器的核数都比较多，在这种情况下我们使用商业数据库我们的成本是不得不去考虑的一个问题。\n而MYSQL和PGSQL是常见的开源数据库，而对于开源数据库来说，只要我们在使用的时候是符合开源协议的，那么就不需要支付版权费用。\n除了版权之外，我们还要对功能进行考虑，对于Oracle来说是属于业界口碑比较好的数据库系统，性能是非常高的，比较适合比较大的事物操作，因为在Oracle中它的事务成本是非常低的。\n除了功能上我们使用的操作系统上也可以进行选择，像SQRServer数据库因为是微软的产品，所以它是只支持windows上面运行的。而Oracle、MYsql和Pgsql呢是可以同时运行在windows下和linux下的。\n除了这些我们还要考虑开发使用的语言，如果在开发中使用的是.net这种语言，那么SQLServer对.net配合是更好的选择。\n之后和还要考虑应用场景，对于目前来说mysql和pgsql这种开源数据库是比较常用于互联网项目，而Oracle和SQLServer更适用于企业级项目，比如说一些金融类的公司可能会更喜欢Oracle，因为它相对来说扩展比较容易，也相对也更加安全。SQLServer更倾向于一些中小企业的企业级数据库，比如说一些ERP系统。\n\n#### Mysql常用的存储引擎\n由于MySQL是一种开源型的数据库，所以它的存储也非常开放，只要符合mysql的存储协议，那么任何场上都可以实现自己的存储引擎。\n\nmysql的常用存储引擎：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509143259.png\"></img>\n\nMyISAM是MySQL5.5以前默认使用的存储引擎，这种存储引擎的特点是不支持事务，但是他的读写效率相对来说更高，由于它不支持事务，所以它对一些事务处理上的开销也就更少，这些是它读写比较高效的原因，但是由于它不支持事务，这也面临着它在写的时候要对全表进行加锁，也就是说写并发非常大就有可能造成锁阻塞，所以它的使用场景是如果写很少读很多的时候可以使用这种引擎\n\nMRG_MyISAMD这种存储引擎是和MyISAM存储引擎有一定的关系的，它是可以把多个结构相同的MyISAM表合并成一个表进行处理，这比较像视图或者分区的一种功能，但是由于是基于MyISAM的所以同样不支持事务，并且不再支持行级锁存储引擎。主要应用于分段归档和数据仓库这种需要把多个表变成一个表进行逻辑处理的可以使用这种存储引擎，因为它的写相对来说是非常少的，可能是基于某一时间去写，但大多数场景都是在读。并且这种存储引擎也不适用于那种全局查找过多的场景，和分区表一样如果全局查找太多就涉及到要在在多个分区中或者表中浸信会个扫描，这样效率会更低，如果全局查找太多也不适用于这种存储引擎\n\ninnodb是mysql5.5之后mysql默认使用的存储引擎，也是目前在大多数互联网应用中建立大家使用的引擎，首先这种引擎支持事务，并且支持多版本并法的行级锁，也就是说比较类似与Oracle这种事务特点，主要应用场景就是需要用到事务处理的场景，并且禁用场景目前没有，也就是大多数场景都可以用innodb引擎，由于是行级锁所以读写也是非常高效的，和MyISAM不同点是它不会有表级锁的存在，基本上都是对于行级锁进行处理，因此阻塞会更少\n\nArchive的特点是也是行级锁，但是它支持insert和select操作，不支持update操作，这种存储引擎更倾向于日志的这种场景,因为日志只需要添加而并不需要更新，这种时候就可以使用在这种存储引擎，这种存储引擎的特点是它的存储需要的容量相对来说更小，也就是说innodb来进行存储新需要100m，而Archive可能只需要几十m或者十几m空间就能完成相同数量级的存储\n\nNdb cluster这种存储引擎是mysql集群所使用的存储引擎，这种存储引擎的特点是，首先支持事务，并且也是行级锁，主要应用场景是要使用mysql集群的情况下使用NDB存储引擎，由于mysql集群是内存型的一种集群，大部分数据要放到内存中，所以在大多数情况下如果我们数据量比较大超过内存的大小，这种情况下就不太适用于NDB集群，也就不可能再使用NDB集群的存储引擎\n\n#### 数据库表及字段的命名规范\n所有对象命名应该遵循下述规则：\n1）可读性原则\n使用大写和小写来格式化的库对象名字以获得良好的可读性。\n例如：使用CustAddress而不是custaddress来提高可读性。（这里要注意有些DBMS系统对表名的大小写是敏感的）\n\n2)表意性原则\n对象的名字应该能够描述它所标识的对象。\n例如，对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程，存储过程名称应该能够体现存储过程的功能。\n\n3)长名原则\n尽可能少使用或者不使用缩写，适用于数据库(DATABASE)名之外的任一对象。\n\n#### 字段类型的选择原则\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510190125.png\"></img>\n比如生日这个字段至少可以使用四种类型进行存储\n第一种char类型，1978-03-01大概需要十个字节就够了\n第二种使用varchar变长字段来进行存储，就varchar存储的好处是可以存1978-03-01 或者 19780301 都是可以的，因为字符串长度不一样所使用的存储空间也是不一样的\n第三种最常见的是使用日期时间类型来进行存储\n最后一种是使用unix时间辍来进行存储，unix时间辍是一个整型，数字代表的意思也是978-03-01，它是自1971-01-01 00:00:00 到现在的秒数\n\n列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，最后是字符串类型。对于相同级别的数据类型，应该优先选择则占用空间小的数据类型。\n\n比如上面例子就应该优先选择int类型其次是datetime在其次是char和varchar\n\n以mysql为例，各数据类型占用的存储空间大小：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510191946.png\"></img>\n以上选择原则在主要是从下面两个角度考虑：\n1） 在对数据进行比较（查询条件、JSON条件及排序）操作时：同样的数据，字符处理往往比数字处理慢。\n这是因为字符串类型的处理是与我们选择的排序规则有关的，也就是说它要去查询我们当前所使用排序规则的字典顺序来确定字符串的比较和排序顺序，而数字的二进制类型不需要参考这种数据字典，因此在进行数据的排序和比较过程中使用二进制或者int类型的效率要高于字符串类型。\n\n2）在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。\n因为不同的关系型数据库页的大小是不一样的，如SQLServer是8k一页，而mysql在innodb中默认是16k字节一页，而列的长度越小，我们在一个页中所能存储的数据量就越多，这样再加载相同的数据的时候如果我们的列越小我们加载的页数越小，这样IO的性能就会提高，现在数据库最大瓶颈并不是CPU，而是磁盘IO瓶颈，也就是说如果我们优化了IO瓶颈就是优化了我们数据库的性能\n\n#### char与varchar如何选择\n原则：\n1)如果列中要存储的数据长度差不多是一致的，则应该考虑用char;否则应该考虑用varchar。\n\n2）如果列中的最大数据长度小于50Byte，则一般也考虑用char。\n（当然，如果这个列很少用，则基于节省空间和减少IO的考虑，还是可以选择用varchar）\n\n3）一般不宜定义大于50Byte的char类型列。\n\n例如身份证号或者说电话这种字符串，它的长度基本上都是一致的，那么这个时候就可以选择char来进行存储，而不是varchar。如果内容最大的数据长度小于50个字节也一般可以使用char来存储，因为每一个varchar的列除了存储数据所需要的数据长度之外还需要额外的在字节来存储变长数据的字典，而在检索数据的时候也要确定数据存取的起始位置，所以长度太小就不适合用varchar来进行存储。\n如果我们所存储的这个数据是大于50个字节的那么就最好使用varchar，在mysql中不同的字符编码占用的字节是不一样的，比如UTF-8每个字符占用三个字节，也就是说50/3，也就是字符串大于15个字符就要考虑使用varchar而不是char\n\n#### decimal和float如何选择\n原则：\n\n1) decimal用于存储精确数据，而float只能用于存储非精准数据。故精确数据只能选择decimal类型。\n\n2) 由于float的存储空间开销一般比decimal小（精确到7位小数只需要4个字节，而精确到15位小数只需要8字节）故非精确数据优先选择float类型\n\n#### 时间类型如何存储\n1）使用int类存储时间字段的优缺点\n优点：字段长度比datetime小\n缺点：使用不方便，要进行函数转换。\n限制：只能存储2038-1-19 11：14：07及2^32为2147483648\n\n如果存储订单的日期那么最好使用datetime，因为要时常要进行时间范围判断查询来判断订单是否到期\n\n2）需要存储的时间粒度\n年 月 日 小时 分 秒 周\n\n比如之存储到年那么可以用year，year之战用一个字节\n\n如何选择主键\n1）区分业务主键和数据库主键\n业务主键用于标识业务数据，进行表与表之间的关联；\n数据库主键为了优化数据库存储（innodb会生成6个字节的隐含主键）\n\n一些情况下业务主键和数据库主键是相同的，但是在一些情况下业务主键和数据库主键又是不同的，为什么要定义主键呢？因为在一些数据库的表中，比如innodb是要求每个表中必须要有一个主键的，因为它是按照主键的顺序进行逻辑存储的，如果没有主键的话innodb会优先选择具有所有非空列的唯一索引来进行主键，因为没有定义主键唯一索引的话innodb会生成6个字节的隐含列来作为主键，所以使用innodb的话最好人为的去定义一些主键，而不要使用隐含的主键\n\n2）根据数据库的类型，考虑主键是否要顺序增长\n有些数据库是按主键的顺序逻辑存储的\n\n因为innodb是按照主键的逻辑来进行存储，那么最好是需要主键是可以顺序增长的，这样的话它就不会进行数据的逻辑迁移，对我们的IO很有好处，\n\n3）主键的字段类型所占空间要尽可能的小\n对于使用聚集索引方式存储的表，每个索引后都会附加主键信息。\n\n另外因为数据库都是按页来存储数据的，那么主键也要尽可能的小，因为主键越小页中所存储的主键的数量就越多，这样在查询的时候就会装载更少的数据，这样也能对IO性能带来一些好处\n\n#### 避免使用外键约束\n1）降低数据导入的效率\n\n2）增加维护的成本\n\n3）虽然不建议使用外键约束，但是相关联的列上一定要建立索引\n\n有时经常会听到说外键是用来保持数据完整性的一种方式，但是在这种高并法的互联网网站中如果使用外键会给我们带来一些负面的影响。首先对于数据的写入操作的时候，如果我们使用了外键，那么每写入一条数据都会去查询是否符合外键约束，如果符合才能插入进数据如果不符合就会被拒绝掉，那么检查这个外键约束是否符合的过程是十分的耗时的，可能一般情况下感觉不到，但是在高并法的情况下我们就能深有体会。所以一般建议上在高并法的互联网企业最好不要使用外键约束来进行数据库一致性的保证。但是不使用外键并不意味着我们并不会在外键上建立索引，因为所谓的外键约束它是一种约束，而索引是为了提高查询效率而存在的，就是如果我们进行表关联，这样虽然我们没有建立外键约束，但是我们同样要在关联键上建立索引。\n\n#### 避免使用触发器\n1）降低数据导入的效率。\n\n2）可能会出现意想不到的数据异样。\n\n3）使用业务逻辑变得复杂。\n\n#### 关于预留字段\n1） 无法准确的知道预留字段的类型。\n\n2） 无法准确的知道预留字段中所存储的内容。\n\n3） 后期维护预留字段所要的成本，同增加一个字段所需要的成本是相同的。\n\n4） 严禁使用预留字段。\n\n预留字段时你不可能具体字段的类型，并且字段名不会见名思意特别准确，另外后期给列重命名，对于数据库来说就是等于新建了一个列\n\n#### 什么是反范式化\n反范式化是针对范式化而言的，在在前面介绍了数据库设计的第三范式，所谓的反范式化就是为了性能和读取效率的考虑而适当的对第三范式的要求进行违反，而允许存在少量的数据冗余，换句话说反范式化就是使用空间来换取时间。\n\n例子：\n\n符合范式化的设计：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214209.png\"></img>\n如果要查询订单信息：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214332.png\"></img>\n这条sql关联了三张表并且还进行了sum操作才汇总出各项订单信息。\n可以看出表关联还是非常多的，并且进行了汇总操作所以效率也不会太高\n\n如果要查出订单详情:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124001.png\"></img>\n反范式化操作：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124059.png\"></img>\n这样虽然增加了一部分冗余数据但是查询变得更加简单明了并且查询效率更高,只需要订单表和商品表就能查出原来需要四张表的订单详情\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124239.png\"></img>\n如果要查询订单信息就更简单了：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124536.png\"></img>\n在写入的时候多占用了一些空间，但是在读取的时候可以提效率。在互联网项目中读写比例一般是三比一或者四比一的关系，所以读远远高于写，所以如果写的时候增加了一些数据冗余但是能大大提高读的效率的话还是比较化算的\n\n#### 为什么反范式化\n1）减少表的关联数量\n2）增加数据的读取效率\n3）反范式化一定要适度","slug":"数据库物理设计","published":1,"updated":"2020-05-17T09:22:34.935Z","_id":"ckaaqos9p0000wcjxfkji8ann","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"物理设计要做什么\"><a href=\"#物理设计要做什么\" class=\"headerlink\" title=\"物理设计要做什么\"></a>物理设计要做什么</h4><ol>\n<li>选择合适的数据库管理系统</li>\n<li>定义数据库、表及字段的命名规范。</li>\n<li>根据所选的DBMS系统选择合适的字段类型。</li>\n<li>反范式化<br>指的是在逻辑设计中已经确立好的非常规范的数据库结构模型，模型没有任何数据冗余，那么在物理设计中可能会为了读效率的考虑会在表中增加一些冗余来达到效率的提升，换句话说就是用空间换时间<br>选择合适的DBMS系统</li>\n</ol>\n<h4 id=\"选择合适的DBMS系统\"><a href=\"#选择合适的DBMS系统\" class=\"headerlink\" title=\"选择合适的DBMS系统\"></a>选择合适的DBMS系统</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509140730.png\"><br>首先来说要考虑成本问题，对于Oracle和SQLServer来说它是属于商业数据库，这就不得不考虑版权的问题，从SQLServer2012之后就使用了和Oracle相同的基于服务器的核数来进行收费的策略，由于我们目前服务器的核数都比较多，在这种情况下我们使用商业数据库我们的成本是不得不去考虑的一个问题。<br>而MYSQL和PGSQL是常见的开源数据库，而对于开源数据库来说，只要我们在使用的时候是符合开源协议的，那么就不需要支付版权费用。<br>除了版权之外，我们还要对功能进行考虑，对于Oracle来说是属于业界口碑比较好的数据库系统，性能是非常高的，比较适合比较大的事物操作，因为在Oracle中它的事务成本是非常低的。<br>除了功能上我们使用的操作系统上也可以进行选择，像SQRServer数据库因为是微软的产品，所以它是只支持windows上面运行的。而Oracle、MYsql和Pgsql呢是可以同时运行在windows下和linux下的。<br>除了这些我们还要考虑开发使用的语言，如果在开发中使用的是.net这种语言，那么SQLServer对.net配合是更好的选择。<br>之后和还要考虑应用场景，对于目前来说mysql和pgsql这种开源数据库是比较常用于互联网项目，而Oracle和SQLServer更适用于企业级项目，比如说一些金融类的公司可能会更喜欢Oracle，因为它相对来说扩展比较容易，也相对也更加安全。SQLServer更倾向于一些中小企业的企业级数据库，比如说一些ERP系统。</p>\n<h4 id=\"Mysql常用的存储引擎\"><a href=\"#Mysql常用的存储引擎\" class=\"headerlink\" title=\"Mysql常用的存储引擎\"></a>Mysql常用的存储引擎</h4><p>由于MySQL是一种开源型的数据库，所以它的存储也非常开放，只要符合mysql的存储协议，那么任何场上都可以实现自己的存储引擎。</p>\n<p>mysql的常用存储引擎：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509143259.png\"></p>\n<p>MyISAM是MySQL5.5以前默认使用的存储引擎，这种存储引擎的特点是不支持事务，但是他的读写效率相对来说更高，由于它不支持事务，所以它对一些事务处理上的开销也就更少，这些是它读写比较高效的原因，但是由于它不支持事务，这也面临着它在写的时候要对全表进行加锁，也就是说写并发非常大就有可能造成锁阻塞，所以它的使用场景是如果写很少读很多的时候可以使用这种引擎</p>\n<p>MRG_MyISAMD这种存储引擎是和MyISAM存储引擎有一定的关系的，它是可以把多个结构相同的MyISAM表合并成一个表进行处理，这比较像视图或者分区的一种功能，但是由于是基于MyISAM的所以同样不支持事务，并且不再支持行级锁存储引擎。主要应用于分段归档和数据仓库这种需要把多个表变成一个表进行逻辑处理的可以使用这种存储引擎，因为它的写相对来说是非常少的，可能是基于某一时间去写，但大多数场景都是在读。并且这种存储引擎也不适用于那种全局查找过多的场景，和分区表一样如果全局查找太多就涉及到要在在多个分区中或者表中浸信会个扫描，这样效率会更低，如果全局查找太多也不适用于这种存储引擎</p>\n<p>innodb是mysql5.5之后mysql默认使用的存储引擎，也是目前在大多数互联网应用中建立大家使用的引擎，首先这种引擎支持事务，并且支持多版本并法的行级锁，也就是说比较类似与Oracle这种事务特点，主要应用场景就是需要用到事务处理的场景，并且禁用场景目前没有，也就是大多数场景都可以用innodb引擎，由于是行级锁所以读写也是非常高效的，和MyISAM不同点是它不会有表级锁的存在，基本上都是对于行级锁进行处理，因此阻塞会更少</p>\n<p>Archive的特点是也是行级锁，但是它支持insert和select操作，不支持update操作，这种存储引擎更倾向于日志的这种场景,因为日志只需要添加而并不需要更新，这种时候就可以使用在这种存储引擎，这种存储引擎的特点是它的存储需要的容量相对来说更小，也就是说innodb来进行存储新需要100m，而Archive可能只需要几十m或者十几m空间就能完成相同数量级的存储</p>\n<p>Ndb cluster这种存储引擎是mysql集群所使用的存储引擎，这种存储引擎的特点是，首先支持事务，并且也是行级锁，主要应用场景是要使用mysql集群的情况下使用NDB存储引擎，由于mysql集群是内存型的一种集群，大部分数据要放到内存中，所以在大多数情况下如果我们数据量比较大超过内存的大小，这种情况下就不太适用于NDB集群，也就不可能再使用NDB集群的存储引擎</p>\n<h4 id=\"数据库表及字段的命名规范\"><a href=\"#数据库表及字段的命名规范\" class=\"headerlink\" title=\"数据库表及字段的命名规范\"></a>数据库表及字段的命名规范</h4><p>所有对象命名应该遵循下述规则：<br>1）可读性原则<br>使用大写和小写来格式化的库对象名字以获得良好的可读性。<br>例如：使用CustAddress而不是custaddress来提高可读性。（这里要注意有些DBMS系统对表名的大小写是敏感的）</p>\n<p>2)表意性原则<br>对象的名字应该能够描述它所标识的对象。<br>例如，对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程，存储过程名称应该能够体现存储过程的功能。</p>\n<p>3)长名原则<br>尽可能少使用或者不使用缩写，适用于数据库(DATABASE)名之外的任一对象。</p>\n<h4 id=\"字段类型的选择原则\"><a href=\"#字段类型的选择原则\" class=\"headerlink\" title=\"字段类型的选择原则\"></a>字段类型的选择原则</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510190125.png\"><br>比如生日这个字段至少可以使用四种类型进行存储<br>第一种char类型，1978-03-01大概需要十个字节就够了<br>第二种使用varchar变长字段来进行存储，就varchar存储的好处是可以存1978-03-01 或者 19780301 都是可以的，因为字符串长度不一样所使用的存储空间也是不一样的<br>第三种最常见的是使用日期时间类型来进行存储<br>最后一种是使用unix时间辍来进行存储，unix时间辍是一个整型，数字代表的意思也是978-03-01，它是自1971-01-01 00:00:00 到现在的秒数</p>\n<p>列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，最后是字符串类型。对于相同级别的数据类型，应该优先选择则占用空间小的数据类型。</p>\n<p>比如上面例子就应该优先选择int类型其次是datetime在其次是char和varchar</p>\n<p>以mysql为例，各数据类型占用的存储空间大小：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510191946.png\"><br>以上选择原则在主要是从下面两个角度考虑：<br>1） 在对数据进行比较（查询条件、JSON条件及排序）操作时：同样的数据，字符处理往往比数字处理慢。<br>这是因为字符串类型的处理是与我们选择的排序规则有关的，也就是说它要去查询我们当前所使用排序规则的字典顺序来确定字符串的比较和排序顺序，而数字的二进制类型不需要参考这种数据字典，因此在进行数据的排序和比较过程中使用二进制或者int类型的效率要高于字符串类型。</p>\n<p>2）在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。<br>因为不同的关系型数据库页的大小是不一样的，如SQLServer是8k一页，而mysql在innodb中默认是16k字节一页，而列的长度越小，我们在一个页中所能存储的数据量就越多，这样再加载相同的数据的时候如果我们的列越小我们加载的页数越小，这样IO的性能就会提高，现在数据库最大瓶颈并不是CPU，而是磁盘IO瓶颈，也就是说如果我们优化了IO瓶颈就是优化了我们数据库的性能</p>\n<h4 id=\"char与varchar如何选择\"><a href=\"#char与varchar如何选择\" class=\"headerlink\" title=\"char与varchar如何选择\"></a>char与varchar如何选择</h4><p>原则：<br>1)如果列中要存储的数据长度差不多是一致的，则应该考虑用char;否则应该考虑用varchar。</p>\n<p>2）如果列中的最大数据长度小于50Byte，则一般也考虑用char。<br>（当然，如果这个列很少用，则基于节省空间和减少IO的考虑，还是可以选择用varchar）</p>\n<p>3）一般不宜定义大于50Byte的char类型列。</p>\n<p>例如身份证号或者说电话这种字符串，它的长度基本上都是一致的，那么这个时候就可以选择char来进行存储，而不是varchar。如果内容最大的数据长度小于50个字节也一般可以使用char来存储，因为每一个varchar的列除了存储数据所需要的数据长度之外还需要额外的在字节来存储变长数据的字典，而在检索数据的时候也要确定数据存取的起始位置，所以长度太小就不适合用varchar来进行存储。<br>如果我们所存储的这个数据是大于50个字节的那么就最好使用varchar，在mysql中不同的字符编码占用的字节是不一样的，比如UTF-8每个字符占用三个字节，也就是说50/3，也就是字符串大于15个字符就要考虑使用varchar而不是char</p>\n<h4 id=\"decimal和float如何选择\"><a href=\"#decimal和float如何选择\" class=\"headerlink\" title=\"decimal和float如何选择\"></a>decimal和float如何选择</h4><p>原则：</p>\n<p>1) decimal用于存储精确数据，而float只能用于存储非精准数据。故精确数据只能选择decimal类型。</p>\n<p>2) 由于float的存储空间开销一般比decimal小（精确到7位小数只需要4个字节，而精确到15位小数只需要8字节）故非精确数据优先选择float类型</p>\n<h4 id=\"时间类型如何存储\"><a href=\"#时间类型如何存储\" class=\"headerlink\" title=\"时间类型如何存储\"></a>时间类型如何存储</h4><p>1）使用int类存储时间字段的优缺点<br>优点：字段长度比datetime小<br>缺点：使用不方便，要进行函数转换。<br>限制：只能存储2038-1-19 11：14：07及2^32为2147483648</p>\n<p>如果存储订单的日期那么最好使用datetime，因为要时常要进行时间范围判断查询来判断订单是否到期</p>\n<p>2）需要存储的时间粒度<br>年 月 日 小时 分 秒 周</p>\n<p>比如之存储到年那么可以用year，year之战用一个字节</p>\n<p>如何选择主键<br>1）区分业务主键和数据库主键<br>业务主键用于标识业务数据，进行表与表之间的关联；<br>数据库主键为了优化数据库存储（innodb会生成6个字节的隐含主键）</p>\n<p>一些情况下业务主键和数据库主键是相同的，但是在一些情况下业务主键和数据库主键又是不同的，为什么要定义主键呢？因为在一些数据库的表中，比如innodb是要求每个表中必须要有一个主键的，因为它是按照主键的顺序进行逻辑存储的，如果没有主键的话innodb会优先选择具有所有非空列的唯一索引来进行主键，因为没有定义主键唯一索引的话innodb会生成6个字节的隐含列来作为主键，所以使用innodb的话最好人为的去定义一些主键，而不要使用隐含的主键</p>\n<p>2）根据数据库的类型，考虑主键是否要顺序增长<br>有些数据库是按主键的顺序逻辑存储的</p>\n<p>因为innodb是按照主键的逻辑来进行存储，那么最好是需要主键是可以顺序增长的，这样的话它就不会进行数据的逻辑迁移，对我们的IO很有好处，</p>\n<p>3）主键的字段类型所占空间要尽可能的小<br>对于使用聚集索引方式存储的表，每个索引后都会附加主键信息。</p>\n<p>另外因为数据库都是按页来存储数据的，那么主键也要尽可能的小，因为主键越小页中所存储的主键的数量就越多，这样在查询的时候就会装载更少的数据，这样也能对IO性能带来一些好处</p>\n<h4 id=\"避免使用外键约束\"><a href=\"#避免使用外键约束\" class=\"headerlink\" title=\"避免使用外键约束\"></a>避免使用外键约束</h4><p>1）降低数据导入的效率</p>\n<p>2）增加维护的成本</p>\n<p>3）虽然不建议使用外键约束，但是相关联的列上一定要建立索引</p>\n<p>有时经常会听到说外键是用来保持数据完整性的一种方式，但是在这种高并法的互联网网站中如果使用外键会给我们带来一些负面的影响。首先对于数据的写入操作的时候，如果我们使用了外键，那么每写入一条数据都会去查询是否符合外键约束，如果符合才能插入进数据如果不符合就会被拒绝掉，那么检查这个外键约束是否符合的过程是十分的耗时的，可能一般情况下感觉不到，但是在高并法的情况下我们就能深有体会。所以一般建议上在高并法的互联网企业最好不要使用外键约束来进行数据库一致性的保证。但是不使用外键并不意味着我们并不会在外键上建立索引，因为所谓的外键约束它是一种约束，而索引是为了提高查询效率而存在的，就是如果我们进行表关联，这样虽然我们没有建立外键约束，但是我们同样要在关联键上建立索引。</p>\n<h4 id=\"避免使用触发器\"><a href=\"#避免使用触发器\" class=\"headerlink\" title=\"避免使用触发器\"></a>避免使用触发器</h4><p>1）降低数据导入的效率。</p>\n<p>2）可能会出现意想不到的数据异样。</p>\n<p>3）使用业务逻辑变得复杂。</p>\n<h4 id=\"关于预留字段\"><a href=\"#关于预留字段\" class=\"headerlink\" title=\"关于预留字段\"></a>关于预留字段</h4><p>1） 无法准确的知道预留字段的类型。</p>\n<p>2） 无法准确的知道预留字段中所存储的内容。</p>\n<p>3） 后期维护预留字段所要的成本，同增加一个字段所需要的成本是相同的。</p>\n<p>4） 严禁使用预留字段。</p>\n<p>预留字段时你不可能具体字段的类型，并且字段名不会见名思意特别准确，另外后期给列重命名，对于数据库来说就是等于新建了一个列</p>\n<h4 id=\"什么是反范式化\"><a href=\"#什么是反范式化\" class=\"headerlink\" title=\"什么是反范式化\"></a>什么是反范式化</h4><p>反范式化是针对范式化而言的，在在前面介绍了数据库设计的第三范式，所谓的反范式化就是为了性能和读取效率的考虑而适当的对第三范式的要求进行违反，而允许存在少量的数据冗余，换句话说反范式化就是使用空间来换取时间。</p>\n<p>例子：</p>\n<p>符合范式化的设计：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214209.png\"><br>如果要查询订单信息：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214332.png\"><br>这条sql关联了三张表并且还进行了sum操作才汇总出各项订单信息。<br>可以看出表关联还是非常多的，并且进行了汇总操作所以效率也不会太高</p>\n<p>如果要查出订单详情:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124001.png\"><br>反范式化操作：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124059.png\"><br>这样虽然增加了一部分冗余数据但是查询变得更加简单明了并且查询效率更高,只需要订单表和商品表就能查出原来需要四张表的订单详情<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124239.png\"><br>如果要查询订单信息就更简单了：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124536.png\"><br>在写入的时候多占用了一些空间，但是在读取的时候可以提效率。在互联网项目中读写比例一般是三比一或者四比一的关系，所以读远远高于写，所以如果写的时候增加了一些数据冗余但是能大大提高读的效率的话还是比较化算的</p>\n<h4 id=\"为什么反范式化\"><a href=\"#为什么反范式化\" class=\"headerlink\" title=\"为什么反范式化\"></a>为什么反范式化</h4><p>1）减少表的关联数量<br>2）增加数据的读取效率<br>3）反范式化一定要适度</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"物理设计要做什么\"><a href=\"#物理设计要做什么\" class=\"headerlink\" title=\"物理设计要做什么\"></a>物理设计要做什么</h4><ol>\n<li>选择合适的数据库管理系统</li>\n<li>定义数据库、表及字段的命名规范。</li>\n<li>根据所选的DBMS系统选择合适的字段类型。</li>\n<li>反范式化<br>指的是在逻辑设计中已经确立好的非常规范的数据库结构模型，模型没有任何数据冗余，那么在物理设计中可能会为了读效率的考虑会在表中增加一些冗余来达到效率的提升，换句话说就是用空间换时间<br>选择合适的DBMS系统</li>\n</ol>\n<h4 id=\"选择合适的DBMS系统\"><a href=\"#选择合适的DBMS系统\" class=\"headerlink\" title=\"选择合适的DBMS系统\"></a>选择合适的DBMS系统</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509140730.png\"></img><br>首先来说要考虑成本问题，对于Oracle和SQLServer来说它是属于商业数据库，这就不得不考虑版权的问题，从SQLServer2012之后就使用了和Oracle相同的基于服务器的核数来进行收费的策略，由于我们目前服务器的核数都比较多，在这种情况下我们使用商业数据库我们的成本是不得不去考虑的一个问题。<br>而MYSQL和PGSQL是常见的开源数据库，而对于开源数据库来说，只要我们在使用的时候是符合开源协议的，那么就不需要支付版权费用。<br>除了版权之外，我们还要对功能进行考虑，对于Oracle来说是属于业界口碑比较好的数据库系统，性能是非常高的，比较适合比较大的事物操作，因为在Oracle中它的事务成本是非常低的。<br>除了功能上我们使用的操作系统上也可以进行选择，像SQRServer数据库因为是微软的产品，所以它是只支持windows上面运行的。而Oracle、MYsql和Pgsql呢是可以同时运行在windows下和linux下的。<br>除了这些我们还要考虑开发使用的语言，如果在开发中使用的是.net这种语言，那么SQLServer对.net配合是更好的选择。<br>之后和还要考虑应用场景，对于目前来说mysql和pgsql这种开源数据库是比较常用于互联网项目，而Oracle和SQLServer更适用于企业级项目，比如说一些金融类的公司可能会更喜欢Oracle，因为它相对来说扩展比较容易，也相对也更加安全。SQLServer更倾向于一些中小企业的企业级数据库，比如说一些ERP系统。</p>\n<h4 id=\"Mysql常用的存储引擎\"><a href=\"#Mysql常用的存储引擎\" class=\"headerlink\" title=\"Mysql常用的存储引擎\"></a>Mysql常用的存储引擎</h4><p>由于MySQL是一种开源型的数据库，所以它的存储也非常开放，只要符合mysql的存储协议，那么任何场上都可以实现自己的存储引擎。</p>\n<p>mysql的常用存储引擎：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509143259.png\"></img></p>\n<p>MyISAM是MySQL5.5以前默认使用的存储引擎，这种存储引擎的特点是不支持事务，但是他的读写效率相对来说更高，由于它不支持事务，所以它对一些事务处理上的开销也就更少，这些是它读写比较高效的原因，但是由于它不支持事务，这也面临着它在写的时候要对全表进行加锁，也就是说写并发非常大就有可能造成锁阻塞，所以它的使用场景是如果写很少读很多的时候可以使用这种引擎</p>\n<p>MRG_MyISAMD这种存储引擎是和MyISAM存储引擎有一定的关系的，它是可以把多个结构相同的MyISAM表合并成一个表进行处理，这比较像视图或者分区的一种功能，但是由于是基于MyISAM的所以同样不支持事务，并且不再支持行级锁存储引擎。主要应用于分段归档和数据仓库这种需要把多个表变成一个表进行逻辑处理的可以使用这种存储引擎，因为它的写相对来说是非常少的，可能是基于某一时间去写，但大多数场景都是在读。并且这种存储引擎也不适用于那种全局查找过多的场景，和分区表一样如果全局查找太多就涉及到要在在多个分区中或者表中浸信会个扫描，这样效率会更低，如果全局查找太多也不适用于这种存储引擎</p>\n<p>innodb是mysql5.5之后mysql默认使用的存储引擎，也是目前在大多数互联网应用中建立大家使用的引擎，首先这种引擎支持事务，并且支持多版本并法的行级锁，也就是说比较类似与Oracle这种事务特点，主要应用场景就是需要用到事务处理的场景，并且禁用场景目前没有，也就是大多数场景都可以用innodb引擎，由于是行级锁所以读写也是非常高效的，和MyISAM不同点是它不会有表级锁的存在，基本上都是对于行级锁进行处理，因此阻塞会更少</p>\n<p>Archive的特点是也是行级锁，但是它支持insert和select操作，不支持update操作，这种存储引擎更倾向于日志的这种场景,因为日志只需要添加而并不需要更新，这种时候就可以使用在这种存储引擎，这种存储引擎的特点是它的存储需要的容量相对来说更小，也就是说innodb来进行存储新需要100m，而Archive可能只需要几十m或者十几m空间就能完成相同数量级的存储</p>\n<p>Ndb cluster这种存储引擎是mysql集群所使用的存储引擎，这种存储引擎的特点是，首先支持事务，并且也是行级锁，主要应用场景是要使用mysql集群的情况下使用NDB存储引擎，由于mysql集群是内存型的一种集群，大部分数据要放到内存中，所以在大多数情况下如果我们数据量比较大超过内存的大小，这种情况下就不太适用于NDB集群，也就不可能再使用NDB集群的存储引擎</p>\n<h4 id=\"数据库表及字段的命名规范\"><a href=\"#数据库表及字段的命名规范\" class=\"headerlink\" title=\"数据库表及字段的命名规范\"></a>数据库表及字段的命名规范</h4><p>所有对象命名应该遵循下述规则：<br>1）可读性原则<br>使用大写和小写来格式化的库对象名字以获得良好的可读性。<br>例如：使用CustAddress而不是custaddress来提高可读性。（这里要注意有些DBMS系统对表名的大小写是敏感的）</p>\n<p>2)表意性原则<br>对象的名字应该能够描述它所标识的对象。<br>例如，对于表，表的名称应该能够体现表中存储的数据内容；对于存储过程，存储过程名称应该能够体现存储过程的功能。</p>\n<p>3)长名原则<br>尽可能少使用或者不使用缩写，适用于数据库(DATABASE)名之外的任一对象。</p>\n<h4 id=\"字段类型的选择原则\"><a href=\"#字段类型的选择原则\" class=\"headerlink\" title=\"字段类型的选择原则\"></a>字段类型的选择原则</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510190125.png\"></img><br>比如生日这个字段至少可以使用四种类型进行存储<br>第一种char类型，1978-03-01大概需要十个字节就够了<br>第二种使用varchar变长字段来进行存储，就varchar存储的好处是可以存1978-03-01 或者 19780301 都是可以的，因为字符串长度不一样所使用的存储空间也是不一样的<br>第三种最常见的是使用日期时间类型来进行存储<br>最后一种是使用unix时间辍来进行存储，unix时间辍是一个整型，数字代表的意思也是978-03-01，它是自1971-01-01 00:00:00 到现在的秒数</p>\n<p>列的数据类型一方面影响数据存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，最后是字符串类型。对于相同级别的数据类型，应该优先选择则占用空间小的数据类型。</p>\n<p>比如上面例子就应该优先选择int类型其次是datetime在其次是char和varchar</p>\n<p>以mysql为例，各数据类型占用的存储空间大小：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510191946.png\"></img><br>以上选择原则在主要是从下面两个角度考虑：<br>1） 在对数据进行比较（查询条件、JSON条件及排序）操作时：同样的数据，字符处理往往比数字处理慢。<br>这是因为字符串类型的处理是与我们选择的排序规则有关的，也就是说它要去查询我们当前所使用排序规则的字典顺序来确定字符串的比较和排序顺序，而数字的二进制类型不需要参考这种数据字典，因此在进行数据的排序和比较过程中使用二进制或者int类型的效率要高于字符串类型。</p>\n<p>2）在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。<br>因为不同的关系型数据库页的大小是不一样的，如SQLServer是8k一页，而mysql在innodb中默认是16k字节一页，而列的长度越小，我们在一个页中所能存储的数据量就越多，这样再加载相同的数据的时候如果我们的列越小我们加载的页数越小，这样IO的性能就会提高，现在数据库最大瓶颈并不是CPU，而是磁盘IO瓶颈，也就是说如果我们优化了IO瓶颈就是优化了我们数据库的性能</p>\n<h4 id=\"char与varchar如何选择\"><a href=\"#char与varchar如何选择\" class=\"headerlink\" title=\"char与varchar如何选择\"></a>char与varchar如何选择</h4><p>原则：<br>1)如果列中要存储的数据长度差不多是一致的，则应该考虑用char;否则应该考虑用varchar。</p>\n<p>2）如果列中的最大数据长度小于50Byte，则一般也考虑用char。<br>（当然，如果这个列很少用，则基于节省空间和减少IO的考虑，还是可以选择用varchar）</p>\n<p>3）一般不宜定义大于50Byte的char类型列。</p>\n<p>例如身份证号或者说电话这种字符串，它的长度基本上都是一致的，那么这个时候就可以选择char来进行存储，而不是varchar。如果内容最大的数据长度小于50个字节也一般可以使用char来存储，因为每一个varchar的列除了存储数据所需要的数据长度之外还需要额外的在字节来存储变长数据的字典，而在检索数据的时候也要确定数据存取的起始位置，所以长度太小就不适合用varchar来进行存储。<br>如果我们所存储的这个数据是大于50个字节的那么就最好使用varchar，在mysql中不同的字符编码占用的字节是不一样的，比如UTF-8每个字符占用三个字节，也就是说50/3，也就是字符串大于15个字符就要考虑使用varchar而不是char</p>\n<h4 id=\"decimal和float如何选择\"><a href=\"#decimal和float如何选择\" class=\"headerlink\" title=\"decimal和float如何选择\"></a>decimal和float如何选择</h4><p>原则：</p>\n<p>1) decimal用于存储精确数据，而float只能用于存储非精准数据。故精确数据只能选择decimal类型。</p>\n<p>2) 由于float的存储空间开销一般比decimal小（精确到7位小数只需要4个字节，而精确到15位小数只需要8字节）故非精确数据优先选择float类型</p>\n<h4 id=\"时间类型如何存储\"><a href=\"#时间类型如何存储\" class=\"headerlink\" title=\"时间类型如何存储\"></a>时间类型如何存储</h4><p>1）使用int类存储时间字段的优缺点<br>优点：字段长度比datetime小<br>缺点：使用不方便，要进行函数转换。<br>限制：只能存储2038-1-19 11：14：07及2^32为2147483648</p>\n<p>如果存储订单的日期那么最好使用datetime，因为要时常要进行时间范围判断查询来判断订单是否到期</p>\n<p>2）需要存储的时间粒度<br>年 月 日 小时 分 秒 周</p>\n<p>比如之存储到年那么可以用year，year之战用一个字节</p>\n<p>如何选择主键<br>1）区分业务主键和数据库主键<br>业务主键用于标识业务数据，进行表与表之间的关联；<br>数据库主键为了优化数据库存储（innodb会生成6个字节的隐含主键）</p>\n<p>一些情况下业务主键和数据库主键是相同的，但是在一些情况下业务主键和数据库主键又是不同的，为什么要定义主键呢？因为在一些数据库的表中，比如innodb是要求每个表中必须要有一个主键的，因为它是按照主键的顺序进行逻辑存储的，如果没有主键的话innodb会优先选择具有所有非空列的唯一索引来进行主键，因为没有定义主键唯一索引的话innodb会生成6个字节的隐含列来作为主键，所以使用innodb的话最好人为的去定义一些主键，而不要使用隐含的主键</p>\n<p>2）根据数据库的类型，考虑主键是否要顺序增长<br>有些数据库是按主键的顺序逻辑存储的</p>\n<p>因为innodb是按照主键的逻辑来进行存储，那么最好是需要主键是可以顺序增长的，这样的话它就不会进行数据的逻辑迁移，对我们的IO很有好处，</p>\n<p>3）主键的字段类型所占空间要尽可能的小<br>对于使用聚集索引方式存储的表，每个索引后都会附加主键信息。</p>\n<p>另外因为数据库都是按页来存储数据的，那么主键也要尽可能的小，因为主键越小页中所存储的主键的数量就越多，这样在查询的时候就会装载更少的数据，这样也能对IO性能带来一些好处</p>\n<h4 id=\"避免使用外键约束\"><a href=\"#避免使用外键约束\" class=\"headerlink\" title=\"避免使用外键约束\"></a>避免使用外键约束</h4><p>1）降低数据导入的效率</p>\n<p>2）增加维护的成本</p>\n<p>3）虽然不建议使用外键约束，但是相关联的列上一定要建立索引</p>\n<p>有时经常会听到说外键是用来保持数据完整性的一种方式，但是在这种高并法的互联网网站中如果使用外键会给我们带来一些负面的影响。首先对于数据的写入操作的时候，如果我们使用了外键，那么每写入一条数据都会去查询是否符合外键约束，如果符合才能插入进数据如果不符合就会被拒绝掉，那么检查这个外键约束是否符合的过程是十分的耗时的，可能一般情况下感觉不到，但是在高并法的情况下我们就能深有体会。所以一般建议上在高并法的互联网企业最好不要使用外键约束来进行数据库一致性的保证。但是不使用外键并不意味着我们并不会在外键上建立索引，因为所谓的外键约束它是一种约束，而索引是为了提高查询效率而存在的，就是如果我们进行表关联，这样虽然我们没有建立外键约束，但是我们同样要在关联键上建立索引。</p>\n<h4 id=\"避免使用触发器\"><a href=\"#避免使用触发器\" class=\"headerlink\" title=\"避免使用触发器\"></a>避免使用触发器</h4><p>1）降低数据导入的效率。</p>\n<p>2）可能会出现意想不到的数据异样。</p>\n<p>3）使用业务逻辑变得复杂。</p>\n<h4 id=\"关于预留字段\"><a href=\"#关于预留字段\" class=\"headerlink\" title=\"关于预留字段\"></a>关于预留字段</h4><p>1） 无法准确的知道预留字段的类型。</p>\n<p>2） 无法准确的知道预留字段中所存储的内容。</p>\n<p>3） 后期维护预留字段所要的成本，同增加一个字段所需要的成本是相同的。</p>\n<p>4） 严禁使用预留字段。</p>\n<p>预留字段时你不可能具体字段的类型，并且字段名不会见名思意特别准确，另外后期给列重命名，对于数据库来说就是等于新建了一个列</p>\n<h4 id=\"什么是反范式化\"><a href=\"#什么是反范式化\" class=\"headerlink\" title=\"什么是反范式化\"></a>什么是反范式化</h4><p>反范式化是针对范式化而言的，在在前面介绍了数据库设计的第三范式，所谓的反范式化就是为了性能和读取效率的考虑而适当的对第三范式的要求进行违反，而允许存在少量的数据冗余，换句话说反范式化就是使用空间来换取时间。</p>\n<p>例子：</p>\n<p>符合范式化的设计：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214209.png\"></img><br>如果要查询订单信息：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200510214332.png\"></img><br>这条sql关联了三张表并且还进行了sum操作才汇总出各项订单信息。<br>可以看出表关联还是非常多的，并且进行了汇总操作所以效率也不会太高</p>\n<p>如果要查出订单详情:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124001.png\"></img><br>反范式化操作：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124059.png\"></img><br>这样虽然增加了一部分冗余数据但是查询变得更加简单明了并且查询效率更高,只需要订单表和商品表就能查出原来需要四张表的订单详情<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124239.png\"></img><br>如果要查询订单信息就更简单了：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511124536.png\"></img><br>在写入的时候多占用了一些空间，但是在读取的时候可以提效率。在互联网项目中读写比例一般是三比一或者四比一的关系，所以读远远高于写，所以如果写的时候增加了一些数据冗余但是能大大提高读的效率的话还是比较化算的</p>\n<h4 id=\"为什么反范式化\"><a href=\"#为什么反范式化\" class=\"headerlink\" title=\"为什么反范式化\"></a>为什么反范式化</h4><p>1）减少表的关联数量<br>2）增加数据的读取效率<br>3）反范式化一定要适度</p>\n"},{"title":"数据库逻辑设计","date":"2020-05-09T07:35:03.000Z","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509071618.png\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n#### 逻辑设计是做什么的\n1. 将需求转化为数据库的逻辑模型\n\n2. 通过ER图的形式对逻辑模型进行展示\n\n3. 同所选用的具体的DBMS系统无关\n\n所谓的逻辑设计就是根据需求分析之所了解到的应用中所需要存储的数据类型来建立数据库的逻辑模型的这么一个过程。所谓的逻辑模型是在任何数据库管理系统中都是通用的。\n\nER图就是实体关系模型\nER图中的概念：\n关系：一个关系对应通常所说的一张表。\n元组：表中的一行即为一个元组。\n属性：表中的一列即为一个属性；每一个属性都有一个名称，称为属性名。\n候选码：表中的某个属性组，他可以唯一确定一个元组。\n主码：一个关系有多个候选码，选定其中一个为主码。\n域：属性的取值范围。\n分量：元组中的一个属性值。\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080751.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080704.png\"></img>\n\n#### 逻辑设计规范\n由于在逻辑设计中对同一个实体的存储方式可以有多种不同的设计，比如用户和购物车在这个实体，我们可以把购物车和用户信息存储在统一张表中，也可以分开去存储。这两种存储方式哪种更好一些，就要通过数据库设计的一些规范去进行选择，这也是数据设计的范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509094003.png\"></img>\n\n#### 数据库设计范式\n如果我们符合这些范式的数据库设计就可以设计出简洁高效且结构清晰的数据库设计，同时可以避免数据库的插入更新和删除异常，也可以最大限度的避免数据库的冗余。同样如果比符合这种规范式的设计，那么可能就会存在数据的更新插入的异常，也可能会存在大量的数据冗余，这样就对数据库的使用造成很大的不便。\n\n常见的数据库设计范式包括：\n第一范式，第二范式，第三范式及BC范式。当然还是第四及第五范式不过这里我们会把重点放到前三个范式上，这也是目前我们大多数数据库设计所要遵循的范式。\n\n#### 数据操作异常及数据冗余\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509095904.png\"></img>\n可以看出如果一个表存在插入异常，那么必定也会存在删除异常和更新异常\n\n数据冗余：是指相同的数据在多个地方存在，或者说表中的某个列可以由其他列计算得到，这样就说表中存在着数据冗余。\n\n如果数据库设计中存在大量的操作异常和数据冗余那么我们这个设计就是不符合数据库范式要求的，同时在使用中会给我们数据库的使用造成很大的不便，比如我们在插入和更新的时候可能会更新到其他并不应该更新的或者并不该删除的数据，而数据存在大量冗余会对我们数据一致性的维护造成很大的不便，有时候会漏掉某一个表的维护的话，那么就会造成数据一致性的异常。\n\n#### 第一范式\n第一范式是在所有数据库范式中最简单的一种范式，也就是说我们最容易遵守的一种范式。\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101147.png\"></img>\n单一属性是指基本的数据类型所构成的，如整型、浮点型、字符串等等。\n\n二维表指的是都是由行和列组成的表\n\n在大多数数据库管理系统中都是不可能创建出第二个表这种结构的,这样的结构不符合数据库设计第一范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101811.png\"></img>\n\n#### 第二范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509102105.png\"></img>\n部分函数依赖指的是如果表中的关键字是组合关键字，是由两个或者两个以上的字段来标识这一行数据的，那么这个关键字就称之为组合关键字。而如果非关键字段对这个组合关键字中的某一个字段存在依赖关系这就称之为部分函数依赖。换句话说，如果这个表中是单关键字的那么他就是一定符合第二范式要求的。\n\n下面看一个例子：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103130.png\"></img>\n这样不符合第二范式的设计会出现下面问题：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103603.png\"></img>\n如何解决这种问题，我们要对不符合第二范式的表进行拆分:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509104236.png\"></img>\n\n#### 第三范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509110840.png\"></img>\n\n例子：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111400.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111318.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111749.png\"></img>\n\n#### BC范式\nBC范式是对第三范式的扩展\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112201.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112741.png\"></img>\n\n例如表可以根据供应商和商品id为在组合关键字来唯一标识表中的每一行记录，同时可以以供应商联系人和商品id来唯一标识一行记录。\n这两种标识方式的依赖关系是供应商和商品id决定了联系人和商品数量。\n联系人和商品id可以决定供应商和商品数量。所以有两种组合关键字的选择。\n这两组组合关键字又存在这样的关系：\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112823.png\"></img>\n供应商决定了供应商联系人\n供应商联系人也可以决定供应商，因为一个供应商联系人之可以受雇于一家供应商，所以存在了这种相互依赖的关系，因此不符合BC范式\n改进：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509113018.png\"></img>","source":"_posts/数据库逻辑设计.md","raw":"---\ntitle: 数据库逻辑设计\ndate:  2020-05-09 15:35:03\ncategories: 数据库\ntags:\n    - 数据库设计\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509071618.png\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n#### 逻辑设计是做什么的\n1. 将需求转化为数据库的逻辑模型\n\n2. 通过ER图的形式对逻辑模型进行展示\n\n3. 同所选用的具体的DBMS系统无关\n\n所谓的逻辑设计就是根据需求分析之所了解到的应用中所需要存储的数据类型来建立数据库的逻辑模型的这么一个过程。所谓的逻辑模型是在任何数据库管理系统中都是通用的。\n\nER图就是实体关系模型\nER图中的概念：\n关系：一个关系对应通常所说的一张表。\n元组：表中的一行即为一个元组。\n属性：表中的一列即为一个属性；每一个属性都有一个名称，称为属性名。\n候选码：表中的某个属性组，他可以唯一确定一个元组。\n主码：一个关系有多个候选码，选定其中一个为主码。\n域：属性的取值范围。\n分量：元组中的一个属性值。\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080751.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080704.png\"></img>\n\n#### 逻辑设计规范\n由于在逻辑设计中对同一个实体的存储方式可以有多种不同的设计，比如用户和购物车在这个实体，我们可以把购物车和用户信息存储在统一张表中，也可以分开去存储。这两种存储方式哪种更好一些，就要通过数据库设计的一些规范去进行选择，这也是数据设计的范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509094003.png\"></img>\n\n#### 数据库设计范式\n如果我们符合这些范式的数据库设计就可以设计出简洁高效且结构清晰的数据库设计，同时可以避免数据库的插入更新和删除异常，也可以最大限度的避免数据库的冗余。同样如果比符合这种规范式的设计，那么可能就会存在数据的更新插入的异常，也可能会存在大量的数据冗余，这样就对数据库的使用造成很大的不便。\n\n常见的数据库设计范式包括：\n第一范式，第二范式，第三范式及BC范式。当然还是第四及第五范式不过这里我们会把重点放到前三个范式上，这也是目前我们大多数数据库设计所要遵循的范式。\n\n#### 数据操作异常及数据冗余\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509095904.png\"></img>\n可以看出如果一个表存在插入异常，那么必定也会存在删除异常和更新异常\n\n数据冗余：是指相同的数据在多个地方存在，或者说表中的某个列可以由其他列计算得到，这样就说表中存在着数据冗余。\n\n如果数据库设计中存在大量的操作异常和数据冗余那么我们这个设计就是不符合数据库范式要求的，同时在使用中会给我们数据库的使用造成很大的不便，比如我们在插入和更新的时候可能会更新到其他并不应该更新的或者并不该删除的数据，而数据存在大量冗余会对我们数据一致性的维护造成很大的不便，有时候会漏掉某一个表的维护的话，那么就会造成数据一致性的异常。\n\n#### 第一范式\n第一范式是在所有数据库范式中最简单的一种范式，也就是说我们最容易遵守的一种范式。\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101147.png\"></img>\n单一属性是指基本的数据类型所构成的，如整型、浮点型、字符串等等。\n\n二维表指的是都是由行和列组成的表\n\n在大多数数据库管理系统中都是不可能创建出第二个表这种结构的,这样的结构不符合数据库设计第一范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101811.png\"></img>\n\n#### 第二范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509102105.png\"></img>\n部分函数依赖指的是如果表中的关键字是组合关键字，是由两个或者两个以上的字段来标识这一行数据的，那么这个关键字就称之为组合关键字。而如果非关键字段对这个组合关键字中的某一个字段存在依赖关系这就称之为部分函数依赖。换句话说，如果这个表中是单关键字的那么他就是一定符合第二范式要求的。\n\n下面看一个例子：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103130.png\"></img>\n这样不符合第二范式的设计会出现下面问题：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103603.png\"></img>\n如何解决这种问题，我们要对不符合第二范式的表进行拆分:\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509104236.png\"></img>\n\n#### 第三范式\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509110840.png\"></img>\n\n例子：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111400.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111318.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111749.png\"></img>\n\n#### BC范式\nBC范式是对第三范式的扩展\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112201.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112741.png\"></img>\n\n例如表可以根据供应商和商品id为在组合关键字来唯一标识表中的每一行记录，同时可以以供应商联系人和商品id来唯一标识一行记录。\n这两种标识方式的依赖关系是供应商和商品id决定了联系人和商品数量。\n联系人和商品id可以决定供应商和商品数量。所以有两种组合关键字的选择。\n这两组组合关键字又存在这样的关系：\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112823.png\"></img>\n供应商决定了供应商联系人\n供应商联系人也可以决定供应商，因为一个供应商联系人之可以受雇于一家供应商，所以存在了这种相互依赖的关系，因此不符合BC范式\n改进：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509113018.png\"></img>","slug":"数据库逻辑设计","published":1,"updated":"2020-05-17T09:22:21.652Z","_id":"ckaar5noo0000dwjxgow32lik","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509071618.png\"></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"逻辑设计是做什么的\"><a href=\"#逻辑设计是做什么的\" class=\"headerlink\" title=\"逻辑设计是做什么的\"></a>逻辑设计是做什么的</h4><ol>\n<li><p>将需求转化为数据库的逻辑模型</p>\n</li>\n<li><p>通过ER图的形式对逻辑模型进行展示</p>\n</li>\n<li><p>同所选用的具体的DBMS系统无关</p>\n</li>\n</ol>\n<p>所谓的逻辑设计就是根据需求分析之所了解到的应用中所需要存储的数据类型来建立数据库的逻辑模型的这么一个过程。所谓的逻辑模型是在任何数据库管理系统中都是通用的。</p>\n<p>ER图就是实体关系模型<br>ER图中的概念：<br>关系：一个关系对应通常所说的一张表。<br>元组：表中的一行即为一个元组。<br>属性：表中的一列即为一个属性；每一个属性都有一个名称，称为属性名。<br>候选码：表中的某个属性组，他可以唯一确定一个元组。<br>主码：一个关系有多个候选码，选定其中一个为主码。<br>域：属性的取值范围。<br>分量：元组中的一个属性值。</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080751.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080704.png\"></p>\n<h4 id=\"逻辑设计规范\"><a href=\"#逻辑设计规范\" class=\"headerlink\" title=\"逻辑设计规范\"></a>逻辑设计规范</h4><p>由于在逻辑设计中对同一个实体的存储方式可以有多种不同的设计，比如用户和购物车在这个实体，我们可以把购物车和用户信息存储在统一张表中，也可以分开去存储。这两种存储方式哪种更好一些，就要通过数据库设计的一些规范去进行选择，这也是数据设计的范式<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509094003.png\"></p>\n<h4 id=\"数据库设计范式\"><a href=\"#数据库设计范式\" class=\"headerlink\" title=\"数据库设计范式\"></a>数据库设计范式</h4><p>如果我们符合这些范式的数据库设计就可以设计出简洁高效且结构清晰的数据库设计，同时可以避免数据库的插入更新和删除异常，也可以最大限度的避免数据库的冗余。同样如果比符合这种规范式的设计，那么可能就会存在数据的更新插入的异常，也可能会存在大量的数据冗余，这样就对数据库的使用造成很大的不便。</p>\n<p>常见的数据库设计范式包括：<br>第一范式，第二范式，第三范式及BC范式。当然还是第四及第五范式不过这里我们会把重点放到前三个范式上，这也是目前我们大多数数据库设计所要遵循的范式。</p>\n<h4 id=\"数据操作异常及数据冗余\"><a href=\"#数据操作异常及数据冗余\" class=\"headerlink\" title=\"数据操作异常及数据冗余\"></a>数据操作异常及数据冗余</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509095904.png\"><br>可以看出如果一个表存在插入异常，那么必定也会存在删除异常和更新异常</p>\n<p>数据冗余：是指相同的数据在多个地方存在，或者说表中的某个列可以由其他列计算得到，这样就说表中存在着数据冗余。</p>\n<p>如果数据库设计中存在大量的操作异常和数据冗余那么我们这个设计就是不符合数据库范式要求的，同时在使用中会给我们数据库的使用造成很大的不便，比如我们在插入和更新的时候可能会更新到其他并不应该更新的或者并不该删除的数据，而数据存在大量冗余会对我们数据一致性的维护造成很大的不便，有时候会漏掉某一个表的维护的话，那么就会造成数据一致性的异常。</p>\n<h4 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式\"></a>第一范式</h4><p>第一范式是在所有数据库范式中最简单的一种范式，也就是说我们最容易遵守的一种范式。</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101147.png\"><br>单一属性是指基本的数据类型所构成的，如整型、浮点型、字符串等等。</p>\n<p>二维表指的是都是由行和列组成的表</p>\n<p>在大多数数据库管理系统中都是不可能创建出第二个表这种结构的,这样的结构不符合数据库设计第一范式<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101811.png\"></p>\n<h4 id=\"第二范式\"><a href=\"#第二范式\" class=\"headerlink\" title=\"第二范式\"></a>第二范式</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509102105.png\"><br>部分函数依赖指的是如果表中的关键字是组合关键字，是由两个或者两个以上的字段来标识这一行数据的，那么这个关键字就称之为组合关键字。而如果非关键字段对这个组合关键字中的某一个字段存在依赖关系这就称之为部分函数依赖。换句话说，如果这个表中是单关键字的那么他就是一定符合第二范式要求的。</p>\n<p>下面看一个例子：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103130.png\"><br>这样不符合第二范式的设计会出现下面问题：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103603.png\"><br>如何解决这种问题，我们要对不符合第二范式的表进行拆分:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509104236.png\"></p>\n<h4 id=\"第三范式\"><a href=\"#第三范式\" class=\"headerlink\" title=\"第三范式\"></a>第三范式</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509110840.png\"></p>\n<p>例子：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111400.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111318.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111749.png\"></p>\n<h4 id=\"BC范式\"><a href=\"#BC范式\" class=\"headerlink\" title=\"BC范式\"></a>BC范式</h4><p>BC范式是对第三范式的扩展<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112201.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112741.png\"></p>\n<p>例如表可以根据供应商和商品id为在组合关键字来唯一标识表中的每一行记录，同时可以以供应商联系人和商品id来唯一标识一行记录。<br>这两种标识方式的依赖关系是供应商和商品id决定了联系人和商品数量。<br>联系人和商品id可以决定供应商和商品数量。所以有两种组合关键字的选择。<br>这两组组合关键字又存在这样的关系：</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112823.png\"><br>供应商决定了供应商联系人<br>供应商联系人也可以决定供应商，因为一个供应商联系人之可以受雇于一家供应商，所以存在了这种相互依赖的关系，因此不符合BC范式<br>改进：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509113018.png\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509071618.png\"></img></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<h4 id=\"逻辑设计是做什么的\"><a href=\"#逻辑设计是做什么的\" class=\"headerlink\" title=\"逻辑设计是做什么的\"></a>逻辑设计是做什么的</h4><ol>\n<li><p>将需求转化为数据库的逻辑模型</p>\n</li>\n<li><p>通过ER图的形式对逻辑模型进行展示</p>\n</li>\n<li><p>同所选用的具体的DBMS系统无关</p>\n</li>\n</ol>\n<p>所谓的逻辑设计就是根据需求分析之所了解到的应用中所需要存储的数据类型来建立数据库的逻辑模型的这么一个过程。所谓的逻辑模型是在任何数据库管理系统中都是通用的。</p>\n<p>ER图就是实体关系模型<br>ER图中的概念：<br>关系：一个关系对应通常所说的一张表。<br>元组：表中的一行即为一个元组。<br>属性：表中的一列即为一个属性；每一个属性都有一个名称，称为属性名。<br>候选码：表中的某个属性组，他可以唯一确定一个元组。<br>主码：一个关系有多个候选码，选定其中一个为主码。<br>域：属性的取值范围。<br>分量：元组中的一个属性值。</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080751.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509080704.png\"></img></p>\n<h4 id=\"逻辑设计规范\"><a href=\"#逻辑设计规范\" class=\"headerlink\" title=\"逻辑设计规范\"></a>逻辑设计规范</h4><p>由于在逻辑设计中对同一个实体的存储方式可以有多种不同的设计，比如用户和购物车在这个实体，我们可以把购物车和用户信息存储在统一张表中，也可以分开去存储。这两种存储方式哪种更好一些，就要通过数据库设计的一些规范去进行选择，这也是数据设计的范式<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509094003.png\"></img></p>\n<h4 id=\"数据库设计范式\"><a href=\"#数据库设计范式\" class=\"headerlink\" title=\"数据库设计范式\"></a>数据库设计范式</h4><p>如果我们符合这些范式的数据库设计就可以设计出简洁高效且结构清晰的数据库设计，同时可以避免数据库的插入更新和删除异常，也可以最大限度的避免数据库的冗余。同样如果比符合这种规范式的设计，那么可能就会存在数据的更新插入的异常，也可能会存在大量的数据冗余，这样就对数据库的使用造成很大的不便。</p>\n<p>常见的数据库设计范式包括：<br>第一范式，第二范式，第三范式及BC范式。当然还是第四及第五范式不过这里我们会把重点放到前三个范式上，这也是目前我们大多数数据库设计所要遵循的范式。</p>\n<h4 id=\"数据操作异常及数据冗余\"><a href=\"#数据操作异常及数据冗余\" class=\"headerlink\" title=\"数据操作异常及数据冗余\"></a>数据操作异常及数据冗余</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509095904.png\"></img><br>可以看出如果一个表存在插入异常，那么必定也会存在删除异常和更新异常</p>\n<p>数据冗余：是指相同的数据在多个地方存在，或者说表中的某个列可以由其他列计算得到，这样就说表中存在着数据冗余。</p>\n<p>如果数据库设计中存在大量的操作异常和数据冗余那么我们这个设计就是不符合数据库范式要求的，同时在使用中会给我们数据库的使用造成很大的不便，比如我们在插入和更新的时候可能会更新到其他并不应该更新的或者并不该删除的数据，而数据存在大量冗余会对我们数据一致性的维护造成很大的不便，有时候会漏掉某一个表的维护的话，那么就会造成数据一致性的异常。</p>\n<h4 id=\"第一范式\"><a href=\"#第一范式\" class=\"headerlink\" title=\"第一范式\"></a>第一范式</h4><p>第一范式是在所有数据库范式中最简单的一种范式，也就是说我们最容易遵守的一种范式。</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101147.png\"></img><br>单一属性是指基本的数据类型所构成的，如整型、浮点型、字符串等等。</p>\n<p>二维表指的是都是由行和列组成的表</p>\n<p>在大多数数据库管理系统中都是不可能创建出第二个表这种结构的,这样的结构不符合数据库设计第一范式<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509101811.png\"></img></p>\n<h4 id=\"第二范式\"><a href=\"#第二范式\" class=\"headerlink\" title=\"第二范式\"></a>第二范式</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509102105.png\"></img><br>部分函数依赖指的是如果表中的关键字是组合关键字，是由两个或者两个以上的字段来标识这一行数据的，那么这个关键字就称之为组合关键字。而如果非关键字段对这个组合关键字中的某一个字段存在依赖关系这就称之为部分函数依赖。换句话说，如果这个表中是单关键字的那么他就是一定符合第二范式要求的。</p>\n<p>下面看一个例子：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103130.png\"></img><br>这样不符合第二范式的设计会出现下面问题：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509103603.png\"></img><br>如何解决这种问题，我们要对不符合第二范式的表进行拆分:<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509104236.png\"></img></p>\n<h4 id=\"第三范式\"><a href=\"#第三范式\" class=\"headerlink\" title=\"第三范式\"></a>第三范式</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509110840.png\"></img></p>\n<p>例子：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111400.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111318.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509111749.png\"></img></p>\n<h4 id=\"BC范式\"><a href=\"#BC范式\" class=\"headerlink\" title=\"BC范式\"></a>BC范式</h4><p>BC范式是对第三范式的扩展<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112201.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112741.png\"></img></p>\n<p>例如表可以根据供应商和商品id为在组合关键字来唯一标识表中的每一行记录，同时可以以供应商联系人和商品id来唯一标识一行记录。<br>这两种标识方式的依赖关系是供应商和商品id决定了联系人和商品数量。<br>联系人和商品id可以决定供应商和商品数量。所以有两种组合关键字的选择。<br>这两组组合关键字又存在这样的关系：</p>\n<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509112823.png\"></img><br>供应商决定了供应商联系人<br>供应商联系人也可以决定供应商，因为一个供应商联系人之可以受雇于一家供应商，所以存在了这种相互依赖的关系，因此不符合BC范式<br>改进：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200509113018.png\"></img></p>\n"},{"title":"数据库维护和优化","date":"2020-05-11T07:45:22.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png","_content":"\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n由于项目中需求是不断变化的，所以数据库中的结构也是需要不断的做相应的改变\n\n#### 维护和优化中要做什么\n1）维护数据字典\n\n数据字典对于应用是否便于维护是非常重要的，如果我们不清楚表中每一个列或者说每一个表中存储的内容是什么，那么今后对应用进行升级维护就很难入手。\n特别是一些状态字段，比如用一些数字来表示的状态值，那么每一个数字代表的含义就一定要记录在数据字典中\n\n2）维护索引\n\n由于表结构和数据量的不断变化以及业务上使用的查询的不断变化我们就要对表中的索引去不断的进行维护和优化，有的索引在刚开始可能是适用的，但是随着数据量的增长和查询不断的变化，索引也可能从适用变成了不使用，这时候就要对老的索引进行删除并且建立新的索引\n\n3）维护表结构\n\n也是由于需求的不断变化，表结构也会随之跟着改变。如列的增加或者删除或者对于一些列的类型跟着更改\n\n4）在适当的时候对表进行水平拆分或垂直拆分\n\n随着数据量的不断增长，表中存储的数据量是有一定的瓶颈的，它超过某一个量级之后查询就会变得非常缓慢，这时就要进行拆分，拆分又分为水平拆分和垂直拆分\n\n#### 如何维护数据字典\n维护数据字典有很多种方式\n\n1）使用第三方工具对数据字典进行维护\n\n不同的数据库管理系统有不同的数据字典工具。\n\n2）利用数据库本身的备注字段来维护数据字典。以mysql为例\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511162843.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/dsadasdasdasdasd.png\"></img>\n\n导出数据库就可以形成数据字典了。\n\n#### 如何维护索引\n如何选择和是的列建立索引？\n\n1） 出现在where从句，group by从句，order by从句中的列\n\n但是从句中经常会出现多个列的情况，这种时候就要选择可选择性高的列要放到索引的前面\n\n2） 可选择性高的列要放到索引的前面\n\n这时大家可能会有一个误区：在索引列的顺序上要跟where条件中的列的顺序要保持一致，实际上这个要求并不是必须的，因为在现在的数据库中所有的sql在执行之前都要经过sql\n优化器重新编译。在编译过程中sql优化器就会按照我们数据库中的索引和统计信息对查询列重新的排序和优化，会自动选择适合sql的索引。\n\n3） 索引中不要包括太长的数据类型\n\n数据库是页的形式存储的，页对于mysql来说就是16k，在16k的大小中能够存储的条数越多那么索引查找的速度就会越快，因此索引的列不要太长，例如在mysql中它可以对“前置”进行索引的，比如text类型可以选择对前16个text字节进行索引\n\n#### 索引维护注意事项\n1）索引并不是越多越好，过多的索引不但会降低写效率，而且会降低读的效率\n\n2）定期维护索引碎片\n\n3）在SQL语句中不要使用强制索引关键字\n\n#### 如何维护表结构\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511172206.png\"></img>\n#### 数据库中适合的操作\n如果我们在数据库中只执行它适合的操作的话，那么优化就成功了一大半\n\n1） 批量操作 VS 逐条操作\n\n数据库中适合批量操作，而逐条操作适合在程序中完成\n\n2） 禁止使用 select * 这样的查询\n\n这样会造成io的浪费，因为查询出大量的我们不使用的字段，另外如果表结构进行了变更使用select * 可能会使程序出错\n\n3） 控制用户使用自定义函数\n\n大量使用自定义函数会对索引的使用造成影响，因为如果使用了函数那么列中的索引就会不起作用，所以开发过程中尽量少使用自定义函数\n\n4）不要使用数据中的全文索引\n\n因为全文索引是需要另外建立索引文件来进行维护的，另外一方面是对中文的支持也不是太好\n\n#### 数据库表的垂直和水平拆分\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511173415.png\"></img>\n\n垂直拆分就是把原来的一张表拆分成多张小的表，垂直拆分后的多张小表他们的列是不一样的，这就是表的垂直拆分\n\n#### 什么时候进行垂直拆分？\n当我们的需求变得越来越多，我们可能会对某一张表的列进行增加，当这张表的列增加到几十列的时候，这个时候我们就要考虑对表进行垂直拆分。\n\n#### 那么垂直拆分有什么好处呢？\n首先我们数据库是以“页”来进行存储的，页中我们存储的行数越多那么我们的IO效率也就越高，但当一张表变得非常宽的时候，那么也就意味着每一行的数据大小也会变大，这样在一页中所能存储的行数就会越来越少，那么IO效率也会变得很低，但当我们对一张非常宽的表进行垂直拆分后形成多张比较窄的窄表，那么这时候每一张小表中每一行的长度就不会太大，这样就优化了表的IO读取效率。\n\n#### 把哪些列放到小表中？\n首先要把经常一起查询的列放大一张表中，另外把一些大字段放到另外的表中，这样就在查询的时候不需要在进行表的关联操作了，不但优化了IO，也减少了sql的复杂程度\n\n但是通过表的垂直拆分之后表的数据量是不应该有变化的，原来大表有一百万条数据，那么拆分后的小表每个也应该有一百万条数据。\n\n#### 表的水平拆分\n那么如果有一张大表，表中已经有了上亿条数据，我们希望把这张表的数据量减少，比如我们希望每张表中只有一千万行数据，那么这个时候就需要对表进行水平拆分\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512211357.png\"></img>\n水平拆分后每张表的结构都是相同的，把原来的一张表复制成多份，这就叫做水平拆分，每张表中存储的数据是不一样的。\n\n如何把一张大表中的数据分散到多个小表中呢？下面说种比较常用的方法：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512212010.png\"></img>\n通过主键哈希的方式来进行，每一张表中都是应该有主键的，通过对主键值进行哈希操作，比如说根据主键按模来取值，这样就可以把原来的一张大表平均的分散到多张小表中，每张小表的数据量是非常平均的，因为我们取的是哈希值，但是每张表中存储的数据都是不一样的，只有把这五张表全部汇总起来才是原来一张大表的数据，这就是比较常用的一种水平拆分的方式，水平拆分解决了表中数据量的问题，而垂直拆分解决了表的宽度问题，这就是在维护优化中经常用到的优化方式来优化表的IO\n\n","source":"_posts/数据库维护和优化.md","raw":"---\ntitle: 数据库维护和优化\ndate: 2020-05-11 15:45:22\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png\ncategories: 数据库\ntags:\n    - 数据库设计\n---\n\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png\"></img>\n\n<a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a>\n<a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a>\n\n\n由于项目中需求是不断变化的，所以数据库中的结构也是需要不断的做相应的改变\n\n#### 维护和优化中要做什么\n1）维护数据字典\n\n数据字典对于应用是否便于维护是非常重要的，如果我们不清楚表中每一个列或者说每一个表中存储的内容是什么，那么今后对应用进行升级维护就很难入手。\n特别是一些状态字段，比如用一些数字来表示的状态值，那么每一个数字代表的含义就一定要记录在数据字典中\n\n2）维护索引\n\n由于表结构和数据量的不断变化以及业务上使用的查询的不断变化我们就要对表中的索引去不断的进行维护和优化，有的索引在刚开始可能是适用的，但是随着数据量的增长和查询不断的变化，索引也可能从适用变成了不使用，这时候就要对老的索引进行删除并且建立新的索引\n\n3）维护表结构\n\n也是由于需求的不断变化，表结构也会随之跟着改变。如列的增加或者删除或者对于一些列的类型跟着更改\n\n4）在适当的时候对表进行水平拆分或垂直拆分\n\n随着数据量的不断增长，表中存储的数据量是有一定的瓶颈的，它超过某一个量级之后查询就会变得非常缓慢，这时就要进行拆分，拆分又分为水平拆分和垂直拆分\n\n#### 如何维护数据字典\n维护数据字典有很多种方式\n\n1）使用第三方工具对数据字典进行维护\n\n不同的数据库管理系统有不同的数据字典工具。\n\n2）利用数据库本身的备注字段来维护数据字典。以mysql为例\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511162843.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/dsadasdasdasdasd.png\"></img>\n\n导出数据库就可以形成数据字典了。\n\n#### 如何维护索引\n如何选择和是的列建立索引？\n\n1） 出现在where从句，group by从句，order by从句中的列\n\n但是从句中经常会出现多个列的情况，这种时候就要选择可选择性高的列要放到索引的前面\n\n2） 可选择性高的列要放到索引的前面\n\n这时大家可能会有一个误区：在索引列的顺序上要跟where条件中的列的顺序要保持一致，实际上这个要求并不是必须的，因为在现在的数据库中所有的sql在执行之前都要经过sql\n优化器重新编译。在编译过程中sql优化器就会按照我们数据库中的索引和统计信息对查询列重新的排序和优化，会自动选择适合sql的索引。\n\n3） 索引中不要包括太长的数据类型\n\n数据库是页的形式存储的，页对于mysql来说就是16k，在16k的大小中能够存储的条数越多那么索引查找的速度就会越快，因此索引的列不要太长，例如在mysql中它可以对“前置”进行索引的，比如text类型可以选择对前16个text字节进行索引\n\n#### 索引维护注意事项\n1）索引并不是越多越好，过多的索引不但会降低写效率，而且会降低读的效率\n\n2）定期维护索引碎片\n\n3）在SQL语句中不要使用强制索引关键字\n\n#### 如何维护表结构\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511172206.png\"></img>\n#### 数据库中适合的操作\n如果我们在数据库中只执行它适合的操作的话，那么优化就成功了一大半\n\n1） 批量操作 VS 逐条操作\n\n数据库中适合批量操作，而逐条操作适合在程序中完成\n\n2） 禁止使用 select * 这样的查询\n\n这样会造成io的浪费，因为查询出大量的我们不使用的字段，另外如果表结构进行了变更使用select * 可能会使程序出错\n\n3） 控制用户使用自定义函数\n\n大量使用自定义函数会对索引的使用造成影响，因为如果使用了函数那么列中的索引就会不起作用，所以开发过程中尽量少使用自定义函数\n\n4）不要使用数据中的全文索引\n\n因为全文索引是需要另外建立索引文件来进行维护的，另外一方面是对中文的支持也不是太好\n\n#### 数据库表的垂直和水平拆分\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511173415.png\"></img>\n\n垂直拆分就是把原来的一张表拆分成多张小的表，垂直拆分后的多张小表他们的列是不一样的，这就是表的垂直拆分\n\n#### 什么时候进行垂直拆分？\n当我们的需求变得越来越多，我们可能会对某一张表的列进行增加，当这张表的列增加到几十列的时候，这个时候我们就要考虑对表进行垂直拆分。\n\n#### 那么垂直拆分有什么好处呢？\n首先我们数据库是以“页”来进行存储的，页中我们存储的行数越多那么我们的IO效率也就越高，但当一张表变得非常宽的时候，那么也就意味着每一行的数据大小也会变大，这样在一页中所能存储的行数就会越来越少，那么IO效率也会变得很低，但当我们对一张非常宽的表进行垂直拆分后形成多张比较窄的窄表，那么这时候每一张小表中每一行的长度就不会太大，这样就优化了表的IO读取效率。\n\n#### 把哪些列放到小表中？\n首先要把经常一起查询的列放大一张表中，另外把一些大字段放到另外的表中，这样就在查询的时候不需要在进行表的关联操作了，不但优化了IO，也减少了sql的复杂程度\n\n但是通过表的垂直拆分之后表的数据量是不应该有变化的，原来大表有一百万条数据，那么拆分后的小表每个也应该有一百万条数据。\n\n#### 表的水平拆分\n那么如果有一张大表，表中已经有了上亿条数据，我们希望把这张表的数据量减少，比如我们希望每张表中只有一千万行数据，那么这个时候就需要对表进行水平拆分\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512211357.png\"></img>\n水平拆分后每张表的结构都是相同的，把原来的一张表复制成多份，这就叫做水平拆分，每张表中存储的数据是不一样的。\n\n如何把一张大表中的数据分散到多个小表中呢？下面说种比较常用的方法：\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512212010.png\"></img>\n通过主键哈希的方式来进行，每一张表中都是应该有主键的，通过对主键值进行哈希操作，比如说根据主键按模来取值，这样就可以把原来的一张大表平均的分散到多张小表中，每张小表的数据量是非常平均的，因为我们取的是哈希值，但是每张表中存储的数据都是不一样的，只有把这五张表全部汇总起来才是原来一张大表的数据，这就是比较常用的一种水平拆分的方式，水平拆分解决了表中数据量的问题，而垂直拆分解决了表的宽度问题，这就是在维护优化中经常用到的优化方式来优化表的IO\n\n","slug":"数据库维护和优化","published":1,"updated":"2020-05-17T09:22:27.860Z","_id":"ckaar8su10000oajx8zzi329w","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png\"></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<p>由于项目中需求是不断变化的，所以数据库中的结构也是需要不断的做相应的改变</p>\n<h4 id=\"维护和优化中要做什么\"><a href=\"#维护和优化中要做什么\" class=\"headerlink\" title=\"维护和优化中要做什么\"></a>维护和优化中要做什么</h4><p>1）维护数据字典</p>\n<p>数据字典对于应用是否便于维护是非常重要的，如果我们不清楚表中每一个列或者说每一个表中存储的内容是什么，那么今后对应用进行升级维护就很难入手。<br>特别是一些状态字段，比如用一些数字来表示的状态值，那么每一个数字代表的含义就一定要记录在数据字典中</p>\n<p>2）维护索引</p>\n<p>由于表结构和数据量的不断变化以及业务上使用的查询的不断变化我们就要对表中的索引去不断的进行维护和优化，有的索引在刚开始可能是适用的，但是随着数据量的增长和查询不断的变化，索引也可能从适用变成了不使用，这时候就要对老的索引进行删除并且建立新的索引</p>\n<p>3）维护表结构</p>\n<p>也是由于需求的不断变化，表结构也会随之跟着改变。如列的增加或者删除或者对于一些列的类型跟着更改</p>\n<p>4）在适当的时候对表进行水平拆分或垂直拆分</p>\n<p>随着数据量的不断增长，表中存储的数据量是有一定的瓶颈的，它超过某一个量级之后查询就会变得非常缓慢，这时就要进行拆分，拆分又分为水平拆分和垂直拆分</p>\n<h4 id=\"如何维护数据字典\"><a href=\"#如何维护数据字典\" class=\"headerlink\" title=\"如何维护数据字典\"></a>如何维护数据字典</h4><p>维护数据字典有很多种方式</p>\n<p>1）使用第三方工具对数据字典进行维护</p>\n<p>不同的数据库管理系统有不同的数据字典工具。</p>\n<p>2）利用数据库本身的备注字段来维护数据字典。以mysql为例<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511162843.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/dsadasdasdasdasd.png\"></p>\n<p>导出数据库就可以形成数据字典了。</p>\n<h4 id=\"如何维护索引\"><a href=\"#如何维护索引\" class=\"headerlink\" title=\"如何维护索引\"></a>如何维护索引</h4><p>如何选择和是的列建立索引？</p>\n<p>1） 出现在where从句，group by从句，order by从句中的列</p>\n<p>但是从句中经常会出现多个列的情况，这种时候就要选择可选择性高的列要放到索引的前面</p>\n<p>2） 可选择性高的列要放到索引的前面</p>\n<p>这时大家可能会有一个误区：在索引列的顺序上要跟where条件中的列的顺序要保持一致，实际上这个要求并不是必须的，因为在现在的数据库中所有的sql在执行之前都要经过sql<br>优化器重新编译。在编译过程中sql优化器就会按照我们数据库中的索引和统计信息对查询列重新的排序和优化，会自动选择适合sql的索引。</p>\n<p>3） 索引中不要包括太长的数据类型</p>\n<p>数据库是页的形式存储的，页对于mysql来说就是16k，在16k的大小中能够存储的条数越多那么索引查找的速度就会越快，因此索引的列不要太长，例如在mysql中它可以对“前置”进行索引的，比如text类型可以选择对前16个text字节进行索引</p>\n<h4 id=\"索引维护注意事项\"><a href=\"#索引维护注意事项\" class=\"headerlink\" title=\"索引维护注意事项\"></a>索引维护注意事项</h4><p>1）索引并不是越多越好，过多的索引不但会降低写效率，而且会降低读的效率</p>\n<p>2）定期维护索引碎片</p>\n<p>3）在SQL语句中不要使用强制索引关键字</p>\n<h4 id=\"如何维护表结构\"><a href=\"#如何维护表结构\" class=\"headerlink\" title=\"如何维护表结构\"></a>如何维护表结构</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511172206.png\"></p>\n<h4 id=\"数据库中适合的操作\"><a href=\"#数据库中适合的操作\" class=\"headerlink\" title=\"数据库中适合的操作\"></a>数据库中适合的操作</h4><p>如果我们在数据库中只执行它适合的操作的话，那么优化就成功了一大半</p>\n<p>1） 批量操作 VS 逐条操作</p>\n<p>数据库中适合批量操作，而逐条操作适合在程序中完成</p>\n<p>2） 禁止使用 select * 这样的查询</p>\n<p>这样会造成io的浪费，因为查询出大量的我们不使用的字段，另外如果表结构进行了变更使用select * 可能会使程序出错</p>\n<p>3） 控制用户使用自定义函数</p>\n<p>大量使用自定义函数会对索引的使用造成影响，因为如果使用了函数那么列中的索引就会不起作用，所以开发过程中尽量少使用自定义函数</p>\n<p>4）不要使用数据中的全文索引</p>\n<p>因为全文索引是需要另外建立索引文件来进行维护的，另外一方面是对中文的支持也不是太好</p>\n<h4 id=\"数据库表的垂直和水平拆分\"><a href=\"#数据库表的垂直和水平拆分\" class=\"headerlink\" title=\"数据库表的垂直和水平拆分\"></a>数据库表的垂直和水平拆分</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511173415.png\"></p>\n<p>垂直拆分就是把原来的一张表拆分成多张小的表，垂直拆分后的多张小表他们的列是不一样的，这就是表的垂直拆分</p>\n<h4 id=\"什么时候进行垂直拆分？\"><a href=\"#什么时候进行垂直拆分？\" class=\"headerlink\" title=\"什么时候进行垂直拆分？\"></a>什么时候进行垂直拆分？</h4><p>当我们的需求变得越来越多，我们可能会对某一张表的列进行增加，当这张表的列增加到几十列的时候，这个时候我们就要考虑对表进行垂直拆分。</p>\n<h4 id=\"那么垂直拆分有什么好处呢？\"><a href=\"#那么垂直拆分有什么好处呢？\" class=\"headerlink\" title=\"那么垂直拆分有什么好处呢？\"></a>那么垂直拆分有什么好处呢？</h4><p>首先我们数据库是以“页”来进行存储的，页中我们存储的行数越多那么我们的IO效率也就越高，但当一张表变得非常宽的时候，那么也就意味着每一行的数据大小也会变大，这样在一页中所能存储的行数就会越来越少，那么IO效率也会变得很低，但当我们对一张非常宽的表进行垂直拆分后形成多张比较窄的窄表，那么这时候每一张小表中每一行的长度就不会太大，这样就优化了表的IO读取效率。</p>\n<h4 id=\"把哪些列放到小表中？\"><a href=\"#把哪些列放到小表中？\" class=\"headerlink\" title=\"把哪些列放到小表中？\"></a>把哪些列放到小表中？</h4><p>首先要把经常一起查询的列放大一张表中，另外把一些大字段放到另外的表中，这样就在查询的时候不需要在进行表的关联操作了，不但优化了IO，也减少了sql的复杂程度</p>\n<p>但是通过表的垂直拆分之后表的数据量是不应该有变化的，原来大表有一百万条数据，那么拆分后的小表每个也应该有一百万条数据。</p>\n<h4 id=\"表的水平拆分\"><a href=\"#表的水平拆分\" class=\"headerlink\" title=\"表的水平拆分\"></a>表的水平拆分</h4><p>那么如果有一张大表，表中已经有了上亿条数据，我们希望把这张表的数据量减少，比如我们希望每张表中只有一千万行数据，那么这个时候就需要对表进行水平拆分<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512211357.png\"><br>水平拆分后每张表的结构都是相同的，把原来的一张表复制成多份，这就叫做水平拆分，每张表中存储的数据是不一样的。</p>\n<p>如何把一张大表中的数据分散到多个小表中呢？下面说种比较常用的方法：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512212010.png\"><br>通过主键哈希的方式来进行，每一张表中都是应该有主键的，通过对主键值进行哈希操作，比如说根据主键按模来取值，这样就可以把原来的一张大表平均的分散到多张小表中，每张小表的数据量是非常平均的，因为我们取的是哈希值，但是每张表中存储的数据都是不一样的，只有把这五张表全部汇总起来才是原来一张大表的数据，这就是比较常用的一种水平拆分的方式，水平拆分解决了表中数据量的问题，而垂直拆分解决了表的宽度问题，这就是在维护优化中经常用到的优化方式来优化表的IO</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511125758.png\"></img></p>\n<p><a href=\"https://chenxinshinian.com/2020/05/12/shu-ju-ku-she-ji/\">数据库设计</a><br><a href=\"https://chenxinshinian.com/2020/05/09/shu-ju-ku-luo-ji-she-ji/\">数据库逻辑设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wu-li-she-ji/\">数据库物理设计</a><br><a href=\"https://chenxinshinian.com/2020/05/11/shu-ju-ku-wei-hu-he-you-hua/\">数据库维护和优化</a></p>\n<p>由于项目中需求是不断变化的，所以数据库中的结构也是需要不断的做相应的改变</p>\n<h4 id=\"维护和优化中要做什么\"><a href=\"#维护和优化中要做什么\" class=\"headerlink\" title=\"维护和优化中要做什么\"></a>维护和优化中要做什么</h4><p>1）维护数据字典</p>\n<p>数据字典对于应用是否便于维护是非常重要的，如果我们不清楚表中每一个列或者说每一个表中存储的内容是什么，那么今后对应用进行升级维护就很难入手。<br>特别是一些状态字段，比如用一些数字来表示的状态值，那么每一个数字代表的含义就一定要记录在数据字典中</p>\n<p>2）维护索引</p>\n<p>由于表结构和数据量的不断变化以及业务上使用的查询的不断变化我们就要对表中的索引去不断的进行维护和优化，有的索引在刚开始可能是适用的，但是随着数据量的增长和查询不断的变化，索引也可能从适用变成了不使用，这时候就要对老的索引进行删除并且建立新的索引</p>\n<p>3）维护表结构</p>\n<p>也是由于需求的不断变化，表结构也会随之跟着改变。如列的增加或者删除或者对于一些列的类型跟着更改</p>\n<p>4）在适当的时候对表进行水平拆分或垂直拆分</p>\n<p>随着数据量的不断增长，表中存储的数据量是有一定的瓶颈的，它超过某一个量级之后查询就会变得非常缓慢，这时就要进行拆分，拆分又分为水平拆分和垂直拆分</p>\n<h4 id=\"如何维护数据字典\"><a href=\"#如何维护数据字典\" class=\"headerlink\" title=\"如何维护数据字典\"></a>如何维护数据字典</h4><p>维护数据字典有很多种方式</p>\n<p>1）使用第三方工具对数据字典进行维护</p>\n<p>不同的数据库管理系统有不同的数据字典工具。</p>\n<p>2）利用数据库本身的备注字段来维护数据字典。以mysql为例<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511162843.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/dsadasdasdasdasd.png\"></img></p>\n<p>导出数据库就可以形成数据字典了。</p>\n<h4 id=\"如何维护索引\"><a href=\"#如何维护索引\" class=\"headerlink\" title=\"如何维护索引\"></a>如何维护索引</h4><p>如何选择和是的列建立索引？</p>\n<p>1） 出现在where从句，group by从句，order by从句中的列</p>\n<p>但是从句中经常会出现多个列的情况，这种时候就要选择可选择性高的列要放到索引的前面</p>\n<p>2） 可选择性高的列要放到索引的前面</p>\n<p>这时大家可能会有一个误区：在索引列的顺序上要跟where条件中的列的顺序要保持一致，实际上这个要求并不是必须的，因为在现在的数据库中所有的sql在执行之前都要经过sql<br>优化器重新编译。在编译过程中sql优化器就会按照我们数据库中的索引和统计信息对查询列重新的排序和优化，会自动选择适合sql的索引。</p>\n<p>3） 索引中不要包括太长的数据类型</p>\n<p>数据库是页的形式存储的，页对于mysql来说就是16k，在16k的大小中能够存储的条数越多那么索引查找的速度就会越快，因此索引的列不要太长，例如在mysql中它可以对“前置”进行索引的，比如text类型可以选择对前16个text字节进行索引</p>\n<h4 id=\"索引维护注意事项\"><a href=\"#索引维护注意事项\" class=\"headerlink\" title=\"索引维护注意事项\"></a>索引维护注意事项</h4><p>1）索引并不是越多越好，过多的索引不但会降低写效率，而且会降低读的效率</p>\n<p>2）定期维护索引碎片</p>\n<p>3）在SQL语句中不要使用强制索引关键字</p>\n<h4 id=\"如何维护表结构\"><a href=\"#如何维护表结构\" class=\"headerlink\" title=\"如何维护表结构\"></a>如何维护表结构</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511172206.png\"></img></p>\n<h4 id=\"数据库中适合的操作\"><a href=\"#数据库中适合的操作\" class=\"headerlink\" title=\"数据库中适合的操作\"></a>数据库中适合的操作</h4><p>如果我们在数据库中只执行它适合的操作的话，那么优化就成功了一大半</p>\n<p>1） 批量操作 VS 逐条操作</p>\n<p>数据库中适合批量操作，而逐条操作适合在程序中完成</p>\n<p>2） 禁止使用 select * 这样的查询</p>\n<p>这样会造成io的浪费，因为查询出大量的我们不使用的字段，另外如果表结构进行了变更使用select * 可能会使程序出错</p>\n<p>3） 控制用户使用自定义函数</p>\n<p>大量使用自定义函数会对索引的使用造成影响，因为如果使用了函数那么列中的索引就会不起作用，所以开发过程中尽量少使用自定义函数</p>\n<p>4）不要使用数据中的全文索引</p>\n<p>因为全文索引是需要另外建立索引文件来进行维护的，另外一方面是对中文的支持也不是太好</p>\n<h4 id=\"数据库表的垂直和水平拆分\"><a href=\"#数据库表的垂直和水平拆分\" class=\"headerlink\" title=\"数据库表的垂直和水平拆分\"></a>数据库表的垂直和水平拆分</h4><p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200511173415.png\"></img></p>\n<p>垂直拆分就是把原来的一张表拆分成多张小的表，垂直拆分后的多张小表他们的列是不一样的，这就是表的垂直拆分</p>\n<h4 id=\"什么时候进行垂直拆分？\"><a href=\"#什么时候进行垂直拆分？\" class=\"headerlink\" title=\"什么时候进行垂直拆分？\"></a>什么时候进行垂直拆分？</h4><p>当我们的需求变得越来越多，我们可能会对某一张表的列进行增加，当这张表的列增加到几十列的时候，这个时候我们就要考虑对表进行垂直拆分。</p>\n<h4 id=\"那么垂直拆分有什么好处呢？\"><a href=\"#那么垂直拆分有什么好处呢？\" class=\"headerlink\" title=\"那么垂直拆分有什么好处呢？\"></a>那么垂直拆分有什么好处呢？</h4><p>首先我们数据库是以“页”来进行存储的，页中我们存储的行数越多那么我们的IO效率也就越高，但当一张表变得非常宽的时候，那么也就意味着每一行的数据大小也会变大，这样在一页中所能存储的行数就会越来越少，那么IO效率也会变得很低，但当我们对一张非常宽的表进行垂直拆分后形成多张比较窄的窄表，那么这时候每一张小表中每一行的长度就不会太大，这样就优化了表的IO读取效率。</p>\n<h4 id=\"把哪些列放到小表中？\"><a href=\"#把哪些列放到小表中？\" class=\"headerlink\" title=\"把哪些列放到小表中？\"></a>把哪些列放到小表中？</h4><p>首先要把经常一起查询的列放大一张表中，另外把一些大字段放到另外的表中，这样就在查询的时候不需要在进行表的关联操作了，不但优化了IO，也减少了sql的复杂程度</p>\n<p>但是通过表的垂直拆分之后表的数据量是不应该有变化的，原来大表有一百万条数据，那么拆分后的小表每个也应该有一百万条数据。</p>\n<h4 id=\"表的水平拆分\"><a href=\"#表的水平拆分\" class=\"headerlink\" title=\"表的水平拆分\"></a>表的水平拆分</h4><p>那么如果有一张大表，表中已经有了上亿条数据，我们希望把这张表的数据量减少，比如我们希望每张表中只有一千万行数据，那么这个时候就需要对表进行水平拆分<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512211357.png\"></img><br>水平拆分后每张表的结构都是相同的，把原来的一张表复制成多份，这就叫做水平拆分，每张表中存储的数据是不一样的。</p>\n<p>如何把一张大表中的数据分散到多个小表中呢？下面说种比较常用的方法：<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200512212010.png\"></img><br>通过主键哈希的方式来进行，每一张表中都是应该有主键的，通过对主键值进行哈希操作，比如说根据主键按模来取值，这样就可以把原来的一张大表平均的分散到多张小表中，每张小表的数据量是非常平均的，因为我们取的是哈希值，但是每张表中存储的数据都是不一样的，只有把这五张表全部汇总起来才是原来一张大表的数据，这就是比较常用的一种水平拆分的方式，水平拆分解决了表中数据量的问题，而垂直拆分解决了表的宽度问题，这就是在维护优化中经常用到的优化方式来优化表的IO</p>\n"},{"title":"解决博客访问此书不正确问题","date":"2020-05-14T07:59:38.000Z","img":"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png","_content":"<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png\"></img>\n\n\n一次无意间通过百度搜索自己的博客，点进去后发现博客的访问数量不对,\n仔细观察发现百度给我快照的是https://www.chenxinshinian.com 而我平时都是习惯使用 https://chenxinshinian.com\n这样该是node插件的问题，加上二级域名前缀竟然有两套不同的计算方式..太坑了。。。。\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143625.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143823.png\"></img>\n\n最后决定用最简单粗暴的方式解决，我直接到阿里云控制台关闭对www二级域名的解析，只保留一个入口，嘿嘿...\n反正感觉加上个前缀也是多此一举，输入还麻烦，","source":"_posts/解决博客访问此书不正确问题.md","raw":"---\ntitle: 解决博客访问此书不正确问题\ndate: 2020-05-14 15:59:38\nimg: https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png\ncategories: 记录\ntags:\n    - blog\n---\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png\"></img>\n\n\n一次无意间通过百度搜索自己的博客，点进去后发现博客的访问数量不对,\n仔细观察发现百度给我快照的是https://www.chenxinshinian.com 而我平时都是习惯使用 https://chenxinshinian.com\n这样该是node插件的问题，加上二级域名前缀竟然有两套不同的计算方式..太坑了。。。。\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143625.png\"></img>\n<img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143823.png\"></img>\n\n最后决定用最简单粗暴的方式解决，我直接到阿里云控制台关闭对www二级域名的解析，只保留一个入口，嘿嘿...\n反正感觉加上个前缀也是多此一举，输入还麻烦，","slug":"解决博客访问此书不正确问题","published":1,"updated":"2020-05-17T08:11:25.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckaas6mud0000qajx62ge6tte","content":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png\"></p>\n<p>一次无意间通过百度搜索自己的博客，点进去后发现博客的访问数量不对,<br>仔细观察发现百度给我快照的是<a href=\"https://www.chenxinshinian.com\" target=\"_blank\" rel=\"noopener\">https://www.chenxinshinian.com</a> 而我平时都是习惯使用 <a href=\"https://chenxinshinian.com\">https://chenxinshinian.com</a><br>这样该是node插件的问题，加上二级域名前缀竟然有两套不同的计算方式..太坑了。。。。<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143625.png\"><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143823.png\"></p>\n<p>最后决定用最简单粗暴的方式解决，我直接到阿里云控制台关闭对www二级域名的解析，只保留一个入口，嘿嘿…<br>反正感觉加上个前缀也是多此一举，输入还麻烦，</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"musics":[{"name":"Scarborough Fair","artist":"Sarah Brightman","url":"http://music.163.com/song/media/outer/url?id=5254072.mp3","cover":"http://p1.music.126.net/HcqyD4Xivl-ldiU9-tfgtg==/65970697683650.jpg?param=130y130"},{"name":"Sleepyhead","artist":"Galen Crew","url":"http://music.163.com/song/media/outer/url?id=27588470.mp3","cover":"http://p2.music.126.net/o378zLLwIxgkzBzAPSBGLg==/109951163266282072.jpg?param=130y130"},{"name":"Trampoline","artist":"Shaed","url":"http://music.163.com/song/media/outer/url?id=563733742.mp3","cover":"http://p2.music.126.net/nUoeeEP0xoVblUFS2744Ng==/109951163304832763.jpg?param=130y130"},{"name":"Time Back","artist":"Bad Style","url":"http://music.163.com/song/media/outer/url?id=28560087.mp3","cover":"http://p1.music.126.net/eGO19lZRExrLySz9p47LPg==/3264450024433089.jpg?param=130y130"},{"name":"Lost Control","artist":"Alan Walker / Sorana","url":"http://music.163.com/song/media/outer/url?id=1333160781.mp3","cover":"http://p2.music.126.net/-8DMwO-O-93cZ1D8CQ-mIw==/109951163699364002.jpg?param=130y130"},{"name":"Old Town Road","artist":"Lil Nas X","url":"http://music.163.com/song/media/outer/url?id=1351219081.mp3","cover":"http://p2.music.126.net/Waq693_WIQ2b5hCXcL1iTA==/109951163926711430.jpg?param=130y130"}]}},"excerpt":"","more":"<p><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143133.png\"></img></p>\n<p>一次无意间通过百度搜索自己的博客，点进去后发现博客的访问数量不对,<br>仔细观察发现百度给我快照的是<a href=\"https://www.chenxinshinian.com\" target=\"_blank\" rel=\"noopener\">https://www.chenxinshinian.com</a> 而我平时都是习惯使用 <a href=\"https://chenxinshinian.com\">https://chenxinshinian.com</a><br>这样该是node插件的问题，加上二级域名前缀竟然有两套不同的计算方式..太坑了。。。。<br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143625.png\"></img><br><img src=\"https://chenxinshinian.oss-cn-beijing.aliyuncs.com/img/20200514143823.png\"></img></p>\n<p>最后决定用最简单粗暴的方式解决，我直接到阿里云控制台关闭对www二级域名的解析，只保留一个入口，嘿嘿…<br>反正感觉加上个前缀也是多此一举，输入还麻烦，</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckaaqa3ue0002i4jxbsksfewn","category_id":"ck5y1zgh40005kouz0bdr3a48","_id":"ckaaqa3uj0007i4jxf2g81los"},{"post_id":"ckaaqa3ui0006i4jx1rxud86j","category_id":"ck96yqarr0001acuz93dd56cg","_id":"ckaaqa3uj000ai4jx8umve9hz"},{"post_id":"ckaaqa3u80000i4jx6td6ao3z","category_id":"ckaaqa3ug0003i4jx3hnu9il1","_id":"ckaaqa3uk000ci4jxdsfg0dy6"},{"post_id":"ckaaqa3v8000di4jxhp0se3bm","category_id":"ck5y1zgh40005kouz0bdr3a48","_id":"ckaaqa3vd000ii4jx9c0p59sc"},{"post_id":"ckaaqos9p0000wcjxfkji8ann","category_id":"ckaaqa3ug0003i4jx3hnu9il1","_id":"ckaaqos9v0002wcjx1ulbeeu2"},{"post_id":"ckaar5noo0000dwjxgow32lik","category_id":"ckaaqa3ug0003i4jx3hnu9il1","_id":"ckaar5noz0002dwjxgxmd70h4"},{"post_id":"ckaar8su10000oajx8zzi329w","category_id":"ckaaqa3ug0003i4jx3hnu9il1","_id":"ckaar9ab10001oljxaf8n1i8k"},{"post_id":"ckaas6mud0000qajx62ge6tte","category_id":"ckaas6mum0001qajxe9ju8di8","_id":"ckaas6muq0004qajx9vsj6s0o"},{"post_id":"ckaaqa3uh0005i4jxaoxs046c","category_id":"ckaas6mum0001qajxe9ju8di8","_id":"ckaas6mv20006qajxce0c3nrc"}],"PostTag":[{"post_id":"ckaaqa3ui0006i4jx1rxud86j","tag_id":"ck96yqars0002acuz697q4ee5","_id":"ckaaqa3uj0008i4jxb29ngsyo"},{"post_id":"ckaaqa3ui0006i4jx1rxud86j","tag_id":"ck93wdcee0002tsuz5ch14nb9","_id":"ckaaqa3uj0009i4jx076gbrpz"},{"post_id":"ckaaqa3u80000i4jx6td6ao3z","tag_id":"ckaaqa3ug0004i4jxejesep10","_id":"ckaaqa3uj000bi4jx7id0gzka"},{"post_id":"ckaaqa3v8000di4jxhp0se3bm","tag_id":"ck5y1zgh50006kouzfkbjadyn","_id":"ckaaqa3vc000gi4jx5x5adfdb"},{"post_id":"ckaaqos9p0000wcjxfkji8ann","tag_id":"ckaaqa3ug0004i4jxejesep10","_id":"ckaaqos9v0001wcjxbdk582s5"},{"post_id":"ckaar5noo0000dwjxgow32lik","tag_id":"ckaaqa3ug0004i4jxejesep10","_id":"ckaar5noz0001dwjx1hkg648w"},{"post_id":"ckaar8su10000oajx8zzi329w","tag_id":"ckaaqa3ug0004i4jxejesep10","_id":"ckaar9ab00000oljxhn7jhycx"},{"post_id":"ckaas6mud0000qajx62ge6tte","tag_id":"ckaas6muo0002qajxgs26dj05","_id":"ckaas6mup0003qajx6kox7vnh"},{"post_id":"ckaaqa3uh0005i4jxaoxs046c","tag_id":"ckaas6muo0002qajxgs26dj05","_id":"ckaas6mv10005qajx3owda7bj"}],"Tag":[{"name":"vuepress","_id":"ck5y1zgh50006kouzfkbjadyn"},{"name":"Java","_id":"ck93wdcee0002tsuz5ch14nb9"},{"name":"设计模式","_id":"ck96yqars0002acuz697q4ee5"},{"name":"数据库设计","_id":"ckaaqa3ug0004i4jxejesep10"},{"name":"blog","_id":"ckaas6muo0002qajxgs26dj05"}]}}